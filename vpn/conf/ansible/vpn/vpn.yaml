---

- hosts: "{{host}}"
  vars:
    - virtenv_path: "{{syscxp_root}}/virtualenv/vpn/"
    - vpn_root: "{{syscxp_root}}/vpn"
    - file_root: "files/vpn"
    - pip_url: "{{pypi_url|default('https://pypi.python.org/simple/')}}"
    - proxy: "{{http_proxy|default()}}"
    - sproxy: "{{https_proxy|default()}}"
    - chroot_env: "{{chroot|default('false')}}"
    - is_init: "{{init|default('false')}}"
    - yum_repos: "{{yum_repo|default('false')}}"

  tasks:
    - include: syscxplib.yaml

    - name: create root directories
      shell: "mkdir -p {{item}}"
      with_items:
        - "{{vpn_root}}"
        - "{{virtenv_path}}"

    - name: install related packages on RedHat based OS from user defined repo
      when: ansible_os_family == 'RedHat' and yum_repos != 'false'
      shell: "yum --disablerepo=* --enablerepo={{yum_repos}} --nogpgcheck install -y bridge-utils wget vconfig net-tools sshpass rsync"

    - name: install related packages on RedHat based OS from online
      when: ansible_os_family == 'RedHat' and yum_repos == 'false'
      shell: "yum --nogpgcheck install -y bridge-utils wget vconfig net-tools sshpass rsync "

    - name: RHEL7 specific packages from user defined repos
      when: ansible_os_family == 'RedHat' and ansible_distribution_version >= '7' and yum_repos != 'false'
      shell: "rpm -q iptables-services || yum --disablerepo=* --enablerepo={{yum_repos}} --nogpgcheck install -y iptables-services"

    - name: RHEL7 specific packages from online
      when: ansible_os_family == 'RedHat' and ansible_distribution_version >= '7' and yum_repos == 'false'
      shell: "rpm -q iptables-services || yum --nogpgcheck install -y iptables-services "

    - name: disable firewalld in RHEL7 and Centos7
      when: ansible_os_family == 'RedHat' and ansible_distribution_version >= '7'
      shell: "(which firewalld && service firewalld stop && chkconfig firewalld off) || true"

    - name: copy iptables initial rules in RedHat
      copy: src="{{file_root}}/iptables" dest=/etc/sysconfig/iptables
      when: ansible_os_family == "RedHat" and is_init == 'true'

    - name: disable NetworkManager in RedHat
      service: name=NetworkManager state=stopped enabled=no
      when: ansible_os_family == 'RedHat'
      ignore_errors: yes

    - name: disable selinux on RedHat based OS
      when: ansible_os_family == 'RedHat'
      selinux: state=permissive policy=targeted

    - shell: virtualenv --version | grep "12.1.1"
      register: virtualenv_ret
      ignore_errors: True

    - name: install virtualenv
      pip: name=virtualenv version=12.1.1 extra_args="--ignore-installed --trusted-host {{trusted_host}} -i {{pip_url}}"
      when: virtualenv_ret.rc != 0

    - name: create virtualenv
      shell: "rm -rf {{virtenv_path}} && rm -f {{kvm_root}}/{{pkg_syscxplib}} && rm -f {{kvm_root}}/{{pkg_vpnagent}} && virtualenv --system-site-packages {{virtenv_path}}"


    - name: copy syscxplib
      copy: src="files/syscxplib/{{pkg_syscxplib}}" dest="{{kvm_root}}/{{pkg_syscxplib}}"
      notify:
        - install syscxplib

    - name: copy vpnagent
      copy: src="{{file_root}}/{{pkg_vpnagent}}" dest="{{kvm_root}}/{{pkg_vpnagent}}"
      notify:
        - install vpnagent

    # only for os using init.d not systemd
    - name: copy kvm service file
      when: ansible_os_family == 'RedHat' or ansible_os_family == 'Debian'
      copy: src=files/kvm/syscxp-vpnagent dest=/etc/init.d/ mode=755

    - meta: flush_handlers

    - name: restart vpnagent
      service: name=syscxp-vpnagent state=restarted enabled=yes
      when: chroot_env == 'false'

  handlers:
    - name: install syscxplib
      environment:
        http_proxy: "{{proxy}}"
        https_proxy: "{{sproxy}}"
      pip: name="{{kvm_root}}/{{pkg_syscxplib}}" extra_args="--ignore-installed --trusted-host {{trusted_host}} -i {{pip_url}}" virtualenv="{{virtenv_path}}" virtualenv_site_packages=yes

    - name: restart redhat libvirtd
      service: name=libvirtd state=restarted enabled=yes
      when: chroot_env == 'false' and ansible_os_family == 'RedHat'

    - name: restart debian libvirtd
      service: name=libvirt-bin state=restarted enabled=yes
      when: chroot_env == 'false' and ansible_os_family == 'Debian'

    - name: install vpnagent
      environment:
        http_proxy: "{{proxy}}"
        https_proxy: "{{sproxy}}"
      pip: name="{{kvm_root}}/{{pkg_vpnagent}}" extra_args="--ignore-installed --trusted-host {{trusted_host}} -i {{pip_url}}" virtualenv="{{virtenv_path}}" virtualenv_site_packages=yes

