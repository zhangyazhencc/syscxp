
1. 内存数据
    l3_route_running{} : 运行中的路由
    // l3_endpints_running{} : 运行中的监控数据
    l3_pingthread_running{} : 运行中的线程

2. 定时获取数据任务
    数据结构：current_l3_monitor
        {
            "success":true,
            "msg":"success",
            "data":[
                {
                    "l3route":{
            　　　　      "l3endpoint_id":"f56e79ca94454cf0b1a209c4e3e8cfcf",   -- L3EndPointVO.uuid
            　　　　      "local_ip":"192.168.112.2",                           -- 互联ip，L3EndPointVO.localIp
            　　　　      "vlan":2055,                                          -- vlan，远端监控ip，L3EndPointVO.vlan
            　　　　      "interface_name":"enp2s0"                             -- 交换机对应的监控接口，HostSwitchMonitorEO.interfaceName
            　　　　      "monitor_ip":"192.168.112.4"                          -- 监控ip，L3EndPointVO.monitorIp
                    },
                    "monitors":[
                        {
                            "dst_l3endpoint_id":"f36e79ca94454cf0b1a209c4e3e8oiu3",
                            "monitor_ip":"192.168.112.4"
                        },
                        {
                            "dst_l3endpoint_id":"gg6e79ca94454cf0b1a209c4e3e8o38u",
                            "monitor_ip":"192.168.112.5"
                        }
                    ]
                },
                {
                    "l3route":{
            　　　　      "l3endpoint_id":"f56e79ca94454cf0b1a209c4e3e8cfcf",   -- L3EndPointVO.uuid
            　　　　      "local_ip":"192.168.112.2",                           -- 互联ip，L3EndPointVO.localIp
            　　　　      "vlan":2055,                                          -- vlan，远端监控ip，L3EndPointVO.vlan
            　　　　      "interface_name":"enp2s0"                             -- 交换机对应的监控接口，HostSwitchMonitorEO.interfaceName
            　　　　      "monitor_ip":"192.168.112.4"                          -- 监控ip，L3EndPointVO.monitorIp
                    },
                    "monitors":[
                        {
                            "dst_l3endpoint_id":"f36e79ca94454cf0b1a209c4e3e8oiu3",
                            "monitor_ip":"192.168.112.4"
                        },
                        {
                            "dst_l3endpoint_id":"gg6e79ca94454cf0b1a209c4e3e8o38u",
                            "monitor_ip":"192.168.112.5"
                        }
                    ]
                }
            ]
        }

    -- 遍历data数组
    2.1 对比 l3route 与 l3_route_running
        在 l3_route_running 存在
            add_route();
            add l3_route_running;
            遍历 dst_endpints
                在 l3_endpints_running 不存在
                    开启ping线程

        在 l3_route_running 不存在
            delete_route();
            遍历 dst_endpints
                停止ping线程

        l3route 存在，l3_route_running 存在，且监控ip不一致
            update_route();

    2.2 遍历 dst_endpints
        在 l3_endpints_running 不存在
            开启ping线程
        在 l3_endpints_running 存在，且 monitor_ip 不一致
            更新ping线程

    2.3 遍历 l3_endpints_running
        在 dst_endpints 不存在
            停止ping线程

3. 路由HTTP接口
    2.1 新增路由路由
        接口：/l3net/add_route
        在 l3route 不存在
            add_route();

    2.3 修改路由接口（修改监控ip）
        接口：/l3net/update_route
        在 l3route 存在
            update_route();

    2.4 删除路由接口
        接口：/l3net/delete_route
        在 l3route 存在
            delete_route();

3. Ping线程HTTP接口
    3.1 开启监控
        接口：/l3net/start_monitor
        在 l3_pingthread_running 不存在
            start_thread();

    3.2 关闭监控
        接口：/l3net/stop_monitor
        在 l3_pingthread_running 存在
            stop_thread();

    3.3 更新监控
        接口：/l3net/update_monitor
        在 l3_pingthread_running 存在，且 monitor_ip 与 不一致
            update_thread();

4. ping 线程
    采集数据

5. 方法
    add_route();
    delete_route();
    update_route();

    start_thread();
    stop_thread();
    update_thread();

    get_running_route();
    get_running_thread();


##############################################################################################
# encoding: utf-8

from flask import Flask
from utils import log
from utils import http
from utils import jsonobject
import json

app = Flask(__name__)
logger = log.get_logger(__name__)

l3route_runnings = {}
l3monitor_runnings = {}


def l3_current_handler(l3route):
    logger.info(l3route['l3endpoint_id'])
    route_id = l3route['l3endpoint_id']
    vlan = str(l3route['vlan'])

    # l3route['monitor_ip'] = l3route['monitor_ip'].split('/')[0]
    l3route['if_name'] = l3route['interface_name'] + "." + vlan
    l3route['netns_name'] = l3route['interface_name'] + "_" + vlan

    if route_id not in l3route_runnings.keys():
        l3route_runnings[route_id] = l3route
        add_route(l3route)
        start_monitor(l3route)
    elif route_id in l3route_runnings.keys():
        l3route_running = l3route_runnings[route_id]
        if l3route['monitor_ip'] != l3route_running['monitor_ip']:
            l3route_running['monitor_ip'] = l3route['monitor_ip']
            update_monitor_ip(l3route)
        update_monitor(l3route)

def l3_runnings_handler(l3routes):
    for l3route_running in l3route_runnings:
        pass


    # for l3route in l3routes:
    #     if l3route["l3endpoint_id"] not in l3route_runnings.keys():
    #         del_route(l3route)
    #         stop_monitor(l3route)

def add_route(l3route):
    logger.info(u'添加路由 %s' % l3route['l3endpoint_id'])


def del_route(l3route):
    logger.info(u'删除路由 %s' % l3route['l3endpoint_id'])


def update_monitor_ip(l3route):
    logger.info(u'更新监控ip %s' % l3route['l3endpoint_id'])


def start_monitor(l3route):
    for monitor in l3route['monitors']:
        logger.info(u'启动监控线程 %s' % monitor['dst_l3endpoint_id'])


def stop_monitor(l3route):
    for monitor in l3route['monitors']:
        logger.info(u'停止监控线程 %s' % monitor['dst_l3endpoint_id'])


def update_monitor(l3route):
    for monitor in l3route['monitors']:
        if monitor['dst_l3endpoint_id'] not in l3monitor_runnings.keys():
            logger.info(u'更新监控线程 %s' % monitor['dst_l3endpoint_id'])

    for monitor in l3monitor_runnings:
        pass


def start_ping_thread():
    pass


def stop_ping_thread():
    pass


def monitors_handler(monitors):
    for monitor in monitors:
        logger.info(monitor['dst_l3endpoint_id'])


@app.route('/')
def test():
    cmd = {"monitorHostIp": "192.168.211.23"}
    url = 'http://192.168.211.96:8083/tunnel/asyncrest/sendcommand'
    logger.info("-- [get l3 info start...] commandPath:MONITOR/L3INFO--URL:%s -- DATA:%s --" % (
        url, cmd))

    ret = http.json_dump_post(url, cmd, {'commandPath': 'MONITOR/L3INFO'})
    #resp = jsonobject.loads(ret)
    resp = json.loads(ret)

    if resp['success']:
        # logger.info("------ resp info ---- %s" % ret)

        logger.info(resp['data'])

        # l3route = json.loads(resp.data.l3route)

        l3routes = resp['data']
        for l3info in l3_routes:
            l3route = l3info['l3route']
            l3route['monitors'] = l3info['monitors']

            l3_current_handler(l3route)

        l3_runnings_handler(l3routes)
    else:
        logger.warning('failed to get l3 info ! Error: %s' % resp.msg)
    return ret


if __name__ == '__main__':
    app.run()
