# at: src/main/java/org/zstack/aliyun/backup/BackupToAliyunBase.java:452
# args: 
no\ bucket\ found\ for\ backup = 

# at: src/main/java/org/zstack/aliyun/core/AliyunClient.java:26
# args: 
regionId,\ accessKey\ and\ keySecret\ must\ be\ set = 

# at: src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:2323
# args: 
the\ izone\ chosen\ by\ user\ doesn't\ support\ vpc = 

# at: src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:908
# args: 
no\ identity\ zones\ can\ be\ used\ now = 

# at: src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:1068
# args: request.getRegionId()
regionId[%s]\ is\ invalid\ by\ aliyun! = 

# at: src/main/java/org/zstack/aliyun/datacenter/CreateDataCenterInDBFlow.java:109
# args: vbrvo.getAccessPointUuid()
vbrvo\ couldn't\ find\ connection\ access\ point\:\ [%s]\ in\ db = 

# at: src/main/java/org/zstack/aliyun/datacenter/CreateDataCenterInDBFlow.java:131
# args: vrivo.getAccessPointUuid()
vrivo\ couldn't\ find\ connection\ access\ point\:\ [%s]\ in\ db = 

# at: src/main/java/org/zstack/aliyun/datacenter/CreateDataCenterInDBFlow.java:161
# args: vrivo.getVirtualRouterUuid()
vrivo\ couldn't\ find\ virtual\ border\ router\:\ [%s]\ in\ db = 

# at: src/main/java/org/zstack/aliyun/datacenter/CreateDataCenterInDBFlow.java:148
# args: vrivo.getVirtualRouterUuid()
vrivo\ couldn't\ find\ virtual\ router\:\ [%s]\ in\ db = 

# at: src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java:86
# args: 
image\ has\ been\ deleted! = 

# at: src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java:48
# args: 
image\ has\ bee\ deleted! = 

# at: src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java:119
# args: 
No\ Available\ instance\ types\ now. = 

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:68
# args: 
Only\ admin\ can\ set\ parameter\ [onlyZstack]\ \=\ false = 

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:61
# args: osType
valid\ OSType\:[%s]\ for\ aliyun\ image\ import,\ valid\ value\ are\:\ [linux,\ windows] = 

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:66
# args: platform,EcsImageConstant.ECS_IMAGE_PLATFORM.getValid()
valid\ platform\:[%s]\ for\ aliyun\ image\ import,\ valid\ value\ are\:\ [%s] = 

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:90
# args: ivo.getUuid()
image\ [%s]\ is\ not\ enable\ now = 

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:110
# args: imageUuid
no\ backup\ storage\ found\ for\ imageUuid\:\ %s = 

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:114
# args: imageUuid
exceeded\ backup\ storage\ found\ for\ the\ imageUuid\:\ %s,\ please\ indicate\ it\ manually = 

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:96
# args: evo.getAvailableIpAddressCount()
vSwitch\ availableIpAddress\ is\ not\ enough,\ now\ is\ (%d) = 

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:100
# args: privateIp,cidr
%s\ is\ not\ in\ cidr\ range\:\ %s = 

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:134
# args: vSwitchUuid,ecs.getUuid()
private\ ip\ is\ existed\ in\ vswitch\:\ %s,\ allocated\ to\ ecs\:\ %s = 

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:125
# args: password
password\:\ [%s]\ is\ not\ valid = 

# at: src/main/java/org/zstack/aliyun/ecs/EcsInstanceManagerImpl.java:191
# args: rly1.getVncUrl()
decode\ url\ failed\:\ %s = 

# at: src/main/java/org/zstack/aliyun/ecs/StartEcsInstancePublicFlow.java:83
# args: ecs.getUuid()
ecs\ [%s]\ start\ failed,\ skip\ modify\ vnc\ password = 

# at: src/main/java/org/zstack/aliyun/ecs/StartEcsInstancePublicFlow.java:99
# args: ecs.getUuid(),reply.getError().getCode(),reply.getError().getDetails()
modify-ecs-[%s]-console-vnc-password-failed,\ due\ to\ [code\:\ %s,\ details\:\ %s] = 

# at: src/main/java/org/zstack/aliyun/ecs/StartEcsInstancePublicFlow.java:64
# args: ecs.getUuid(),rpl.getStatus()
ecs\ instance\ [%s]\ start\ isn't\ finish,\ status\ is\ still\ [%s] = 

# at: src/main/java/org/zstack/aliyun/ecs/StartEcsInstancePublicFlow.java:58
# args: ecs.getUuid(),reply.getError().getCode(),reply.getError().getDetails()
ecs\ instance\ [%s]\ start\ failed,\ due\ to\:\ [code\:\ %s,\ details\:\ %s] = 

# at: src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:2002
# args: msg.getNextHopType()
not\ supported\ next\ hop\ type\:\ %s = 

# at: src/main/java/org/zstack/aliyun/network/connection/ConnectionBetweenL3NetworkAndAliyunVSwitchCascadeExtension.java:178
# args: vRouterVmUuid
no\ such\ virtual\ router\ vm\ found\ for\:\ %s = 

# at: src/main/java/org/zstack/aliyun/network/connection/CreateVbrRouteEntryFlow.java:67
# args: tuple.get(0, String.class),msg.getVbrUuid(),vpcCidr
custom\ cidr\ [%s]\ is\ already\ existed\ in\ vbr\ [%s],\ it\ is\ overlapped\ with\ target\ cidr\ [%s],\ please\ check\ and\ delete\ it\ first. = 

# at: src/main/java/org/zstack/aliyun/network/connection/CreateVbrRouteEntryFlow.java:131
# args: msg.getVbrUuid()
local\ cidr\ and\ entry\ is\ already\ existed\ in\ vbr\ [%s],\ skip\ create\ entry = 

# at: src/main/java/org/zstack/aliyun/network/connection/CreateVbrRouteEntryFlow.java:64
# args: msg.getVbrUuid()
vpc\ cidr\ and\ entry\ is\ already\ existed\ in\ vbr\ [%s],\ skip\ create\ entry = 

# at: src/main/java/org/zstack/aliyun/network/connection/CreateVpcRouteEntryFlow.java:61
# args: tuple.get(0, String.class),vRouterUuid,localCidrs.get(0)
custom\ cidr\ [%s]\ is\ already\ existed\ in\ vrouter\ [%s],\ it\ is\ overlapped\ with\ target\ cidr\ [%s],\ please\ check\ and\ delete\ it\ first. = 

# at: src/main/java/org/zstack/aliyun/network/connection/CreateVpcRouteEntryFlow.java:58
# args: vRouterUuid
local\ cidr\ and\ entry\ is\ already\ existed\ in\ vrouter\ [%s],\ skip\ create\ entry = 

# at: src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java:45
# args: msg.getL3networkUuid()
No\ Such\ Cidr\ found\ for\ l3network\:\ %s = 

# at: src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java:37
# args: msg.getL3networkUuid()
No\ Such\ VRouter\ nic\ found\ for\ l3network\:\ %s = 

# at: src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java:54
# args: msg.getvSwitchUuid()
No\ Such\ Ecs\ VSwitch\ found\ for\ vswitch\:\ %s = 

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:44
# args: msg.getUuid()
no\ such\ vswitch\ found\ for\:\ %s = 

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:50
# args: msg.getUuid()
no\ such\ vpc\ found\ for\:\ %s = 

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:56
# args: msg.getUuid()
no\ such\ vm\ found\ for\:\ %s = 

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:62
# args: msg.getUuid()
no\ such\ vbr\ found\ for\:\ %s = 

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:68
# args: msg.getUuid()
no\ such\ l3network\ found\ for\:\ %s = 

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:73
# args: msg.getResourceType()
not\ a\ supported\ resource\ type\:\ %s = 

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:79
# args: 
Only\ admin\ can\ create\ connections = 

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:83
# args: msg.getCpeIp()
CpeIp\ must\ be\ ipv4\ address,\ but\ now\ is\ %s = 

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:87
# args: msg.getL3networkUuid()
l3network\ %s\ is\ already\ connected,\ please\ check\ it = 

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:93
# args: msg.getvSwitchUuid()
vswitch\ %s\ is\ already\ connected,\ please\ check\ it = 

# at: src/main/java/org/zstack/aliyun/oss/EcsOssManagerImpl.java:144
# args: 
oss\ bucket\ is\ not\ empty! = 

# at: src/main/java/org/zstack/aliyun/oss/EcsOssManagerImpl.java:453
# args: msg.getRegionId()
No\ Such\ regionId\:\ %s\ now = 

# at: src/main/java/org/zstack/aliyun/oss/EcsOssManagerImpl.java:117
# args: msg.getDataCenterUuid()
another\ OssBucket\ has\ been\ attached\ to\ dataCenter\:\ %s = 

# at: src/main/java/org/zstack/apimediator/ApiValidator.java:60
# args: hostname,newBS
More\ than\ one\ BackupStorage\ on\ the\ same\ host\ identified\ by\ hostname.\ There\ has\ been\ a\ SftpBackupStorage\ [hostname\:%s]\ existing.\ The\ BackupStorage\ type\ to\ be\ added\ is\ %s.\  = \u8D85\u8FC7\u4E00\u4E2A\u76F8\u540C\u7684\u5907\u4EFD\u5B58\u50A8\u7C7B\u578B\u5728\u8BA4\u8BC1\u7684\u7269\u7406\u673A\u4E0A\uFF0C\u8FD9\u4E8B\u53D1\u751F\u5728Sftp\u5B58\u50A8\u4E0A [\u673A\u5668\u540D:{0}] \u5DF2\u5B58\u5728. \u8FD9\u4E2A\u7C7B\u578B\u7684\u5907\u4EFD\u5B58\u50A8\u5DF2\u7ECF\u88AB\u6DFB\u52A0{1}

# at: src/main/java/org/zstack/apimediator/ApiValidator.java:68
# args: hostname,newBS
More\ than\ one\ BackupStorage\ on\ the\ same\ host\ identified\ by\ hostname.\ There\ has\ been\ an\ ImageStoreBackupStorage\ [hostname\:%s]\ existing.\ The\ BackupStorage\ type\ to\ be\ added\ is\ %s.\  = \u8D85\u8FC7\u4E00\u4E2A\u76F8\u540C\u7684\u5907\u4EFD\u5B58\u50A8\u7C7B\u578B\u5728\u8BA4\u8BC1\u7684\u7269\u7406\u673A\u4E0A\uFF0C\u8FD9\u4E8B\u53D1\u751F\u5728\u955C\u50CF\u4ED3\u5E93\u4E0A [\u673A\u5668\u540D:{0}] \u5DF2\u5B58\u5728. \u8FD9\u4E2A\u7C7B\u578B\u7684\u5907\u4EFD\u5B58\u50A8\u5DF2\u7ECF\u88AB\u6DFB\u52A0{1}

# at: src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:126
# args: self.getUuid(),getSelf().getStatus(),msg.getPath()
appliance\ vm[uuid\:%s]\ is\ in\ status\ of\ %s\ that\ cannot\ make\ http\ call\ to\ %s = \u7CFB\u7EDF\u865A\u62DF\u673A[uuid:{0}]\u5904\u4E8E{1}\u72B6\u6001\uFF0C\u65E0\u6CD5\u5BF9[{2}]\u6267\u884CHTTP RPC\u8C03\u7528

# at: src/main/java/org/zstack/baremetal/hardwareinfo/BaremetalHardwareInfoImpl.java:75
# args: 
the\ sended\ hardware\ info\ does\ not\ belong\ to\ any\ baremetal\ chassis = 

# at: src/main/java/org/zstack/baremetal/hardwareinfo/BaremetalHardwareInfoImpl.java:89
# args: 
failed\ to\ create\ HardwareInfo\ using\ the\ sended\ hardware\ info = 

# at: src/main/java/org/zstack/baremetal/hardwareinfo/BaremetalHardwareInfoImpl.java:85
# args: 
successfully\ created\ HardwareInfo\ using\ the\ sended\ hardware\ info = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:45
# args: 
IP/Netmask\ should\ be\ all\ empty\ or\ all\ exists. = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:50
# args: ip
Ip\ address\ %s\ is\ not\ valid. = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:57
# args: ip,chassis.getUuid()
Ip\ address\ %s\ is\ same\ as\ IPMI\ address\ of\ chassis\ %s. = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:64
# args: netmask
Netmask\ %s\ is\ not\ valid. = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:70
# args: gateway
Gateway\ %s\ is\ not\ valid. = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:76
# args: netmask
Name\ Server\ %s\ is\ not\ valid. = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:82
# args: ip,gateway
IP\ address\ %s\ and\ Gateway\ %s\ do\ not\ belong\ to\ one\ subnet! = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:94
# args: 
Mac\ cannot\ be\ empty. = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:98
# args: nicCfg.getMac()
Mac\ address\ %s\ is\ not\ valid.\ It\ should\ be\ like\ 11\:11\:11\:11\:11\:11 = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:180
# args: 
Same\ MACs\ exist\ in\ nicCfgs = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:183
# args: 
Same\ IPs\ exist\ in\ nicCfgs = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:122
# args: nicCfg.getMac()
MAC\ %s\ has\ been\ taken,\ please\ choose\ another\ one. = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:132
# args: nicCfg.getIp()
IP\ %s\ has\ been\ taken,\ please\ choose\ another\ one. = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:155
# args: 
There\ must\ be\ one\ and\ only\ one\ pxe\=true. = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:155
# args: name
Bonding\ name\ %s\ is\ too\ long\ (\ >\ 255\ ). = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:162
# args: 
Bonding\ slaves\ is\ empty. = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:169
# args: 
Bonding\ mode\ is\ empty. = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:177
# args: slave
Mac\ address\ %s\ is\ not\ valid.\ It\ should\ be\ like\ 11\:11\:11\:11\:11\:11.\ Slaves\ should\ be\ seperated\ by\ comma. = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:190
# args: chassisUuid
Baremetal\ Chassis\ uuid\ %s\ does\ not\ exist. = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:197
# args: chassisUuid
Baremetal\ HostCfg\ with\ chassis\ uuid\ %s\ already\ exists. = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostApiInterceptor.java:203
# args: 
nicCfgs\ is\ missing. = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostImpl.java:70
# args: 
failed\ to\ set\ provisioned\ \=\ true\ after\ baremetal\ host\ provisioning = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostImpl.java:89
# args: 
failed\ to\ clean\ up\ baremetal\ hostcfg\ after\ baremetal\ host\ provisioning = 

# at: src/main/java/org/zstack/baremetal/host/BaremetalHostImpl.java:84
# args: msg1.getIpmiAddress()
successfully\ provisioned\ baremetal\ host\ whose\ IPMI\ address\ is\ %s = 

# at: src/main/java/org/zstack/baremetal/power/BaremetalChassisApiInterceptor.java:40
# args: address
IPMI\ Address\ %s\ is\ not\ valid = 

# at: src/main/java/org/zstack/baremetal/power/BaremetalChassisApiInterceptor.java:48
# args: address,nicCfg.getUuid()
The\ input\ IPMI\ address\ %s\ is\ same\ as\ IP\ address\ of\ host\ nicCfg\ %s. = 

# at: src/main/java/org/zstack/baremetal/power/BaremetalChassisApiInterceptor.java:55
# args: address,username,password
Cannot\ reach\ remote\ server\ with\ IPMI\ address\ %s,\ IPMI\ username\ %s,\ IPMI\ password\ %s = 

# at: src/main/java/org/zstack/baremetal/power/BaremetalChassisApiInterceptor.java:66
# args: address
Baremetal\ Chassis\ of\ IPMI\ address\ %s\ has\ already\ been\ created. = 

# at: src/main/java/org/zstack/baremetal/power/BaremetalChassisApiInterceptor.java:90
# args: 
The\ query\ condition\ of\ provisioned\ must\ be\ 'true'\ or\ 'false'. = 

# at: src/main/java/org/zstack/baremetal/power/BaremetalChassisApiInterceptor.java:102
# args: uuid
Chassis\ %s\ has\ already\ been\ provisioned.\ Update\ provisioned\=false\ before\ re-provision. = 

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:43
# args: dhcpNic
PXE\ Server\ DHCP\ Interface\ %s\ is\ not\ valid. = 

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:87
# args: 
Set\ Range\ Start\ &\ End,\ or\ set\ Range\ Start\ &\ End\ &\ Netmask! = 

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:52
# args: begin
PXE\ Server\ DHCP\ Range\ Start\ %s\ is\ not\ valid. = 

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:57
# args: end
PXE\ Server\ DHCP\ Range\ Stop\ %s\ is\ not\ valid. = 

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:62
# args: netmask
PXE\ Server\ DHCP\ Range\ Netmask\ %s\ is\ not\ valid. = 

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:67
# args: begin,end
PXE\ Server\ DHCP\ Range\ Start\ %s\ is\ larger\ than\ Range\ Stop\ %s. = 

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:72
# args: begin,end
PXE\ Server\ DHCP\ Range\ Start\ %s\ and\ Range\ Stop\ %s\ do\ not\ belong\ to\ the\ same\ subnet. = 

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:81
# args: begin,end,netmask != null ? netmask : dhcpNm,dhcpNic
IP/NM\ of\ DHCP\ Range\ [%s\ ~\ %s\ \:\ %s]\ cannot\ be\ connected\ to\ DHCP\ Interface\ %s. = 

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:96
# args: 
PXE\ Server\ already\ created. = 

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:40
# args: 
the\ start\ date\ must\ be\ greater\ than\ the\ end\ date = \u5F00\u59CB\u65F6\u95F4\u5FC5\u987B\u65E9\u4E8E\u7ED3\u675F\u65F6\u95F4

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:88
# args: 
the\ minimal\ resource\ unit\ is\ megabyte,\ cannot\ be\ byte = \u8D44\u6E90\u7684\u6700\u5C0F\u5355\u4F4D\u5FC5\u987B\u4E3AMB\uFF0C\u800C\u4E0D\u662FB

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:96
# args: 
price\ must\ be\ 0\ and\ 9999.99 = \u4EF7\u683C\u5FC5\u987B\u57280\u548C9999.99\u4E4B\u95F4

# at: src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java:97
# args: spec.getRequiredBackupStorageUuid(),bsType
the\ backup\ storage[uuid\:%s,\ type\:%s]\ requires\ bound\ primary\ storage,\ however,\ the\ primary\ storage\ has\ not\ been\ added = \u65E0\u6CD5\u627E\u5230\u8DDF\u5907\u4EFD\u5B58\u50A8[uuid:{0}, type:{1}]\u914D\u5BF9\u7684\u4E3B\u5B58\u50A8\u3002\u4E00\u4E9B\u5907\u4EFD\u5B58\u50A8\u5FC5\u987B\u8DDF\u914D\u5BF9\u7684\u4E3B\u5B58\u50A8\u5171\u540C\u4F7F\u7528\uFF0C\u4F8B\u5982Ceph\u5907\u4EFD\u5B58\u50A8\u53EA\u80FD\u642D\u914DCeph\u4E3B\u5B58\u50A8\u4F7F\u7528\u3002\u8BF7\u68C0\u67E5\u4F60\u4E3B\u5B58\u50A8\u7684\u8BBE\u7F6E\u3002

# at: src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java:90
# args: spec.getImage().getUuid(),spec.getRequiredBackupStorageUuid(),type,psUuids
The\ image[uuid\:%s]\ is\ on\ the\ backup\ storage[uuid\:%s,\ type\:%s]\ that\ requires\ to\ work\ with\ primary\ storage[uuids\:%s],however,\ no\ host\ found\ suitable\ to\ work\ with\ those\ primary\ storage = \u955C\u50CF[uuid:{0}]\u6240\u5728\u7684\u5907\u4EFD\u5B58\u50A8[uuid:{1}, type:{2}]\u5FC5\u987B\u8DDF\u4E3B\u5B58\u50A8[uuid:{3}]\u914D\u5BF9\u4F7F\u7528\uFF0C\u4F46\u65E0\u6CD5\u627E\u5230\u53EF\u4EE5\u8DDF\u6EE1\u8DB3\u6761\u4EF6\u5E76\u53EF\u4EE5\u8BBF\u95EE\u8BE5\u4E3B\u5B58\u50A8\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java:80
# args: spec.getImage().getUuid(),spec.getImage().getType(),spec.getRequiredBackupStorageUuid(),type,possiblePrimaryStorageTypes
The\ image[uuid\:%s,\ name\:%s]\ is\ on\ the\ backup\ storage[uuid\:%s,\ type\:%s]\ that\ requires\ to\ work\ with\ primary\ storage[types\:%s],however,\ no\ host\ found\ suitable\ to\ work\ with\ those\ primary\ storage = \u955C\u50CF[uuid:{0},name:{1}]\u6240\u5728\u7684\u5907\u4EFD\u5B58\u50A8[uuid:{2}, type:{3}]\u5FC5\u987B\u8DDF\u4E3B\u5B58\u50A8[uuid:{4}]\u4E00\u8D77\u4F7F\u7528\uFF0C\u4F46\u65E0\u6CD5\u627E\u5230\u53EF\u4EE5\u8DDF\u6EE1\u8DB3\u6761\u4EF6\u5E76\u53EF\u4EE5\u8BBF\u95EE\u8BE5\u4E3B\u5B58\u50A8\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/allocator/HostAllocatorApiInterceptor.java:56
# args: 
either\ volumeUuid\ or\ volumeSnapshotUuid\ must\ be\ set = \u76D8uuid\u6216\u8005\u5FEB\u7167uuid\u5FC5\u987B\u88AB\u8BBE\u7F6E

# at: src/main/java/org/zstack/compute/allocator/HostAllocatorApiInterceptor.java:75
# args: 
zoneUuids,\ clusterUuids,\ hostUuids\ must\ at\ least\ have\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = \u533A\u57DFuuid\uFF0C\u96C6\u7FA4uuid,\u7269\u7406\u673Auuid\u5FC5\u987B\u6709\u4E00\u4E2A\u4E0D\u4E3A\u7A7A\uFF0C\u6216\u8005\u5168\u90E8\u90FD\u586B\u5199

# at: src/main/java/org/zstack/compute/allocator/ImageBackupStorageAllocatorFlow.java:85
# args: spec.getImage().getUuid(),spec.getImage().getName()
the\ image[uuid\:%s,\ name\:%s]\ is\ deleted\ on\ all\ backup\ storage = \u955C\u50CF[uuid:{0}, name:{1}]\u5DF2\u7ECF\u4ECE\u6240\u6709\u5907\u4EFD\u5B58\u50A8\u4E0A\u5220\u9664\uFF0C\u65E0\u6CD5\u6267\u884C\u76F8\u5E94\u64CD\u4F5C

# at: src/main/java/org/zstack/compute/host/HostApiInterceptor.java:84
# args: msg.getManagementIp()
there\ has\ been\ a\ host\ having\ managementIp[%s] = \u5DF2\u7ECF\u5B58\u5728\u4E00\u4E2A\u7BA1\u7406IP\u662F[{0}]\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/host/HostApiInterceptor.java:81
# args: msg.getHostUuid()
can\ not\ update\ host[uuid\:%s]which\ is\ connecting\ or\ creating,\ please\ wait. = \u65E0\u6CD5\u66F4\u65B0\u7269\u7406\u673A[uuid:{0}]\u7684\u4FE1\u606F\uFF0C\u5904\u4E8E\u8FDE\u63A5\u6216\u521B\u5EFA\u72B6\u6001\u4E2D\uFF0C\u8BF7\u7B49\u5F85\u3002

# at: src/main/java/org/zstack/compute/host/HostApiInterceptor.java:78
# args: msg.getManagementIp()
managementIp[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = \u7BA1\u7406IP[{0}]\u65E2\u4E0D\u662F\u6709\u6548\u7684IPv4\u5730\u5740\u4E5F\u4E0D\u662F\u6709\u6548\u7684\u7269\u7406\u673A\u540D

# at: src/main/java/org/zstack/compute/host/HostApiInterceptor.java:94
# args: msg.getHostUuid()
can\ not\ maintain\ host[uuid\:%s]which\ is\ connecting = \u4E0D\u80FD\u5BF9Connecting\u72B6\u6001\u7684\u7269\u7406\u673A[uuid:{0}]\u8FDB\u884C\u7EF4\u62A4\u64CD\u4F5C

# at: src/main/java/org/zstack/compute/host/HostBase.java:104
# args: self.getUuid(),self.getName(),self.getState()
host[uuid\:%s,\ name\:%s]\ is\ in\ state[%s],\ cannot\ perform\ required\ operation = \u7269\u7406\u673A[uuid:{0}, name:{1}]\u5904\u4E8E\u72B6\u6001[{2}]\u4E2D\uFF0C\u4E0D\u80FD\u5904\u7406\u8BE5\u8BF7\u6C42

# at: src/main/java/org/zstack/compute/host/HostBase.java:455
# args: 
cannot\ change\ the\ state\ of\ Disconnected\ host\ into\ Maintenance\  = \u65E0\u6CD5\u5C06Disconnected\u7684\u7269\u7406\u673A\u8F6C\u4E3A\u7EF4\u62A4\u6A21\u5F0F\u3002

# at: src/main/java/org/zstack/compute/host/HostBase.java:566
# args: 
host\ is\ connecting = \u7269\u7406\u673A\u6B63\u5728\u8FDE\u63A5

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:275
# args: vo.getName(),vo.getManagementIp()
after\ connecting,\ host[name\:%s,\ ip\:%s]\ returns\ a\ null\ os\ version = \u5728\u8FDE\u63A5\u64CD\u4F5C\u540E\uFF0C\u7269\u7406\u673A[name:{0}, ip:{1}]\u6CA1\u6709\u8FD4\u56DE\u64CD\u4F5C\u7CFB\u7EDF\u7248\u672C

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:314
# args: vo.getClusterUuid(),currentVersion,vo.getName(),vo.getManagementIp(),mineVersion
cluster[uuid\:%s]\ already\ has\ host\ with\ os\ version[%s],\ but\ new\ added\ host[name\:%s\ ip\:%s]\ has\ host\ os\ version[%s] = \u96C6\u7FA4[uuid:{0}]\u4E2D\u7269\u7406\u673A\u4F7F\u7528\u7684\u64CD\u4F5C\u7CFB\u7EDF\u7248\u672C\u662F[{1}]\uFF0C\u4F46\u662F\u65B0\u7684\u7269\u7406\u673A[name:{2} ip:{3}]\u7684\u64CD\u4F5C\u7CFB\u7EDF\u7248\u672C\u662F [{4}]

# at: src/main/java/org/zstack/compute/vm/AbstractVmInstance.java:149
# args: currentState,msg.getMessageName(),checker.getStatesForOperation(msg.getMessageName())
current\ vm\ instance\ state[%s]\ doesn't\ allow\ to\ proceed\ message[%s],\ allowed\ states\ are\ %s = \u865A\u62DF\u673A\u72B6\u6001[{0}]\u4E0D\u5141\u8BB8\u652F\u6301\u7684\u6D88\u606F[{1}]\uFF0C\u5141\u8BB8\u7684\u72B6\u6001\u662F{2}

# at: src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java:50
# args: 
not\ dest\ host\ found\ in\ db,\ can't\ send\ change\ password\ cmd\ to\ the\ host! = \u6CA1\u6709\u5728\u7269\u7406\u673A\u4E0A\u53D1\u73B0\u6570\u636E\u5E93\uFF0C\u4E0D\u80FD\u53D1\u9001\u66F4\u6539\u5BC6\u7801\u7684\u6307\u4EE4\u5230\u8FD9\u4E2A\u7269\u7406\u673A\u4E0A

# at: src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java:51
# args: 
not\ system\ tag\ found\ on\ vm,\ vm\ must\ have\ the\ following\ system\ tag\:\ qemuga,\ if\ you\ installed\ qemu-ga\ yourself,\ please\ use\ CreateSystemTag\ first. = \u6CA1\u6709\u53D1\u73B0\u7CFB\u7EDF\u6807\u7B7E\u5728\u4E91\u4E3B\u673A\u4E0A\uFF0C\u4E91\u4E3B\u673A\u5FC5\u987B\u6709\u7CFB\u7EDF\u6807\u7B7E\uFF1Aqemuga\u3002\u5982\u679C\u4F60\u5DF2\u7ECF\u5B89\u88C5\u4E86qemu-ga\uFF0C\u8BF7\u5148\u4F7F\u7528 CreateSystemTag

# at: src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java:54
# args: 
not\ account\ preference\ found,\ \ send\ change\ password\ cmd\ to\ the\ host! = \u6CA1\u6709\u4F18\u5148\u7EA7\u8D26\u6237\u53BB\u53D1\u9001\u6539\u53D8\u5BC6\u7801\u7684\u6307\u4EE4\u5230\u7269\u7406\u673A

# at: src/main/java/org/zstack/compute/vm/DeleteVmGC.java:43
# args: hostUuid
the\ host[uuid\:%s]\ is\ not\ connected = \u7269\u7406\u673A[uuid:{0}]\u4E0D\u662FConnected\u72B6\u6001

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:337
# args: 
direction\ must\ be\ set\ to\ in\ or\ out = \u65B9\u6CD5\u5FC5\u987B\u8BBE\u7F6Ein\u6216\u8005out

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:498
# args: amsg.getVmInstanceUuid()
not\ dest\ host\ found\ in\ db\ by\ uuid\:\ %s,\ can't\ send\ change\ password\ cmd\ to\ the\ host! = \u6CA1\u6709\u5728\u7269\u7406\u673A{0}\u4E0A\u53D1\u73B0\u6570\u636E\u5E93\uFF0C\u4E0D\u80FD\u53D1\u9001\u66F4\u6539\u5BC6\u7801\u7684\u6307\u4EE4\u5230\u8FD9\u4E2A\u7269\u7406\u673A\u4E0A

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:519
# args: 
state\ is\ not\ correct\ while\ change\ password. = \u8BE5\u72B6\u6001\u4E0D\u652F\u6301\u4FEE\u6539\u5BC6\u7801

# at: src/main/java/org/zstack/compute/vm/VmAllocatePrimaryStorageForAttachingDiskFlow.java:44
# args: spec.getVmInventory().getUuid()
\ Can\ not\ find\ the\ vm's\ host,\ please\ start\ the\ vm[%s],\ then\ mount\ the\ disk = 

# at: src/main/java/org/zstack/compute/vm/VmCascadeExtension.java:391
# args: msg.getVmNicUuid(),msg.getVmInstanceUuid(),r.getError()
unable\ to\ detach\ a\ nic[uuid\:%s]\ from\ the\ vm[uuid\:%s],\ %s = \u65E0\u6CD5\u4ECE\u4E91\u4E3B\u673A[uuid:{1}]\u5378\u8F7D\u4E00\u4E2A\u7F51\u5361[uuid:{0}]\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{2}

# at: src/main/java/org/zstack/compute/vm/VmDownloadIsoFlow.java:64
# args: iso.getUuid(),host.getZoneUuid(),spec.getVmInventory().getName(),spec.getVmInventory().getUuid()
cannot\ find\ the\ iso[uuid\:%s]\ in\ any\ connected\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s].\ check\ below\:\
1.\ if\ the\ backup\ storage\ is\ attached\ to\ the\ zone\ where\ the\ VM[name\:\ %s,\ uuid\:%s]\ is\ running\
2.\ if\ the\ backup\ storage\ is\ in\ connected\ status,\ if\ not,\ try\ reconnecting\ it = \u4E0D\u80FD\u53D1\u73B0iso[uuid:{0}]\u5728\u4EFB\u4F55\u5DF2\u7ECF\u6302\u8F7D\u5230\u96C6\u7FA4[uuid:{1}]\u4E0A\u7684\u5E76\u4E14\u5904\u4E8EConnected\u72B6\u6001\u5907\u4EFD\u7684\u5907\u4EFD\u5B58\u50A8\u3002\u53EF\u4EE5\u8FDB\u884C\u5BF9\u4EE5\u4E0B\u9009\u9879\u7684\u68C0\u67E5\uFF1A1. \u5907\u4EFD\u5B58\u50A8\u662F\u5426\u5DF2\u7ECF\u6302\u8F7D\u5230\u533A\u57DF\u4E2D\u7684\u4EFB\u4F55\u8FD0\u884C\u72B6\u6001\u7684\u4E91\u4E3B\u673A[name: {2}, uuid:{3}]\u4E0A\uFF1B2. \u5982\u679C\u5907\u4EFD\u5B58\u50A8\u4E0D\u662F\u5904\u4E8E\u8FDE\u63A5\u72B6\u6001\uFF0C\u8BF7\u5C1D\u8BD5\u91CD\u8FDE

# at: src/main/java/org/zstack/compute/vm/VmImageSelectBackupStorageFlow.java:85
# args: imageUuid,spec.getVmInventory().getName(),spec.getVmInventory().getUuid()
cannot\ find\ the\ image[uuid\:%s]\ in\ any\ connected\ backup\ storage.\ check\ below\:\
1.\ if\ the\ backup\ storage\ is\ attached\ to\ the\ zone\ where\ the\ VM[name\:\ %s,\ uuid\:%s]\ is\ in\
2.\ if\ the\ backup\ storage\ is\ in\ connected\ status,\ if\ not,\ try\ reconnecting\ it = \u4E0D\u80FD\u53D1\u73B0\u955C\u50CF[uuid:{0}]\u5728\u4EFB\u4F55\u5904\u4E8EConnected\u72B6\u6001\u5907\u4EFD\u7684\u5907\u4EFD\u5B58\u50A8\u3002\u53EF\u4EE5\u8FDB\u884C\u5BF9\u4EE5\u4E0B\u9009\u9879\u7684\u68C0\u67E5\uFF1A1. \u5907\u4EFD\u5B58\u50A8\u662F\u5426\u5DF2\u7ECF\u8FC7\u8F7D\u5230\u533A\u57DF\u4E2D\u7684\u4E91\u4E3B\u673A[name: {1}, uuid:{2}]\u4E2D\uFF1B2. \u5982\u679C\u5907\u4EFD\u5B58\u50A8\u4E0D\u662F\u5904\u4E8E\u8FDE\u63A5\u72B6\u6001\uFF0C\u8BF7\u5C1D\u8BD5\u91CD\u8FDE

# at: src/main/java/org/zstack/compute/vm/VmImageSelectBackupStorageFlow.java:79
# args: imageUuid,spec.getVmInventory().getZoneUuid(),spec.getVmInventory().getName(),spec.getVmInventory().getUuid()
cannot\ find\ the\ image[uuid\:%s]\ in\ any\ connected\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s].\ check\ below\:\
1.\ if\ the\ backup\ storage\ is\ attached\ to\ the\ zone\ where\ the\ VM[name\:\ %s,\ uuid\:%s]\ is\ in\
2.\ if\ the\ backup\ storage\ is\ in\ connected\ status,\ if\ not,\ try\ reconnecting\ it = \u4E0D\u80FD\u53D1\u73B0\u955C\u50CF[uuid:{0}]\u5728\u4EFB\u4F55\u5DF2\u7ECF\u6302\u8F7D\u5230\u96C6\u7FA4[uuid:{1}]\u4E0A\u7684\u5E76\u4E14\u5904\u4E8EConnected\u72B6\u6001\u5907\u4EFD\u7684\u5907\u4EFD\u5B58\u50A8\u3002\u53EF\u4EE5\u8FDB\u884C\u5BF9\u4EE5\u4E0B\u9009\u9879\u7684\u68C0\u67E5\uFF1A1. \u5907\u4EFD\u5B58\u50A8\u662F\u5426\u5DF2\u7ECF\u8FC7\u8F7D\u5230\u533A\u57DF\u4E2D\u7684\u4E91\u4E3B\u673A[name: {2}, uuid:{3}]\u4E2D\uFF1B2. \u5982\u679C\u5907\u4EFD\u5B58\u50A8\u4E0D\u662F\u5904\u4E8EConnected\u72B6\u6001\uFF0C\u8BF7\u5C1D\u8BD5\u91CD\u8FDE

# at: src/main/java/org/zstack/compute/vm/VmImageSelectBackupStorageFlow.java:107
# args: zoneUuid,isoImageUuid
no\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s]\ contains\ the\ ISO[uuid\:%s] = \u6CA1\u6709\u5907\u4EFD\u5B58\u50A8\u6302\u8F7D\u5230\u533A\u57DF[uuid:{0}]\u5305\u542B\u7740ISO[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:118
# args: msg.getVmInstanceUuid(),msg.getHostUuid()
the\ vm[uuid\:%s]\ is\ already\ on\ host[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u5DF2\u7ECF\u8FD0\u884C\u4E8E\u7269\u7406\u673A[uuid:{1}]\u4E0A\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:172
# args: 
the\ VM\ cannot\ do\ online\ cpu/memory\ update\ because\ it\ is\ not\ of\ NUMA\ architecture.\ Please\ stop\ the\ VM\ then\ do\ the\ cpu/memory\ update\ again = \u4E91\u4E3B\u673A\u65E0\u6CD5\u6267\u884C\u5728\u7EBF\u914D\u7F6E\u5347\u7EA7\uFF0C\u56E0\u4E3A\u4E0D\u662FNUMA\u67B6\u6784\u3002\u8BF7\u5173\u95ED\u8BE5\u4E91\u4E3B\u673A\u518D\u5C1D\u8BD5\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:178
# args: vo.getUuid(),vo.getState(),StringUtils.join(list(VmInstanceState.Running, VmInstanceState.Stopped), ",")
The\ state\ of\ vm[uuid\:%s]\ is\ %s.\ Only\ these\ state[%s]\ is\ allowed\ to\ update\ cpu\ or\ memory. = \u4E91\u4E3B\u673A[uuid:{0}]\u7684\u72B6\u6001\u4E3A{1}\u3002\u53EA\u6709\u8FD9\u4E9B\u72B6\u6001[{2}]\u5141\u8BB8\u5728\u7EBF\u5347\u7EA7\u914D\u7F6E\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:150
# args: vo.getUuid()
can't\ decrease\ capacity\ when\ vm[uuid\:%s]\ is\ running = \u65E0\u6CD5\u5728\u4E91\u4E3B\u673A[uuid:{1}]\u8FD0\u884C\u65F6\u51CF\u5C11\u5BB9\u91CF\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:189
# args: vo.getUuid()
can't\ decrease\ cpu\ of\ vm[uuid\:%s]\ when\ it\ is\ running = \u65E0\u6CD5\u5728\u4E91\u4E3B\u673A[uuid:{1}]\u8FD0\u884C\u65F6\u51CF\u5C11CPU\u6570\u76EE\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:195
# args: vo.getUuid()
can't\ decrease\ memory\ size\ of\ vm[uuid\:%s]\ when\ it\ is\ running = \u65E0\u6CD5\u5728\u4E91\u4E3B\u673A[uuid:{1}]\u8FD0\u884C\u65F6\u51CF\u5C11\u5BB9\u91CF\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:136
# args: 
either\ l3NetworkUuids\ or\ imageUuid\ must\ be\ set = L3\u7F51\u7EDC\u7684uuid\u4EEC\u6216\u8005\u955C\u50CF\u7684uuid\u5FC5\u987B\u88AB\u8BBE\u7F6E

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:218
# args: msg.getVmInstanceUuid()
the\ VM[uuid\:%s]\ volume\ stored\ location\ primary\ storage\ is\ in\ a\ state\ of\ maintenance = 

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:187
# args: msg.getIp()
%s\ is\ not\ a\ valid\ IPv4\ address = {0}\u4E0D\u662F\u6709\u6548\u7684IPv4\u5730\u5740

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:204
# args: msg.getVmInstanceUuid(),msg.getL3NetworkUuid()
the\ VM[uuid\:%s]\ has\ no\ nic\ on\ the\ L3\ network[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u6BDB\u533B\u751Fcamile

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:215
# args: o,msg.getBootOrder()
invalid\ boot\ device[%s]\ in\ boot\ order%s = \u5728\u542F\u52A8\u5217\u8868{1}\u4E2D\u7684\u8BBE\u5907[{0}]\u542F\u52A8\u5931\u8D25

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:231
# args: msg.getVmInstanceUuid(),isoUuid
VM[uuid\:%s]\ already\ has\ an\ ISO[uuid\:%s]\ attached = \u4E91\u4E3B\u673A[uuid:{0}]\u5DF2\u7ECF\u6302\u8F7D\u4E86ISO[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:307
# args: msg.getVmInstanceUuid(),state
unable\ to\ attach\ a\ L3\ network.\ The\ vm[uuid\:\ %s]\ is\ not\ Running\ or\ Stopped;\ the\ current\ state\ is\ %s = \u65E0\u6CD5\u6302\u8F7DL3\u7F51\u7EDC\u3002\u4E91\u4E3B\u673A[uuid: {0}]\u65E2\u4E0D\u5904\u4E8ERunning\u4E5F\u4E0D\u5904\u4E8EStopped\u72B6\u6001\u4E2D\uFF0C\u5F53\u524D\u72B6\u6001\u4E3A{1}\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:255
# args: msg.getL3NetworkUuid(),msg.getVmInstanceUuid()
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = \u4E0D\u80FD\u6302\u8F7DL3\u7F51\u7EDC\uFF0Cl3\u7F51\u7EDC[uuid:{0}]\u5DF2\u7ECF\u6302\u8F7D\u5230\u4E91\u4E3B\u673A[uuid: {1}]\u4E0A\u4E86

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:266
# args: msg.getL3NetworkUuid()
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ disabled = \u4E0D\u80FD\u6302\u8F7DL3\u7F51\u7EDC\uFF0C\u56E0\u4E3A\u8BE5L3\u7F51\u7EDC[uuid:{0}]\u5904\u4E8E\u672A\u542F\u52A8\u72B6\u6001

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:243
# args: type
unable\ to\ attach\ a\ L3\ network.\ The\ vm[uuid\:\ %s]\ is\ not\ a\ user\ vm = \u4E0D\u80FD\u6302\u8F7DL3\u7F51\u7EDC\uFF0C\u4E91\u4E3B\u673A[uuid: {0}]\u4E0D\u662F\u7528\u6237\u865A\u62DF\u673A

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:269
# args: msg.getL3NetworkUuid()
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ a\ system\ network = \u4E0D\u80FD\u6302\u8F7DL3\u7F51\u7EDC\uFF0C\u8BE5L3\u7F51\u7EDC[uuid:{0}] \u662F\u7CFB\u7EDF\u7F51\u7EDC

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:279
# args: msg.getStaticIp(),msg.getL3NetworkUuid()
the\ static\ IP[%s]\ is\ not\ in\ any\ IP\ range\ of\ the\ L3\ network[uuid\:%s] = \u8BE5\u9759\u6001IP[{0}]\u4E0D\u5728L3\u7F51\u7EDC[uuid:{1}]\u7684\u4EFB\u4F55IP\u6BB5

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:295
# args: msg.getStaticIp(),msg.getL3NetworkUuid()
the\ static\ IP[%s]\ has\ been\ occupied\ on\ the\ L3\ network[uuid\:%s] = \u8BE5\u9759\u6001IP[{0}]\u5DF2\u7ECF\u5B58\u5728\u5728L3\u7F51\u7EDC[uuid:{1}]\u4E2D

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:315
# args: msg.getVmInstanceUuid(),state
unable\ to\ detach\ a\ L3\ network.\ The\ vm[uuid\:\ %s]\ is\ not\ Running\ or\ Stopped;\ the\ current\ state\ is\ %s = \u4E0D\u80FD\u6302\u8F7DL3\u7F51\u7EDC\uFF0C\u4E91\u4E3B\u673A[uuid: {0}]\u4E0D\u662F\u8FD0\u884C\u72B6\u6001\u6216\u8005\u6682\u505C\u72B6\u6001\uFF0C\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:339
# args: msg.getVmInstanceUuid(),state
vm[uuid\:%s]\ can\ only\ attach\ volume\ when\ state\ is\ Running\ or\ Stopped,\ current\ state\ is\ %s = \u4E91\u4E3B\u673A[uuid:{0}]\u6302\u8F7D\u76D8\u65F6\u72B6\u6001\u53EA\u80FD\u662F\u8FD0\u884C\u6216\u8005\u6682\u505C\u72B6\u6001\uFF0C\u800C\u73B0\u5728\u7684\u72B6\u6001\u662F{1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:349
# args: msg.getInstanceOfferingUuid()
instance\ offering[uuid\:%s]\ is\ Disabled,\ can't\ create\ vm\ from\ it = \u8BA1\u7B97\u89C4\u683C[uuid:{0}]\u6CA1\u6709\u88AB\u542F\u7528\uFF0C\u4E0D\u80FD\u6839\u636E\u8BE5\u89C4\u683C\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:377
# args: msg.getInstanceOfferingUuid(),itype
instance\ offering[uuid\:%s,\ type\:%s]\ is\ not\ UserVm\ type,\ can't\ create\ vm\ from\ it = 

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:358
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ Disabled,\ can't\ create\ vm\ from\ it = \u955C\u50CF[uuid:{0}]\u6CA1\u88AB\u542F\u7528\uFF0C\u4E0D\u80FD\u6839\u636E\u8BE5\u955C\u50CF\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:355
# args: msg.getImageUuid(),imgFormat
image[uuid\:%s]\ is\ of\ mediaType\:\ %s,\ only\ RootVolumeTemplate\ and\ ISO\ can\ be\ used\ to\ create\ vm = \u955C\u50CF[uuid:{0}] \u7C7B\u578B\u4E3A{1}\uFF0C\u8BE5\u955C\u50CF\u53EA\u80FD\u7528\u6765\u521B\u5EFA\u6839\u4E91\u76D8\u6216\u8005\u7528\u6765\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:359
# args: 
rootDiskOfferingUuid\ cannot\ be\ null\ when\ image\ mediaType\ is\ ISO = \u6839\u4E91\u76D8\u89C4\u683C\u4E0D\u80FD\u4E3A\u7A7A\u5728\u955C\u50CF\u7C7B\u578B\u4E3AISO\u65F6

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:364
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ system\ image,\ can't\ be\ used\ to\ create\ user\ vm = \u955C\u50CF[uuid:{0}] \u662F\u7CFB\u7EDF\u955C\u50CF\uFF0C\u4E0D\u80FD\u4F7F\u7528\u5B83\u521B\u5EFA\u7528\u6237\u865A\u62DF\u673A

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:398
# args: diskUuids
disk\ offerings[uuids\:%s]\ are\ Disabled,\ can\ not\ create\ vm\ from\ it = \u78C1\u76D8\u89C4\u683C[uuids:{0}]\u6CA1\u6709\u88AB\u542F\u7528\uFF0C\u4E0D\u80FD\u4F7F\u7528\u5B83\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:407
# args: duplicateElements.get(0)
Can't\ add\ same\ uuid\ in\ the\ l3Network,uuid\:\ %s = \u4E0D\u80FD\u6DFB\u52A0\u76F8\u540C\u7684uuid{0}\u5728L3\u7F51\u7EDC\u4E2D

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:417
# args: l3Uuid
l3Network[uuid\:%s]\ is\ Disabled,\ can\ not\ create\ vm\ on\ it = L3\u7F51\u7EDC[uuid:{0}]\u6CA1\u6709\u88AB\u542F\u7528\uFF0C\u4E0D\u80FD\u4ECE\u8FD9\u4E2AL3\u7F51\u7EDC\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:421
# args: l3Uuid
l3Network[uuid\:%s]\ is\ system\ network,\ can\ not\ create\ user\ vm\ on\ it = L3\u7F51\u7EDC[uuid:{0}]\u662F\u7CFB\u7EDF\u7F51\u7EDC\uFF0C\u4E0D\u80FD\u5728\u8FD9\u4E0A\u9762\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:439
# args: msg.getZoneUuid()
zone[uuid\:%s]\ is\ specified\ but\ it's\ Disabled,\ can\ not\ create\ vm\ from\ it = \u533A\u57DF[uuid:{0}]\u867D\u7136\u88AB\u6307\u5B9A\u4E86\u4F46\u662F\u5904\u4E8E\u672A\u542F\u7528\u72B6\u6001\uFF0C\u4E0D\u80FD\u4ECE\u8FD9\u4E0A\u9762\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:449
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ specified\ but\ it's\ Disabled,\ can\ not\ create\ vm\ from\ it = \u96C6\u7FA4[uuid:{0}]\u867D\u7136\u88AB\u6307\u5B9A\u4E86\u4F46\u662F\u5904\u4E8E\u672A\u542F\u7528\u72B6\u6001\uFF0C\u4E0D\u80FD\u4ECE\u8FD9\u4E0A\u9762\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:460
# args: msg.getHostUuid()
host[uuid\:%s]\ is\ specified\ but\ it's\ Disabled,\ can\ not\ create\ vm\ from\ it = \u7269\u7406\u673A[uuid:{0}]\u867D\u7136\u88AB\u6307\u5B9A\u4E86\u4F46\u662F\u5904\u4E8E\u672A\u542F\u7528\u72B6\u6001\uFF0C\u4E0D\u80FD\u4ECE\u8FD9\u4E0A\u9762\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:465
# args: msg.getHostUuid(),connectionState
host[uuid\:%s]\ is\ specified\ but\ it's\ connection\ status\ is\ %s,\ can\ not\ create\ vm\ from\ it = \u7269\u7406\u673A[uuid:{0}]\u867D\u7136\u88AB\u6307\u5B9A\u4E86\u4F46\u662F\u5B83\u7684\u8FDE\u63A5\u72B6\u6001\u662F{1}\uFF0C\u4E0D\u80FD\u4ECE\u8FD9\u4E0A\u9762\u521B\u5EFA\u4E91\u4E3B\u673A

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:464
# args: msg.getDefaultL3NetworkUuid(),msg.getL3NetworkUuids()
defaultL3NetworkUuid[uuid\:%s]\ is\ not\ in\ l3NetworkUuids%s = \u9ED8\u8BA4L3\u7F51\u7EDC\u7684uuid\u662F[uuid:{0}]\uFF0C\u4E0D\u5728L3\u7F51\u7EDCuuid\u4EEC\u4E2D{1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:460
# args: 
there\ are\ more\ than\ one\ L3\ network\ specified\ in\ l3NetworkUuids,\ but\ defaultL3NetworkUuid\ is\ null = \u5728L3\u7F51\u7EDCuuid\u4EEC\u4E2D\u6709\u5F88\u591AL3\u7F51\u7EDC\u88AB\u6307\u5B9A\u4E86\uFF0C\u4F46\u662F\u9ED8\u8BA4L3\u7F51\u7EDC\u7684uuid\u662F\u7A7A\u7684

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:482
# args: 
The\ console\ password\ cannot\ start\ with\ 'password'\ which\ may\ trigger\ a\ VNC\ security\ issue = \u63A7\u5236\u53F0\u5BC6\u7801\u4E0D\u80FD\u4EE5password\u5F00\u5934\uFF0C\u4F1A\u5BFC\u81F4\u4E00\u4E2AVNC\u5B89\u5168\u95EE\u9898\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:131
# args: self.getUuid(),hostUuid,reply.getError()
unable\ to\ check\ state\ of\ the\ vm[uuid\:%s]\ on\ the\ host[uuid\:%s],\ %s;put\ the\ VM\ into\ the\ Unknown\ state = \u65E0\u6CD5\u5728\u7269\u7406\u673A[uuid:{1}]\u4E0A\u68C0\u67E5\u4E91\u4E3B\u673A[uuid:{0}]\u7684\u72B6\u6001\uFF0C\u7F6E\u4E3AUnknown\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{2}\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:221
# args: vo.getUuid(),vo.getName()
vm[uuid\:%s,\ name\:%s]\ has\ been\ deleted = \u4E91\u4E3B\u673A[uuid:{0}, name:{1}]\u5DF2\u7ECF\u88AB\u5378\u8F7D\u4E86

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:529
# args: self.getUuid(),l3Uuid
the\ vm[uuid\:%s]\ has\ no\ nic\ on\ the\ L3\ network[uuid\:%s] = \u4E91\u4E3B\u673A[uuid:{0}] \u6CA1\u6709\u7F51\u5361\u5728L3\u7F51\u7EDC[uuid:{1}]\u4E0A

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:877
# args: 
the\ vm\ has\ been\ deleted = \u4E91\u4E3B\u673A\u5DF2\u7ECF\u88AB\u5378\u8F7D\u4E86

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:1043
# args: self.getUuid(),originalState,currentState,originalHostUuid,currentHostUuid,errCode
failed\ to\ handle\ abnormal\ lifecycle\ of\ the\ vm[uuid\:%s,\ original\ state\:\ %s,\ current\ state\:%s,original\ host\:\ %s,\ current\ host\:\ %s],\ %s = \u65E0\u6CD5\u63A7\u5236\u4E91\u4E3B\u673A[uuid:{0}, original state: {1}, current state:{2},original host: {3}, current host: {4}]\u7684\u5F02\u5E38\u751F\u547D\u5468\u671F\uFF0C\u539F\u56E0\uFF1A{5}\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:1214
# args: 
cannot\ get\ target\ migration\ host\ without\ any\ nics\ on\ vm = \u4E0D\u80FD\u5728\u4E91\u4E3B\u673A\u4E0A\u901A\u8FC7\u7F51\u5361\u83B7\u53D6\u76EE\u6807\u8FC1\u79FB\u7269\u7406\u673A\u5730\u5740

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:2869
# args: isoUuid,psUuid,self.getName(),self.getUuid()
the\ ISO[uuid\:%s]\ is\ on\ backup\ storage\ that\ is\ not\ compatible\ of\ the\ primary\ storage[uuid\:%s]\ where\ the\ VM[name\:%s,\ uuid\:%s]\ is\ on = ISO[uuid:{0}]\u5728\u5907\u4EFD\u5B58\u50A8\u4E0A\uFF0C\u8FD9\u4E2AISO\u4E0D\u80FD\u517C\u5BB9\u4E3B\u5B58\u50A8[uuid:{1}]\u5728\u4E91\u4E3B\u673A[name:{2}, uuid:{3}]\u4E0A

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:3121
# args: self.getUuid(),self.getState()
operation\ is\ not\ allowed\ to\ vm[uuid\:%s]\ which\ is\ in\ the\ state\ of\ state\:%s = \u4E91\u4E3B\u673A[uuid:{0}]\u5904\u4E8E{1}\u72B6\u6001\u65F6\u8BE5\u64CD\u4F5C\u4E0D\u88AB\u5141\u8BB8\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:3249
# args: self.getHostUuid(),cpuNum - oldCpuNum,struct.alignedMemory - oldMemorySize
host[uuid\:%s]\ capacity\ is\ not\ enough\ to\ offer\ cpu[%s],\ memory[%s\ bytes] = \u7269\u7406\u673A[uuid:{0}]\u65E0\u6CD5\u63D0\u4F9BCPU\uFF1A[{1}]\uFF0C\u5185\u5B58\uFF1A[{2} bytes]\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:3222
# args: memorySize,struct.alignedMemory
automatically\ align\ memory\ from\ %s\ to\ %s = \u81EA\u52A8\u5C06\u5185\u5B58\u4ECE{0}\u5BF9\u9F50\u5230{1}\u3002

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:3680
# args: self.getUuid()
unable\ to\ start\ the\ vm[uuid\:%s].\ It\ doesn't\ have\ any\ nic,\ please\ attach\ a\ nic\ and\ try\ again = \u65E0\u6CD5\u542F\u52A8\u865A\u62DF\u673A[uuid:{0}]\u3002\u8BE5\u865A\u62DF\u673A\u6CA1\u6709\u7F51\u5361\uFF0C\u8BF7\u6DFB\u52A0\u7F51\u5361\u540E\u518D\u8BD5

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:41
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceStartNewCreatedVmExtensionPoint[%s]\ refuses\ to\ create\ vm[uuid\:%s]\ because\ %s = VmInstanceStartNewCreatedVmExtensionPoint[{0}] \u56E0\u4E3A{2} \u62D2\u7EDD\u521B\u5EFA\u865A\u62DF\u673A[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:83
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceStopVmExtensionPoint[%s]\ refuses\ to\ stop\ vm[uuid\:%s]\ because\ %s = VmInstanceStopVmExtensionPoint[{0}] \u56E0\u4E3A{2} \u62D2\u7EDD\u521B\u5EFA\u865A\u62DF\u673A[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:125
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceRebootExtensionPoint[%s]\ refuses\ to\ reboot\ vm[uuid\:%s]\ because\ %s = VmInstanceRebootExtensionPoint[{0}] \u56E0\u4E3A{2} \u62D2\u7EDD\u91CD\u542F\u865A\u62DF\u673A[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:167
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceDestroyVmExtensionPoint[%s]\ refuses\ to\ destroy\ vm[uuid\:%s]\ because\ %s = VmInstanceDestroyVmExtensionPoint[{0}] \u56E0\u4E3A{2} \u62D2\u7EDD\u5220\u9664\u865A\u62DF\u673A[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:208
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceStartExtensionPoint[%s]\ refuses\ to\ start\ vm[uuid\:%s]\ because\ %s = VmInstanceStartExtensionPoint[{0}] \u56E0\u4E3A{2} \u62D2\u7EDD\u542F\u52A8\u865A\u62DF\u673A[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:404
# args: msg.getImageUuid(),msg.getZoneUuid()
the\ image[uuid\:%s]\ is\ not\ on\ any\ backup\ storage\ that\ has\ been\ attached\ to\ the\ zone[uuid\:%s] = \u955C\u50CF[uuid:{0}]\u4E0D\u5728\u4EFB\u4F55\u52A0\u8F7D\u5230\u533A\u57DF[uuid:{1}]\u7684\u5907\u4EFD\u5B58\u50A8\u4E0A

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:467
# args: image.getName(),image.getUuid()
the\ image[name\:%s,\ uuid\:%s]\ is\ an\ ISO,\ rootDiskOfferingUuid\ must\ be\ set = \u955C\u50CF[name:{0}, uuid:{1}]\u662F\u4E00\u4E2AIOS, \u5FC5\u987B\u8BBE\u7F6E\u6839\u4E91\u76D8\u89C4\u683C

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:507
# args: image.getName(),image.getUuid()
zoneUuid\ must\ be\ set\ because\ the\ image[name\:%s,\ uuid\:%s]\ is\ on\ multiple\ backup\ storage = zoneUuid\u5FC5\u987B\u88AB\u8BBE\u7F6E\uFF0C\u56E0\u4E3Aimage[name:{0}, uuid:{1}]\u5728\u591A\u4E2A\u5907\u4EFD\u5B58\u50A8\u4E0A

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:877
# args: hostname,tag
hostname[%s]\ specified\ in\ system\ tag[%s]\ is\ not\ a\ valid\ domain\ name = \u5728\u7CFB\u7EDF\u6807\u7B7E[{1}]\u4E2D\u7279\u522B\u58F0\u660E\u7684\u4E3B\u673A\u540D[{0}]\u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u7684\u57DF\u540D

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:889
# args: hostnameCount
only\ one\ hostname\ system\ tag\ is\ allowed,\ but\ %s\ got = \u53EA\u5141\u8BB8\u901A\u8FC7\u7CFB\u7EDF\u6807\u7B7E\u8BBE\u7F6E\u4E00\u4E2A\u4E3B\u673A\u540D\uFF0C\u4F46\u662F\u5B9E\u9645\u4E0A\u6709{0}

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:906
# args: l3Uuid,sysTag
L3\ network[uuid\:%s]\ not\ found.\ Please\ correct\ your\ system\ tag[%s]\ of\ static\ IP = \u627E\u4E0D\u5230L3\u7F51\u7EDC[uuid:0]\u3002\u8BF7\u4FEE\u6539\u4F60\u5173\u4E8E\u9759\u6001IP\u7684\u7CFB\u7EDF\u6807\u7B7E

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:912
# args: ip,sysTag
%s\ is\ not\ a\ valid\ IPv4\ address.\ Please\ correct\ your\ system\ tag[%s]\ of\ static\ IP = {0}\u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u7684IPv4\u5730\u5740\u3002\u8BF7\u4FEE\u6539\u4F60\u5173\u4E8E\u9759\u6001IP\u7684\u7CFB\u7EDF\u6807\u7B7E

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:940
# args: ip,l3Uuid
IP[%s]\ is\ not\ available\ on\ the\ L3\ network[uuid\:%s] = \u5728L3\u7F51\u7EDC[uuid:{1}]\u4E2D\uFF0CIP[{0}]\u4E0D\u53EF\u8FBE

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:946
# args: tag,sameTag.getResourceUuid(),hostname,l3Uuid
conflict\ hostname\ in\ system\ tag[%s];\ there\ has\ been\ a\ VM[uuid\:%s]\ having\ hostname[%s]\ on\ L3\ network[uuid\:%s] = \u7CFB\u7EDF\u6807\u7B7E\u7684\u4E3B\u673A\u540D\u5B58\u5728\u51B2\u7A81[{0}]\uFF1B\u5DF2\u7ECF\u5B58\u5728\u4EE5\u4E00\u4E2A\u4E3B\u673A\u540D\u4E3A[{2}]\u7684VM[uuid:{1}]\u51FA\u73B0\u5728L3\u7F51\u7EDC[uuid:{3}]\u4E2D

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:977
# args: o,order
invalid\ boot\ device[%s]\ in\ boot\ order[%s] = \u5728\u5F15\u5BFC\u987A\u5E8F[{1}]\u4E2D\u5B58\u5728\u65E0\u6548\u7684\u5F15\u5BFC\u8BBE\u5907[{0}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1959
# args: ref.getResourceUuid()
the\ resource[uuid\:%s]\ is\ a\ ROOT\ volume,\ you\ cannot\ change\ its\ owner,\ instead,change\ the\ owner\ of\ the\ VM\ the\ root\ volume\ belongs\ to = \u5F53\u524D\u8D44\u6E90[uuid:{0}]\u662F\u4E00\u4E2A\u6839\u4E91\u76D8\uFF0C\u4F60\u4E0D\u80FD\u6539\u53D8\u5B83\u7684\u6240\u6709\u8005\uFF0C\u4F46\u662F\u4F60\u80FD\u591F\u4FEE\u6539\u5BF9\u5E94VM\u7684\u6240\u6709\u8005

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1921
# args: hostUuid,vmUuid
the\ host[uuid\:%s]\ becomes\ Disconnected,\ change\ the\ VM[uuid\:%s]'\ state\ to\ Unknown = \u7269\u7406\u673A[uuid:{0}]\u53D8\u4E3ADisconnected\uFF0C\u4E91\u4E3B\u673A[uuid:{1}]\u5C06\u72B6\u6001\u6539\u53D8\u4E3AUnknown

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1918
# args: hostUuid,vmUuid,reply.getError()
the\ host[uuid\:%s]\ becomes\ Disconnected,\ but\ the\ vm[uuid\:%s]\ fails\ to\ change\ it's\ state\ to\ Unknown,\ %s = \u7269\u7406\u673A[uuid:{0}]\u53D8\u4E3ADisconnected\uFF0C\u4F46\u4E91\u4E3B\u673A[uuid:{1}]\u5C06\u72B6\u6001\u6539\u53D8\u4E3AUnknown\u5931\u8D25\uFF0C\u539F\u56E0\uFF1A{2}

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:39
# args: 
either\ uuid\ or\ account\ or\ password\ must\ be\ set = uuid\u6216\u8005\u8D26\u6237\u6216\u8005\u5BC6\u7801\u9700\u8981\u88AB\u8BBE\u7F6E

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:47
# args: msg.getDirection()
direction\ must\ be\ set\ in\ (in,\ out),\ but\ was\ %s = \u65B9\u5411\u5FC5\u987B\u8BBE\u7F6E\u5728(in, out)\uFF0C\u4F46\u662F\u8F93\u5165\u7684\u662F{0}

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:53
# args: 
outboundBandwidth\ and\ inboundBandwidth\ must\ be\ set\ at\ lease\ one. = \u4E0A\u884C\u5E26\u5BBD\u548C\u4E0B\u884C\u5E26\u5BBD\u81F3\u5C11\u6709\u4E00\u4E2A\u9700\u8981\u88AB\u8BBE\u7F6E

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:62
# args: msg.getUuid()
nic\ id\:\ %s\ does\ not\ exist... = \u7F51\u5361id: {0}\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:76
# args: msg.getAllocatorStrategy()
unsupported\ host\ allocation\ strategy[%s] = \u4E0D\u88AB\u652F\u6301\u7684\u4E3B\u673A\u5206\u914D\u7B56\u7565[{0}]

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:80
# args: msg.getType()
unsupported\ instance\ offering\ type[%s] = \u4E0D\u88AB\u652F\u6301\u7684\u8BA1\u7B97\u89C4\u683C\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:84
# args: msg.getCpuNum()
cpu\ num[%s]\ is\ less\ than\ 1 = cpu\u6570\u91CF[{0}]\u5C11\u4E8E1

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:88
# args: msg.getMemorySize()
memory\ size[%s\ bytes]\ is\ less\ than\ 16M,\ no\ modern\ operating\ system\ is\ likely\ able\ to\ boot\ with\ such\ small\ memory\ size = \u5185\u5B58\u5927\u5C0F[{0} bytes]\u5C11\u4E8E16M\uFF0C\u6CA1\u6709\u4E00\u4E2A\u73B0\u4EE3\u64CD\u4F5C\u7CFB\u7EDF\u80FD\u591F\u5728\u5982\u6B64\u5C0F\u7684\u5185\u5B58\u91CC\u88AB\u5F15\u5BFC

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:94
# args: msg.getAllocationStrategy()
unsupported\ primary\ storage\ allocation\ strategy[%s] = \u4E0D\u88AB\u652F\u6301\u7684\u4E3B\u5B58\u50A8\u5206\u914D\u7B56\u7565[{0}]

# at: src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java:101
# args: 
the\ console\ agent\ is\ not\ connected;\ it's\ mostly\ like\ the\ management\ node\ just\ starts,\ please\ wait\ for\ the\ console\ agent\ connected. = \u63A7\u5236\u53F0\u4EE3\u7406\u5931\u8054\uFF0C\u5F88\u6709\u53EF\u80FD\u7BA1\u7406\u8282\u70B9\u521A\u521A\u542F\u52A8\uFF0C\u8BF7\u7B49\u5F85\u63A7\u5236\u53F0\u4EE3\u7406\u7684\u8FDE\u63A5

# at: src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java:122
# args: vm.getUuid()
cannot\ find\ host\ IP\ of\ the\ vm[uuid\:%s],\ is\ the\ vm\ running??? = \u65E0\u6CD5\u627E\u5230vm[uuid:{0}]\u7684\u4E3B\u673AIP\uFF0C\u8BF7\u786E\u8BA4\u8BE5vm\u662F\u5426\u5728\u8FD0\u884C\uFF1F\uFF1F\uFF1F

# at: src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java:245
# args: vm.getUuid(),vo.getTargetHostname(),vo.getTargetPort(),vo.getProxyHostname(),vo.getProxyPort(),errorCode.toString()
failed\ to\ delete\ a\ console\ proxy[vmUuid\:%s,\ host\ IP\:\ %s,\ host\ port\:\ %s,\ proxy\ IP\:\ %s,\ proxy\ port\:\ %s],\ %s = \u65E0\u6CD5\u5220\u9664\u63A7\u5236\u53F0\u4EE3\u7406[vmUuid:{0}, host IP: {1}, host port: {2}, proxy IP: {3}, proxy port: {4}]]\uFF0C\u539F\u56E0\uFF1A{5}

# at: src/main/java/org/zstack/console/ConsoleApiInterceptor.java:48
# args: msg.getVmInstanceUuid(),state
Console\ is\ only\ available\ when\ the\ VM[uuid\:%s]\ is\ Running,\ but\ the\ current\ state\ is\ %s = \u63A7\u5236\u53F0\u4EC5\u4EC5\u5F53VM[uuid:{0}]\u5904\u4E8E\u8FD0\u884C\u72B6\u6001\u624D\u53EF\u7528\uFF0C\u4F46\u662F\u73B0\u5728\u7684\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/console/ConsoleProxyAgentTracker.java:63
# args: resourceUuid,reply.getError()
unable\ to\ ping\ the\ console\ proxy\ agent[uuid\:%s],\ %s = \u65E0\u6CD5ping\u901A\u63A7\u5236\u53F0\u4EE3\u7406[uuid:{0}]\uFF0C\u539F\u56E0\uFF1A{1}

# at: src/main/java/org/zstack/console/ConsoleProxyAgentTracker.java:81
# args: resourceUuid
successfully\ reconnected\ the\ console\ proxy\ agent[uuid\:%s] = \u6210\u529F\u91CD\u8FDE\u63A7\u5236\u53F0\u4EE3\u7406[uuid:{0}]

# at: src/main/java/org/zstack/console/ConsoleProxyAgentTracker.java:78
# args: resourceUuid,reply.getError()
failed\ to\ reconnect\ console\ proxy\ agent[uuid\:%s],\ %s = \u65E0\u6CD5\u91CD\u8FDE\u63A7\u5236\u53F0\u4EE3\u7406[uuid:{0}]\uFF0C\u539F\u56E0\uFF1A{1}

# at: src/main/java/org/zstack/console/ConsoleProxyBase.java:140
# args: ret.getError()
unable\ to\ check\ console\ proxy\ availability,\ because\ %s = \u65E0\u6CD5\u68C0\u67E5\u63A7\u5236\u53F0\u4EE3\u7406\u662F\u5426\u53EF\u7528\uFF0C\u56E0\u4E3A{0}

# at: src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java:303
# args: uuid
invalid\ management\ node\ UUID[%s] = \u975E\u6CD5\u7684\u7BA1\u7406\u8282\u70B9UUID[{0}]

# at: src/main/java/org/zstack/core/ansible/SshFolderMd5Checker.java:107
# args: srcFolder,srcRes.getStdout(),srcRes.getStderr()
cannot\ check\ md5sum\ of\ files\ in\ the\ folder[%s].\nstdout\:%s\nstderr\:%s = \u65E0\u6CD5\u68C0\u67E5\u6587\u4EF6\u5939[{0}]\u4E0B\u6587\u4EF6\u7684md5sum.\nstdout:{1}\nstderr:{2}

# at: src/main/java/org/zstack/core/ansible/SshFolderMd5Checker.java:122
# args: dstFolder,hostname,dstRes.getStdout(),dstRes.getStderr()
cannot\ check\ md5sum\ of\ files\ in\ the\ folder[%s]\ on\ the\ host[ip\:%s].\nstdout\:%s\nstderr\:%s = \u65E0\u6CD5\u68C0\u67E5\u4E3B\u673A[ip:{1}]\u7684\u6587\u4EF6\u5939[{0}]\u4E0B\u6587\u4EF6\u7684md5sum.\nstdout:{2}\nstderr:{3}

# at: src/main/java/org/zstack/core/cloudbus/CloudBusImpl2.java:686
# args: errMsg
message\ is\ not\ in\ corrected\ JSON\ mediaType,\ %s = \u6D88\u606F\u662F\u9519\u8BEF\u7684JSON\u683C\u5F0F\uFF0C{0}

# at: src/main/java/org/zstack/core/cloudbus/EventFacadeImpl.java:67
# args: EventFacade.WEBHOOK_TYPE
for\ webhooks\ with\ type[%s],\ the\ field\ opaque\ cannot\ be\ null = \u5BF9\u4E8E[{0}]\u7C7B\u578B\u7684webhooks\uFF0Copaque\u5B57\u6BB5\u4E0D\u80FD\u4E3Anull\u3002

# at: src/main/java/org/zstack/core/config/GlobalConfigFacadeImpl.java:71
# args: msg.getCategory(),msg.getName()
unable\ to\ find\ GlobalConfig[category\:%s,\ name\:%s] = \u65E0\u6CD5\u627E\u5230\u5168\u5C40\u53D8\u91CF[category:{0}, name:{1}]

# at: src/main/java/org/zstack/core/config/GlobalConfigFacadeImpl.java:101
# args: msg.getCategory(),msg.getName()
Unable\ to\ find\ GlobalConfig[category\:\ %s,\ name\:\ %s] = \u65E0\u6CD5\u627E\u5230\u5168\u5C40\u53D8\u91CF[category:{0}, name:{1}]

# at: src/main/java/org/zstack/core/gc/GarbageCollectorManagerImpl.java:210
# args: vo.getUuid(),vo.getName()
cannot\ trigger\ a\ finished\ GC\ job[uuid\:%s,\ name\:%s] = \u65E0\u6CD5\u89E6\u53D1\u4E00\u4E2A\u5B8C\u6210\u8FC7\u7684GC\u4EFB\u52A1

# at: src/main/java/org/zstack/core/notification/NotificationManager.java:231
# args: newValue
%s\ is\ not\ a\ valid\ URL = {0}\u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u7684URL\u3002

# at: src/main/java/org/zstack/core/progress/ProgressApiInterceptor.java:37
# args: 
parameter\ apiId[%s]\ is\ not\ a\ valid\ uuid. = \u53C2\u6570apiId[{0}]\u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u7684UUID\u3002

# at: src/main/java/org/zstack/core/rest/RESTFacadeImpl.java:454
# args: url,rsp.getStatusCode(),rsp.getBody()
failed\ to\ post\ to\ %s,\ status\ code\:\ %s,\ response\ body\:\ %s = \u53D1\u9001\u6D88\u606F\u5230{0}\u5931\u8D25\uFF0C\u72B6\u6001\u7801: {1}, \u8FD4\u56DE: {2}

# at: src/main/java/org/zstack/core/rest/RESTFacadeImpl.java:495
# args: url,timeout
unable\ to\ echo\ %s\ in\ %sms = \u65E0\u6CD5\u5728{1}ms\u5185\u8FD4\u56DE{0}

# at: src/main/java/org/zstack/core/retry/Retry.java:73
# args: __name__,times,interval
an\ operation[%s]\ fails\ after\ retrying\ %s\ times\ with\ the\ interval\ %s\ seconds = \u5728\u91CD\u8BD5{1}\u6B21\u95F4\u9694\u65F6\u95F4\u4E3A{2}\u540E\u64CD\u4F5C[{0}]\u5931\u8D25

# at: src/main/java/org/zstack/core/salt/SaltRunner.java:297
# args: stateName,targetIp,retry
failed\ to\ run\ salt\ state[%s]\ on\ system[%s],\ failed\ after\ %s\ retries = \u91CD\u8BD5{2}\u6B21\u4E4B\u540E\uFF0C\u5728\u7CFB\u7EDF[{1}]\u4E0A\u8FD0\u884C\u52A0\u76D0\u72B6\u6001[{0}]\u5931\u8D25

# at: src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java:118
# args: 
cron\ must\ be\ set\ when\ use\ cron\ scheduler = \u5F53\u4F7F\u7528\u5B9A\u65F6\u5668\u4EFB\u52A1\u65F6\uFF0C\u5FC5\u987B\u8BBE\u7F6Ecron

# at: src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java:121
# args: 
cron\ task\ must\ follow\ format\ like\ this\ \:\ \"0\ 0/3\ 17-23\ *\ *\ ?\"\  = \u5B9A\u65F6\u5668\u4EFB\u52A1\u5FC5\u987B\u7B26\u5408\u4EE5\u4E0B\u683C\u5F0F\uFF1A\"0 0/3 17-23 * * ?\" 

# at: src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java:124
# args: 
cron\ scheduler\ only\ need\ to\ specify\ cron\ task = \u5B9A\u65F6\u8C03\u5EA6\u5668\uFF08Cron Scheduler\uFF09\u4EC5\u9700\u8981\u6307\u5B9A\u5B9A\u65F6\u4EFB\u52A1\uFF08Cron Task\uFF09\u3002

# at: src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java:108
# args: 
startTime\ out\ of\ range = \u5F00\u59CB\u65F6\u95F4\u8D85\u51FA\u8303\u56F4

# at: src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java:104
# args: 
startTime\ must\ be\ positive\ integer\ or\ 0 = \u5F00\u59CB\u65F6\u95F4\u5FC5\u987B\u662F\u6B63\u6574\u6570\u6216\u80050

# at: src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java:102
# args: 
startTime\ must\ be\ set\ when\ use\ simple\ scheduler = \u5FC5\u987B\u8BBE\u7F6E\u7B80\u5355\u5B9A\u65F6\u4EFB\u52A1\u7684\u5F00\u59CB\u65F6\u95F4

# at: src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java:120
# args: 
stopTime\ out\ of\ mysql\ timestamp\ range = \u5B9A\u65F6\u4EFB\u52A1\u505C\u6B62\u65F6\u95F4\u8D85\u51FAmysql\u7684timestamp\u7684\u8303\u56F4

# at: src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java:116
# args: 
duration\ time\ out\ of\ range = \u4EFB\u52A1\u9700\u8981\u7684\u65F6\u95F4\u8D85\u51FA\u8303\u56F4

# at: src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java:98
# args: 
interval\ must\ be\ positive\ integer = \u95F4\u9694\u65F6\u95F4\u5FC5\u987B\u662F\u6B63\u6574\u6570

# at: src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java:92
# args: 
interval\ must\ be\ set\ when\ use\ simple\ scheduler\ when\ repeat\ more\ than\ once = \u5F53\u7B80\u5355\u5B9A\u65F6\u4EFB\u52A1\u6267\u884C\u8D85\u8FC7\u4E00\u6B21\u65F6\uFF0C\u5FC5\u987B\u8BBE\u7F6E\u95F4\u9694\u65F6\u95F4

# at: src/main/java/org/zstack/core/scheduler/SchedulerApiInterceptor.java:95
# args: 
interval\ must\ be\ set\ when\ use\ simple\ scheduler\ when\ repeat\ forever = \u5F53\u7B80\u5355\u5B9A\u65F6\u4EFB\u52A1\u6C38\u8FDC\u91CD\u590D\u7684\u65F6\uFF0C\u5FC5\u987B\u8BBE\u7F6E\u95F4\u9694\u65F6\u95F4

# at: src/main/java/org/zstack/core/webhook/WebhookApiInterceptor.java:28
# args: url
Invalid\ url[%s] = \u65E0\u6548\u7684URL[{0}]\u3002

# at: src/main/java/org/zstack/ha/HaKvmHostSiblingChecker.java:153
# args: struct.getHostUuid(),struct.getHostIp(),errors
hosts\ failed\ to\ port\ scan\ the\ failure\ host[uuid\:%s,\ ip\:%s],\ errors\ are\ %s = \u626B\u63CF\u7269\u7406\u673A\u5931\u8D25[uuid:{0}, ip:{1}]\uFF0C\u9519\u8BEF\u539F\u56E0\u662F {2}

# at: src/main/java/org/zstack/ha/HaKvmWorker.java:63
# args: self.getName(),self.getUuid()
cannot\ find\ the\ host\ of\ the\ vm[name\:%s,\ uuid\:%s],\ hostUuid\ is\ null = \u627E\u4E0D\u5230vm[name:{0}, uuid:{1}]\u7684\u7269\u7406\u673A, \u56E0\u4E3AhostUuid\u4E3Anull

# at: src/main/java/org/zstack/ha/HaKvmWorker.java:70
# args: 
no\ HaHostChecker\ found,\ cannot\ do\ HA = \u627E\u4E0D\u5230HaHostChecker\uFF0C\u65E0\u6CD5\u6267\u884CHA

# at: src/main/java/org/zstack/ha/HaManagementNodeChecker.java:46
# args: 
the\ management\ node\ fails\ to\ scan\ the\ host = \u7BA1\u7406\u8282\u70B9\u626B\u63CF\u7269\u7406\u673A\u5931\u8D25\u3002

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:90
# args: newValue
the\ value[%s]\ is\ lesser\ than\ 0 = \u503C[{0}]\u6BD40\u5C0F

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:505
# args: vmInv.getUuid(),vmInv.getName(),reply.getError()
unable\ to\ HA\ start\ the\ VM[uuid\:%s,\ name\:%s],\ %s = \u65E0\u6CD5\u901A\u8FC7HA\u673A\u5236\u542F\u52A8VM[uuid:{0}, name:{1}], \u9519\u8BEF\u539F\u56E0\uFF1A{2}\u3002

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:516
# args: vm.getUuid(),vm.getName(),vm.getHypervisorType()
the\ VM[uuid\:%s,\ name\:%s]'s\ of\ hypervisor[%s]\ which\ dose\ not\ support\ HA = VM[uuid:{0}, name:{1}]\u7684\u4E3B\u673A\u76D1\u89C6\u7A0B\u5E8F\uFF08Hypervisor\uFF09[{2}]\u4E0D\u652F\u6301HA\u673A\u5236\u3002

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:552
# args: vm.getUuid(),vm.getName()
successfully\ HA\ started\ the\ VM[uuid\:%s,\ name\:%s] = \u901A\u8FC7HA\u673A\u5236\u542F\u52A8VM[uuid:{0}, name:{1}]\u6210\u529F\u3002

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:563
# args: vm.getUuid(),vm.getName(),errorCode,HaGlobalConfig.NEVER_STOP_VM_FAILURE_RETRY_DELAY.value(Long.class)
failed\ to\ HA\ start\ the\ VM[uuid\:%s,\ name\:%s],\ %s.A\ GC\ job\ will\ retry\ it\ in\ interval\ of\ %s\ seconds = \u901A\u8FC7HA\u673A\u5236\u542F\u52A8VM[uuid:{0}, name:{1}]\u5931\u8D25, \u9519\u8BEF\u539F\u56E0\uFF1A{2}\u3002\u4E00\u4E2A\u5B9A\u65F6\u4EFB\u52A1\uFF08GC job\uFF09\u5C06\u4F1A\u4EE5{3}\u79D2\u7684\u95F4\u9694\u91CD\u8BD5\u3002

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:744
# args: host.getUuid(),host.getName()
successfully\ cancelled\ the\ self-fencer\ on\ the\ host[uuid\:%s,\ name\:%s] = \u5728\u7269\u7406\u673A[uuid:{0}, name:{1}]\u4E0A\u53D6\u6D88\u4E3B\u673A\u4FDD\u62A4\u673A\u5236\uFF08Host Self-Fencer\uFF09\u6210\u529F\u3002

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:749
# args: host.getUuid(),host.getName(),errorCode
unable\ to\ cancel\ the\ self-fencer\ on\ the\ host[uuid\:%s,\ name\:%s],\ %s = \u5728\u7269\u7406\u673A[uuid:{0}, name:{1}]\u4E0A\u53D6\u6D88\u4E3B\u673A\u4FDD\u62A4\u673A\u5236\uFF08Host Self-Fencer\uFF09\u5931\u8D25\uFF0C\u9519\u8BEF\u539F\u56E0\uFF1A{2}\u3002

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:782
# args: host.getUuid(),host.getName()
successfully\ setup\ the\ self-fencer\ on\ the\ host[uuid\:%s,\ name\:%s] = \u5728\u7269\u7406\u673A[uuid:{0}, name:{1}]\u4E0A\u8BBE\u7F6E\u4E3B\u673A\u4FDD\u62A4\u673A\u5236\uFF08Host Self-Fencer\uFF09\u6210\u529F\u3002

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:788
# args: host.getUuid(),host.getName(),errorCode
failed\ to\ setup\ the\ self-fencer\ on\ the\ host[uuid\:%s,\ name\:%s],\ %s = \u5728\u7269\u7406\u673A[uuid:{0}, name:{1}]\u4E0A\u8BBE\u7F6E\u4E3B\u673A\u4FDD\u62A4\u673A\u5236\uFF08Host Self-Fencer\uFF09\u5931\u8D25\uFF0C\u9519\u8BEF\u539F\u56E0\uFF1A{2}\u3002

# at: src/main/java/org/zstack/ha/NeverStopVmGC.java:37
# args: this.getUuid(),HaGlobalConfig.NEVER_STOP_VM_NOTIFICATION_RETRY_TIMES.value(Integer.class).toString()
Never\ stop\ vm\ GC[uuid\:%s]\ executed\ over\ %s\ times,\ you\ can\ use\ DeleteGCJob\ to\ cancel\ it = 

# at: src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java:45
# args: 
There\ is\ a\ current\ key\ for\ aliyun\ already\ existed,\ please\ detach\ it\ first. = 

# at: src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java:41
# args: 
parameters\ [accountUuid]\ only\ can\ be\ used\ by\ admin\ user! = 

# at: src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java:60
# args: msg.getKey(),accountUuid
key\:\ [%s]\ already\ existed\ by\ accountUuid\:\ [%s] = 

# at: src/main/java/org/zstack/hybrid/backup/HybridBackupApiInterceptor.java:27
# args: msg.getClass().getSimpleName()
%s\ can\ only\ be\ called\ by\ admin\ account = 

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:87
# args: msg.getDestinationCidrBlock()
destination\ Cidr\ [%s]\ is\ existed,\ please\ check\ or\ delete\ it\ first = 

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:105
# args: msg.getNextHopType()
next\ hop\ type\ [%s]\ not\ supported\ now! = 

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:100
# args: msg.getvRouterType(),rivo.getvRouterType()
vRouterType[%s]\ must\ not\ equal\ to\ nextHopRouter\ type\:\ [%s] = 

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:90
# args: msg.getNextHopUuid()
no\ such\ ecs\ instance\:\ %s = 

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:129
# args: msg.getCidrBlock(),vpcCidr
vswitch's\ cidr\ [%s]\ not\ in\ the\ vpc's\ [%s] = 

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:136
# args: old.getUuid()
cidr\ is\ overlap\ by\ another\ vswitch\:\ %s = 

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:149
# args: msg.getCidrBlock()
invalid\ CidrBlock\:\ %s,\ which\ must\ subnet\ in\ '10.0.0.0/8',\ '172.16.0.0/12',\ '192.168.0.0/16' = 

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:101
# args: msg.getvRouterUuid()
no\ such\ virtual\ router\:\ %s = 

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:92
# args: msg.getvRouterUuid()
no\ such\ virtual\ border\ router\:\ %s = 

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:68
# args: msg.getLocalGatewayIp()
localGateway\ is\ not\ IPv4\:\ %s = 

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:71
# args: msg.getPeerGatewayIp()
peerGateway\ is\ not\ IPv4\:\ %s = 

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:74
# args: msg.getPeeringSubnetMask()
peerGateway\ is\ not\ subnet\ mask\:\ %s = 

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:78
# args: msg.getVlanId()
vlanId\ is\ not\ number\:\ %s = 

# at: src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:33
# args: 
localCidr\ and\ remoteCidr\ must\ be\ Cidr! = 

# at: src/main/java/org/zstack/identity/AccountBase.java:299
# args: group.getUuid(),msg.getAccountUuid()
the\ user\ group[uuid\:%s]\ does\ not\ belong\ to\ the\ account[uuid\:%s] = \u8FD9\u4E2A\u7528\u6237\u7EC4[uuid:{0}]\u4E0D\u5C5E\u4E8E\u5F53\u524D\u8D26\u6237[uuid:{1}]

# at: src/main/java/org/zstack/identity/AccountBase.java:401
# args: msg.getName(),msg.getIdentityUuid()
cannot\ find\ Quota[name\:\ %s]\ for\ the\ account[uuid\:\ %s] = \u65E0\u6CD5\u4E3A\u5F53\u524D\u8D26\u6237[uuid: {1}]\u627E\u5230Quota

# at: src/main/java/org/zstack/identity/AccountBase.java:460
# args: vo.getUuid(),ruuid
the\ account[uuid\:\ %s]\ doesn't\ have\ a\ resource[uuid\:\ %s] = \u8D26\u6237[uuid: {0}]\u6CA1\u6709\u8D44\u6E90[uuid: {1}]

# at: src/main/java/org/zstack/identity/AccountBase.java:497
# args: user.getUuid(),msg.getAccountUuid()
the\ user[uuid\:%s]\ does\ not\ belong\ to\ the\ account[uuid\:%s] = \u5F53\u524D\u7528\u6237[uuid:{0}]\u4E0D\u5C5E\u4E8E\u5F53\u524D\u8D26\u6237[uuid:{1}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:149
# args: resourceUuid
cannot\ find\ the\ resource[uuid\:%s];\ wrong\ resourceUuid\ or\ the\ resource\ is\ admin\ resource = \u65E0\u6CD5\u627E\u5230\u8D44\u6E90[uuid:{0}]\uFF1A\u9519\u8BEF\u7684\u8D44\u6E90uuid\u6216\u8005\u8D44\u6E90\u662F\u7BA1\u7406\u5458\u8D44\u6E90

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:339
# args: msg.getUserUuid()
the\ user\ specified\ by\ the\ userUuid[%s]\ does\ not\ belong\ to\ the\ current\ account,\ and\ the\ current\ account\ is\ not\ an\ admin\ account,\ so\ it\ has\ no\ policy\ to\ check\ the\ user'spermissions = \u5F53\u524D\u901A\u8FC7userUuid\u83B7\u5F97\u7684user\u4E0D\u5C5E\u4E8E\u5F53\u524D\u8D26\u6237\uFF0C\u800C\u4E14\u5F53\u524D\u8D26\u6237\u4E0D\u662F\u7BA1\u7406\u5458\u8D26\u6237\u3002

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:371
# args: apiName
%s\ is\ not\ an\ API = {0}\u4E0D\u662F\u4E00\u4E2AAPI

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:452
# args: msg.getAccountName()
account[%s]\ not\ found = \u6CA1\u6709\u627E\u5230\u8D26\u6237[{0}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1014
# args: accountUuid
cannot\ find\ the\ account[uuid\:%s] = \u627E\u4E0D\u5230\u8D26\u6237[uuid:{0}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1509
# args: 
accountName\ and\ accountUuid\ cannot\ both\ be\ null,\ you\ must\ specify\ at\ least\ one = \u8D26\u6237\u540D\u548C\u8D26\u6237Uuid\u4E0D\u80FD\u540C\u65F6\u4E3A\u7A7A\uFF0C\u60A8\u5FC5\u987B\u5B9A\u4E49\u81F3\u5C11\u4E00\u4E2A

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1520
# args: msg.getName(),msg.getAccountUuid()
unable\ to\ create\ a\ group.\ A\ group\ called\ %s\ is\ already\ under\ the\ account[uuid\:%s] = \u4E0D\u80FD\u521B\u5EFA\u7528\u6237\u7EC4\uFF0C\u7528\u6237\u7EC4\u201C{0}\u201D\u5DF2\u7ECF\u5728\u8D26\u6237\u201C{0}\u201D\u4E0B\u4E86

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1530
# args: msg.getName(),msg.getAccountUuid()
unable\ to\ create\ a\ user.\ A\ user\ called\ %s\ is\ already\ under\ the\ account[uuid\:%s] = \u4E0D\u80FD\u521B\u5EFA\u7528\u6237\uFF0C\u7528\u6237\u201C{0}\u201D\u5DF2\u7ECF\u5728\u8D26\u6237\u201C{0}\u201D\u4E0B\u4E86

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1539
# args: msg.getName()
unable\ to\ create\ an\ account.\ An\ account\ already\ called\ %s = \u4E0D\u80FD\u521B\u5EFA\u8D26\u6237\uFF0C\u201C{0}\u201D\u5DF2\u7ECF\u88AB\u4F7F\u7528

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1545
# args: 
unable\ to\ delete\ an\ account.\ The\ account\ is\ an\ admin\ account = \u4E0D\u80FD\u5220\u9664\u8D26\u6237\uFF0C\u8FD9\u4E2A\u8D26\u6237\u662F\u4E00\u4E2A\u7BA1\u7406\u8005\u8D26\u6237

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1553
# args: 
the\ current\ session\ is\ an\ account\ session.\ You\ need\ to\ specify\ the\ field\ 'uuid'\ of\ the\ user\ you\ want\ to\ update = \u5F53\u524D\u4F1A\u8BDD\u662F\u4E00\u4E2A\u8D26\u6237\u4F1A\u8BDD\uFF0C\u4F60\u9700\u8981\u5B9A\u4E49\u4E00\u4E2A'uuid'\u5B57\u6BB5\u6765\u6307\u5B9A\u4F60\u8981\u66F4\u65B0\u7684\u7528\u6237

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1564
# args: msg.getUuid()
your\ are\ login\ as\ a\ user,\ you\ cannot\ another\ user[uuid\:%s] = \u4F60\u5DF2\u7ECF\u767B\u5F55\u4E3A\u4E00\u4E2A\u7528\u6237\uFF0C\u4E0D\u80FD\u6210\u4E3A\u53E6\u4E00\u4E2A\u7528\u6237[uuid:{0}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1572
# args: 
all\ is\ set\ to\ false,\ accountUuids\ cannot\ be\ null\ or\ empty = all\u53C2\u6570\u88AB\u8BBE\u4E3Afalse\u65F6\uFF0C\u8D26\u6237uuid\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1580
# args: 
toPublic\ is\ set\ to\ false,\ accountUuids\ cannot\ be\ null\ or\ empty = toPublic\u53C2\u6570\u88AB\u8BBE\u4E3Afalse\u65F6\uFF0C\u8D26\u6237uuid\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1629
# args: policy.getName(),policy.getUuid(),msg.getSession().getAccountUuid()
policy[name\:\ %s,\ uuid\:\ %s]\ doesn't\ belong\ to\ the\ account[uuid\:\ %s] = \u7B56\u7565[\u540D\u79F0: {0}, uuid: {1}]\u4E0D\u5C5E\u4E8E\u8D26\u6237[uuid: {2}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1643
# args: user.getName(),user.getUuid(),msg.getSession().getAccountUuid()
user[name\:\ %s,\ uuid\:\ %s]\ doesn't\ belong\ to\ the\ account[uuid\:\ %s] = \u7528\u6237[\u540D\u79F0: {0}, uuid: {1}]\u4E0D\u5C5E\u4E8E\u8D26\u6237[uuid: {2}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1647
# args: group.getName(),group.getUuid(),msg.getSession().getAccountUuid()
group[name\:\ %s,\ uuid\:\ %s]\ doesn't\ belong\ to\ the\ account[uuid\:\ %s] = \u7528\u6237\u7EC4[\u540D\u79F0: {0}, uuid: {1}]\u4E0D\u5C5E\u4E8E\u8D26\u6237[uuid: {2}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1655
# args: JSONObjectUtil.toJsonString(s)
a\ statement\ must\ have\ effect\ field.\ Invalid\ statement[%s] = \u58F0\u660E\u5FC5\u987B\u542B\u6709'effect'\u5B57\u6BB5\u3002 \u65E0\u6548\u7684\u58F0\u660E

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1658
# args: JSONObjectUtil.toJsonString(s)
a\ statement\ must\ have\ action\ field.\ Invalid\ statement[%s] = \u58F0\u660E\u5FC5\u987B\u542B\u6709'action'\u5B57\u6BB5\u3002 \u65E0\u6548\u7684\u58F0\u660E

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1661
# args: JSONObjectUtil.toJsonString(s)
a\ statement\ must\ have\ a\ non-empty\ action\ field.\ Invalid\ statement[%s] = \u58F0\u660E\u5FC5\u987B\u542B\u6709\u4E0D\u4E3A\u7A7A\u7684'action'\u5B57\u6BB5\u3002 \u65E0\u6548\u7684\u58F0\u660E

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1717
# args: 
the\ name\ of\ admin\ account\ cannot\ be\ updated = \u4E0D\u80FD\u66F4\u6539\u7BA1\u7406\u5458\u8D26\u6237\u540D\u79F0

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1727
# args: account.getUuid(),account.getName(),msg.getUuid()
account[uuid\:\ %s,\ name\:\ %s]\ is\ a\ normal\ account,\ it\ cannot\ reset\ the\ password\ of\ another\ account[uuid\:\ %s] = [uuid: {0}, \u540D\u79F0: {1}]\u662F\u4E00\u4E2A\u666E\u901A\u8D26\u6237\uFF0C\u4E0D\u80FD\u88AB\u5176\u4ED6\u666E\u901A\u8D26\u6237\u91CD\u8BBE\u5BC6\u7801

# at: src/main/java/org/zstack/image/BackupStorageDeleteBitGC.java:35
# args: backupStorageUuid,bsStatus
the\ backup\ storage[uuid\:%s]\ is\ not\ in\ status\ of\ Connected,\ current\ status\ is\ %s = \u955C\u50CF\u5B58\u50A8[uuid:{0}]\u4E0D\u662FConnected\u72B6\u6001\uFF0C\u5F53\u524D\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:74
# args: vol.getUuid(),vol.getStatus()
volume[uuid\:%s]\ is\ not\ Ready,\ it's\ %s = \u4E91\u76D8[uuid:{0}]\u672AReady\uFF0C\u5B83\u73B0\u5728\u4E3A{1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:78
# args: vol.getUuid(),vol.getState()
volume[uuid\:%s]\ is\ not\ Enabled,\ it's\ %s = \u4E91\u76D8[uuid:{0}]\u672AEnabled\uFF0C\u5B83\u73B0\u5728\u4E3A{1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:87
# args: vol.getUuid(),vol.getVmInstanceUuid(),state
volume[uuid\:%s]\ is\ attached\ to\ vm[uuid\:%s];\ the\ vm\ is\ not\ Stopped,\ it's\ %s = \u4E91\u76D8[uuid:{0}]\u88AB\u6302\u8F7D\u5230\u4E00\u4E2A\u672AStopped\u7684\u4E91\u4E3B\u673A[uuid:{1}]\uFF0C\u4E91\u76D8\u72B6\u6001\u4E3A{2}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:122
# args: 
ISO\ cannot\ be\ used\ as\ system\ image = ISO\u4E0D\u80FD\u88AB\u4F5C\u4E3A\u4E00\u4E2A\u7CFB\u7EDF\u6807\u7B7E

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:128
# args: msg.getFormat()
unknown\ format[%s] = \u672A\u77E5\u683C\u5F0F[{0}]

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:132
# args: msg.getType()
unsupported\ image\ type[%s] = \u4E0D\u652F\u6301\u7684\u955C\u50CF\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:154
# args: msg.getBackupStorageUuids(),BackupStorageStatus.Connected,BackupStorageState.Enabled
no\ backup\ storage\ specified\ in\ uuids%s\ is\ available\ for\ adding\ this\ image;\ they\ are\ not\ in\ status\ %s\ or\ not\ in\ state\ %s,\ or\ the\ uuid\ is\ invalid\ backup\ storage\ uuid = \u955C\u50CF\u5B58\u50A8uuids{0}\u4E0D\u6EE1\u8DB3\u6DFB\u52A0\u955C\u50CF\u7684\u6761\u4EF6\uFF1B\u5B83\u4EEC\u7684\u72B6\u6001\u4E0D\u540C\u65F6\u6EE1\u8DB3{1}\u548C{2},\u4EA6\u6216\u8005\u662F\u65E0\u6548\u7684uuid

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:149
# args: 
url\ must\ starts\ with\ 'file\:///',\ 'http\://',\ 'https\://'\ or\ '/' = 

# at: src/main/java/org/zstack/image/ImageBase.java:146
# args: self.getUuid(),self.getName()
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ on\ any\ backup\ storage = \u955C\u50CF[uuid:{0}, \u540D\u79F0:{1}]\u4E0D\u5728\u4EFB\u4E00\u955C\u50CF\u5B58\u50A8\u4E0A

# at: src/main/java/org/zstack/image/ImageBase.java:156
# args: self.getUuid(),self.getName()
No\ connected\ backup\ storage\ found\ for\ image[uuid\:%s,\ name\:%s] = \u6CA1\u6709Connected\u72B6\u6001\u7684\u955C\u50CF\u5B58\u50A8\u6765\u641C\u7D22\u955C\u50CF[uuid:{0}, name:{1}]

# at: src/main/java/org/zstack/image/ImageBase.java:274
# args: size,bsUuid,reply.getError()
failed\ to\ return\ capacity[%s]\ to\ the\ backup\ storage[uuid\:%s],\ %s = \u5411\u955C\u50CF\u5B58\u50A8[uuid:{1}]\u5F52\u8FD8\u5BB9\u91CF[{0}]\u5931\u8D25\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{2}

# at: src/main/java/org/zstack/image/ImageBase.java:531
# args: self.getUuid(),self.getName(),bsUuid
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ on\ the\ backup\ storage[uuid\:%s] = \u955C\u50CF[uuid:{0}, \u540D\u79F0:{1}]\u4E0D\u5728\u955C\u50CF\u5B58\u50A8[uuid:{2}]\u4E0A

# at: src/main/java/org/zstack/image/ImageBase.java:473
# args: self.getUuid(),self.getName(),ref.getStatus(),bsUuid
the\ image[uuid\:%s,\ name\:%s]'s\ status[%s]\ is\ not\ Deleted\ on\ the\ backup\ storage[uuid\:%s] = \u955C\u50CF[uuid:{0}, \u540D\u79F0:{1}]\u7684\u72B6\u6001[{2}]\u5728\u955C\u50CF\u5B58\u50A8[uuid:{3}]\u4E0A\u4E0D\u662FDeleled

# at: src/main/java/org/zstack/image/ImageBase.java:518
# args: self.getUuid(),self.getName()
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ deleted\ on\ any\ backup\ storage = \u955C\u50CF[uuid:{0}, \u540D\u79F0:{1}]\u672A\u5728\u4EFB\u4E00\u955C\u50CF\u5B58\u50A8\u4E0A\u88AB\u5220\u9664

# at: src/main/java/org/zstack/image/ImageBase.java:536
# args: self.getUuid(),self.getName(),bsUuid
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ deleted\ on\ the\ backup\ storage[uuid\:%s] = \u955C\u50CF[uuid:{0}, \u540D\u79F0:{1}]\u672A\u5728\u955C\u50CF\u5B58\u50A8[uuid:{}]\u4E0A\u88AB\u5220\u9664

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:286
# args: msg.getBackupStorageUuids(),JSONObjectUtil.toJsonString(errs)
failed\ to\ allocate\ all\ backup\ storage[uuid\:%s],\ a\ list\ of\ error\:\ %s = \u955C\u50CF\u5B58\u50A8[uuid:{0}]\u5206\u914D\u5931\u8D25\uFF0C\u9519\u8BEF\u6E05\u5355:{1}

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:378
# args: msg.getVolumeUuid(),msg.getBackupStorageUuids()
failed\ to\ create\ data\ volume\ template\ from\ volume[uuid\:%s]\ on\ all\ backup\ storage%s.\ See\ cause\ for\ one\ of\ errors = \u5728\u6240\u6709\u955C\u50CF\u5B58\u50A8[uuid:{1}]\u4E0A\u521B\u5EFA\u4E91\u76D8[uuid:{0}]\u7684\u4E91\u76D8\u6A21\u7248\u5931\u8D25\uFF0C\u67E5\u770B\u9519\u8BEF\u539F\u56E0

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:695
# args: msg.getBackupStorageUuids(),JSONObjectUtil.toJsonString(errs)
unable\ to\ allocate\ backup\ storage\ specified\ by\ uuids%s,\ list\ errors\ are\:\ %s = \u4E0D\u80FD\u6839\u636E[uuids:{0}]\u5206\u914D\u955C\u50CF\u5B58\u50A8\uFF0C\u9519\u8BEF\u6E05\u5355\u4E3A\uFF1A{1}

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:792
# args: msg.getRootVolumeUuid()
failed\ to\ create\ image\ from\ root\ volume[uuid\:%s]\ on\ all\ backup\ storage,\ see\ cause\ for\ one\ of\ errors = \u5728\u6240\u6709\u955C\u50CF\u5B58\u50A8\u4E0A\u4ECE\u6839\u4E91\u76D8[uuid:{0}]\u521B\u5EFA\u955C\u50CF\u5931\u8D25\uFF0C\u67E5\u770B\u9519\u8BEF\u539F\u56E0

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1006
# args: ivo.getUuid()
image\ [uuid\:%s]\ has\ been\ deleted = \u955C\u50CF[uuid:{0}]\u5DF2\u7ECF\u88AB\u5220\u9664\u3002

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1165
# args: imageUuid,bsUuid,reply.getError()
failed\ to\ expunge\ the\ image[uuid\:%s]\ on\ the\ backup\ storage[uuid\:%s],\ will\ try\ it\ later.\ %s = \u65E0\u6CD5\u5728\u955C\u50CF\u5B58\u50A8[uuid:{1}]\u4E0A\u5F7B\u5E95\u5220\u9664\u955C\u50CF[uuid:{0}]\uFF0C\u7A0D\u540E\u5C06\u4F1A\u91CD\u8BD5\u3002\u9519\u8BEF\u7EC6\u8282\uFF1A{2}

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:43
# args: msg.getVipUuid(),vip.getUseFor()
the\ vip[uuid\:%s]\ has\ been\ used\ for\ %s = \u865A\u62DFIP[uuid:{0}]\u5DF2\u7ECF\u88AB{1}\u4F7F\u7528

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:47
# args: msg.getPeerAddress()
the\ peerAddress[%s]\ cannot\ be\ the\ same\ to\ the\ VIP\ address = \u5BF9\u7AEF\u5730\u5740[{0}]\u4E0D\u80FD\u548C\u865A\u62DFIP\u5730\u5740\u76F8\u540C

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:54
# args: msg.getVipUuid()
the\ vip[uuid\:%s]\ has\ been\ used\ by\ another\ IPsec\ connection = \u865A\u62DF\u5730\u5740[uuid:{0}]\u5DF2\u7ECF\u88AB\u53E6\u4E00\u4E2AIPsec\u8FDE\u63A5\u4F7F\u7528

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:59
# args: msg.getPeerAddress()
the\ peerAddress[%s]\ is\ not\ an\ IPv4\ address = \u5BF9\u7AEF\u5730\u5740[{0}]\u4E0D\u662F\u4E00\u4E2AIPv4\u5730\u5740

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:69
# args: inv.getUuid(),inv.getName()
there\ has\ been\ a\ connection[uuid\:%s,\ name\:%s]\ has\ the\ same\ L3NetworkUuid,\ peerAddress,\ and\ peerCidrs = \u5DF2\u7ECF\u5B58\u5728\u4E00\u4E2A\u8FDE\u63A5[uuid:{0}, \u540D\u79F0:{1}]\u62E5\u6709\u76F8\u540C\u7684\u4E09\u5C42\u7F51\u7EDC\u3001\u5BF9\u7AEF\u5730\u5740\u548C\u5BF9\u7AEFCIDR

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:79
# args: msg.getL3NetworkUuid()
the\ L3\ network[uuid\:%s]\ doesn't\ have\ any\ IP\ range = \u4E09\u5C42\u7F51\u7EDC[uuid:{0}]\u6CA1\u6709IP\u5730\u5740\u8303\u56F4

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:85
# args: localCidr,rcidr,msg.getL3NetworkUuid()
the\ local\ CIDR[%s]\ of\ the\ L3\ network[uuid\:%s]\ overlaps\ with\ the\ peerCidr[%s] = \u4E09\u5C42\u7F51\u7EDC[uuid:{1}]\u7684\u672C\u5730CIDR[{0}]\u4E0E\u5BF9\u7AEFCIDR[{2}]\u91CD\u53E0

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:93
# args: 
the\ authKey\ cannot\ contain\ white\ space\ and\ special\ characters\ of\ '\"`\\ = \u9A8C\u8BC1\u7801\u4E0D\u80FD\u5305\u542B\u7A7A\u683C\u548C\u4EE5\u4E0B\u5B57\u7B26:'\"`\\

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:211
# args: 
vyos\ doesn't\ support\ aes-192\ as\ IkeEncryptionAlgorithm,\ available\ options\ aes-128,\ aes-256,\ 3des = vyos\u4E0D\u652F\u6301aes-192\u4F5C\u4E3A\u5BC6\u94A5\u4EA4\u6362\u52A0\u5BC6\u7B97\u6CD5\uFF0C\u53EF\u7528\u9009\u62E9\u4E3Aaes-128, aes-256, 3des

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:217
# args: 
vyos\ doesn't\ support\ aes-192\ as\ PolicyEncryptionAlgorithm,\ available\ options\ aes-128,\ aes-256,\ 3des = vyos\u4E0D\u652F\u6301aes-192\u4F5C\u4E3A\u52A0\u5BC6\u7B97\u6CD5\u534F\u8BAE\uFF0C\u53EF\u7528\u9009\u62E9\u4E3Aaes-128, aes-256, 3des

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:229
# args: msg.getIkeDhGroup()
vyos\ doesn't\ support\ %d\ as\ Ike\ DhGroup\  = vyos\u4E0D\u652F\u6301[{0}]\u4F5C\u4E3AIke DhGroup

# at: src/main/java/org/zstack/kvm/KVMApiInterceptor.java:36
# args: msg.getManagementIp()
there\ has\ been\ a\ kvm\ host\ having\ management\ ip[%s] = \u5DF2\u7ECF\u5B58\u5728\u4E00\u4E2A\u62E5\u6709\u7BA1\u7406\u8282\u70B9IP[{0}]\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/kvm/KVMConnectExtensionForL2Network.java:125
# args: l2.getType()
KVMConnectExtensionForL2Network\ wont's\ support\ L2Network[type\:%s] = \u7269\u7406\u673A\u4E8C\u5C42\u7F51\u7EDC\u8FDE\u63A5\u63D2\u4EF6\u4E0D\u652F\u6301\u4E8C\u5C42\u7F51\u7EDC[\u7C7B\u578B:{0}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:414
# args: self.getManagementIp(),getSelf().getUsername(),getSelf().getPort(),result.getExitErrorMessage()
unable\ to\ connect\ to\ KVM[ip\:%s,\ username\:%s,\ sshPort\:%d\ ]\ to\ do\ DNS\ check,\ please\ check\ if\ username/password\ is\ wrong;\ %s = \u65E0\u6CD5\u8FDE\u63A5\u7269\u7406\u673A[ip:{0}, \u7528\u6237\u540D:{1}, ssh\u7AEF\u53E3:{2} ]\u505ADNS\u68C0\u67E5\uFF0C\u8BF7\u68C0\u67E5\u7528\u6237\u540D\u5BC6\u7801\u662F\u5426\u6B63\u786E\uFF1B{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:486
# args: self.getUuid(),self.getStatus()
the\ host[uuid\:%s,\ status\:%s]\ is\ not\ Connected = \u7269\u7406\u673A[uuid:{0}, \u72B6\u6001:{1}]\u4E0D\u662FConnected\u72B6\u6001

# at: src/main/java/org/zstack/kvm/KVMHost.java:861
# args: volume.getUuid(),state
cannot\ do\ volume\ snapshot\ merge\ when\ vm[uuid\:%s]\ is\ in\ state\ of\ %s.\ The\ operation\ is\ only\ allowed\ when\ vm\ is\ Running\ or\ Stopped = \u5F53\u4E91\u4E3B\u673A[uuid:{0}]\u5904\u4E8E{1}\u72B6\u6001\u7684\u65F6\u5019\u4E0D\u80FD\u505A\u4E91\u76D8\u5FEB\u7167\u5408\u5E76\u3002\u6B64\u64CD\u4F5C\u53EA\u80FD\u5728\u4E91\u4E3B\u673A\u5904\u5728Running\u548CStopped\u72B6\u6001\u65F6\u8FDB\u884C

# at: src/main/java/org/zstack/kvm/KVMHost.java:868
# args: KVMConstant.MIN_LIBVIRT_LIVE_BLOCK_COMMIT_VERSION,libvirtVersion
live\ volume\ snapshot\ merge\ needs\ libvirt\ version\ greater\ than\ %s,\ current\ libvirt\ version\ is\ %s.\ Please\ stop\ vm\ and\ redo\ the\ operation\ or\ detach\ the\ volume\ if\ it's\ data\ volume = \u5B9E\u65F6\u4E91\u76D8\u5FEB\u7167\u5408\u5E76\u9700\u8981libvirt\u7248\u672C\u9AD8\u4E8E{0}\uFF0C\u73B0\u5728libvirt\u7248\u672C\u4E3A{1}\u3002\u8BF7\u505C\u6B62\u4E91\u4E3B\u673A\u540E\u91CD\u8BD5\u6216\u5378\u8F7D\u4E91\u76D8\uFF08\u4EC5\u5F53\u4E3A\u6570\u636E\u4E91\u76D8\u65F6\uFF09

# at: src/main/java/org/zstack/kvm/KVMHost.java:943
# args: msg.getVmUuid(),vmState
vm[uuid\:%s]\ is\ not\ Running\ or\ Stopped,\ current\ state[%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u672A\u5904\u5728Runing\u6216Stopped\u72B6\u6001all\u53C2\u6570\u88AB\u8BBE\u4E3Afalse\u65F6\uFF0C\u8D26\u6237uuid\u4E0D\u80FD\u4E3A\u7A7A\uFF0C\u73B0\u5728\u72B6\u6001\u4E3A[{1}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:1250
# args: msg.getNicInventory().getUuid(),msg.getNicInventory().getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
failed\ to\ attach\ nic[uuid\:%s,\ vm\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],because\ %s = \u5728\u7269\u7406\u673A[uuid:{3},IP:{3}]\u4E0A\u52A0\u8F7D\u7F51\u5361[uuid:{0},\u4E91\u4E3B\u673A:{1}]\u5931\u8D25\uFF0C\u56E0\u4E3A:{4}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1328
# args: vol.getUuid(),vol.getInstallPath(),vm.getUuid(),vm.getName(),getSelf().getUuid(),getSelf().getManagementIp(),ret.getError()
failed\ to\ detach\ data\ volume[uuid\:%s,\ installPath\:%s]\ from\ vm[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = \u65E0\u6CD5\u5728KVM\u7269\u7406\u673A[uuid:{4}, ip:{5}]\u4E0A\u4E3A\u4E91\u4E3B\u673A[uuid:{2}, name:{3}]\u5378\u8F7D\u6570\u636E\u4E91\u76D8[uuid:{0}, installPath:{1}]\uFF0C\u56E0\u4E3A\uFF1A{6}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1424
# args: vol.getUuid(),vol.getInstallPath(),vm.getUuid(),vm.getName(),getSelf().getUuid(),getSelf().getManagementIp(),ret.getError()
failed\ to\ attach\ data\ volume[uuid\:%s,\ installPath\:%s]\ to\ vm[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = \u65E0\u6CD5\u5728KVM\u7269\u7406\u673A[uuid:{4}, ip:{5}]\u4E0A\u4E3A\u4E91\u4E3B\u673A[uuid:{2}, name:{3}]\u6302\u8F7D\u6570\u636E\u4E91\u76D8[uuid:{0}, installPath:{1}]\uFF0C\u56E0\u4E3A\uFF1A{6}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1482
# args: vminv.getUuid(),vminv.getName(),self.getUuid(),self.getManagementIp(),e.getMessage()
failed\ to\ destroy\ vm[uuid\:%s\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = \u65E0\u6CD5\u5728\u7269\u7406\u673A[uuid:{2}, ip:{3}]\u4E0A\u5173\u95ED\u4E91\u4E3B\u673A[uuid:{0} name:{1}]\uFF0C\u539F\u56E0\uFF1A{4}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1648
# args: vminv.getUuid(),vminv.getName(),self.getUuid(),self.getManagementIp(),e.getMessage()
failed\ to\ stop\ vm[uuid\:%s\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = \u505C\u6B62\u5728\u7269\u7406\u673A[uuid:{2}, ip:{3}]\u4E0A\u7684\u4E91\u4E3B\u673A[uuid:{0} \u540D\u79F0:{1}]\u5931\u8D25\uFF0C\u56E0\u4E3A:{4}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1886
# args: spec.getVmInventory().getUuid(),spec.getVmInventory().getName(),self.getUuid(),self.getManagementIp(),e.getMessage()
failed\ to\ start\ vm[uuid\:%s\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = \u542F\u52A8\u5728\u7269\u7406\u673A[uuid:{2}, ip:{3}]\u4E0A\u7684\u4E91\u4E3B\u673A[uuid:{0} \u540D\u79F0:{1}]\u5931\u8D25\uFF0C\u56E0\u4E3A:{4}

# at: src/main/java/org/zstack/kvm/KVMHost.java:2126
# args: rsp.getError(),msg.getPhysicalInterface(),context.getInventory().getUuid(),context.getInventory().getManagementIp()
%s,\ failed\ to\ check\ physical\ network\ interfaces[names\ \:\ %s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s] = {0}\uFF0C\u68C0\u67E5\u5728\u7269\u7406\u673A[uuid:{2}, ip:{3}]\u4E0A\u7684\u7269\u7406\u7F51\u7EDC[\u540D\u79F0 : {1}]\u5931\u8D25

# at: src/main/java/org/zstack/kvm/KVMHost.java:2305
# args: self.getUuid(),self.getManagementIp(),connectPath,rsp.getError()
unable\ to\ connect\ to\ kvm\ host[uuid\:%s,\ ip\:%s,\ url\:%s],\ because\ %s = \u8FDE\u63A5\u7269\u7406\u673A[uuid:{0}, ip:{1}\uFF0Curl:{2}]\u5931\u8D25\uFF0C\u56E0\u4E3A:{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:2446
# args: 
host\ can\ not\ access\ any\ primary\ storage,\ please\ check\ network = \u7269\u7406\u673A\u65E0\u6CD5\u8BBF\u95EE\u4EFB\u4F55\u4E3B\u5B58\u50A8\uFF0C\u8BF7\u68C0\u67E5\u7F51\u7EDC\u3002

# at: src/main/java/org/zstack/kvm/KVMHost.java:2445
# args: checkList
failed\ to\ ping\ all\ DNS/IP\ in\ %s;\ please\ check\ /etc/resolv.conf\ to\ make\ sure\ your\ host\ is\ able\ to\ reach\ public\ internet = \u5728{0}\u4E2D\u7684\u6240\u6709DNS/IP\u90FDping\u5931\u8D25\u4E86\uFF0C\u8BF7\u68C0\u67E5 /etc/resolv.conf \u6765\u786E\u4FDD\u4F60\u7684\u4E3B\u673A\u80FD\u8FDE\u63A5\u5230\u516C\u7F51

# at: src/main/java/org/zstack/kvm/KVMHost.java:2443
# args: self.getManagementIp(),getSelf().getUsername(),getSelf().getPort(),ret.getExitErrorMessage()
unable\ to\ connect\ to\ KVM[ip\:%s,\ username\:%s,\ sshPort\:\ %d,\ ]\ to\ do\ DNS\ check,\ please\ check\ if\ username/password\ is\ wrong;\ %s = \u65E0\u6CD5\u8FDE\u63A5\u7269\u7406\u673A[ip:{0}, \u7528\u6237\u540D:{1}, ssh\u7AEF\u53E3:{2} ]\u505ADNS\u68C0\u67E5\uFF0C\u8BF7\u68C0\u67E5\u7528\u6237\u540D\u5BC6\u7801\u662F\u5426\u6B63\u786E\uFF1B{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:2473
# args: self.getManagementIp(),Platform.getManagementServerIp(),ret.getStderr(),ret.getExitErrorMessage()
the\ KVM\ host[ip\:%s]\ cannot\ access\ the\ management\ node's\ callback\ url.\ It\ seems\ that\ the\ KVM\ host\ cannot\ reach\ the\ management\ IP[%s].\ %s\ %s = \u7269\u7406\u673A[ip:{0}] \u4E0D\u80FD\u8FDE\u63A5\u5230\u7BA1\u7406\u8282\u70B9 \u3002 \u770B\u8D77\u6765\u662F\u8FD9\u4E2A\u7269\u7406\u673A\u4E0D\u80FD\u67E5\u627E\u5230\u7BA1\u7406\u8282\u70B9\u7684IP [{1}]. {2} {3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:2470
# args: self.getManagementIp(),getSelf().getUsername(),getSelf().getPort(),ret.getExitErrorMessage()
unable\ to\ connect\ to\ KVM[ip\:%s,\ username\:%s,\ sshPort\:%d]\ to\ check\ the\ management\ node\ connectivity,please\ check\ if\ username/password\ is\ wrong;\ %s = \u4E0D\u80FD\u8FDE\u63A5\u5230\u7269\u7406\u673A[ip:{0}, username:{1}, sshPort:%d] \u53BB\u68C0\u67E5\u4E0E\u7BA1\u7406\u8282\u70B9\u662F\u5426\u8FDE\u901A  ,\u8BF7\u68C0\u67E5\u60A8\u7684\u7528\u6237\u540D\u6216\u8005\u5BC6\u7801\u662F\u5426\u6709\u8BEF; {2}

# at: src/main/java/org/zstack/kvm/KVMHost.java:2564
# args: self.getUuid(),self.getManagementIp(),ret.getExecutionLog()
unable\ to\ get\ kvm\ host[uuid\:%s,\ ip\:%s]\ facts\ by\ ansible\n%s = \u4E0D\u80FD\u83B7\u53D6\u7269\u7406\u673A[uuid:{0}, ip:{1}]\u7684\u914D\u7F6E\u7BA1\u7406\u5668\n{2}

# at: src/main/java/org/zstack/kvm/KVMHost.java:2570
# args: ret.getStdout()
unrecognized\ ansible\ facts\ mediaType,\ %s = \u672A\u8BC6\u522B\u7684Ansible facts \u7C7B\u578B\uFF08mediaType\uFF09\uFF0C{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:2577
# args: ret.getStdout()
unrecognized\ ansible\ facts\ mediaType,\ cannot\ find\ field\ 'ansible_facts',\ %s = \u672A\u6388\u6743\u7684\u914D\u7F6E\u7BA1\u7406\u5668\u7C7B\u578B\uFF0C\u4E0D\u80FD\u53D1\u73B0'ansible_facts', {0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:2608
# args: 
cannot\ find\ either\ 'vmx'\ or\ 'svm'\ in\ /proc/cpuinfo,\ please\ make\ sure\ you\ have\ enabled\ virtualization\ in\ your\ BIOS\ setting = \u4E0D\u80FD\u53D1\u73B0\u4EE5\u4E0B\u4EFB\u610F\u4E00\u4E2A  'vmx' or 'svm' \u5728\u8DEF\u5F84 /proc/cpuinfo \u91CC, \u8BF7\u68C0\u67E5\u4F60\u662F\u5426\u5728\u4F60\u7684BIOS\u8BBE\u7F6E\u91CC\u5F00\u542F\u4E86virtualization\u9009\u9879

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:202
# args: cmd.hostUuid,cmd.reason
the\ kvm\ host[uuid\:%s]\ asks\ the\ management\ server\ to\ reconnect\ it\ for\ %s = KVM\u7269\u7406\u673A[uuid:{0}]\u8BF7\u6C42\u7BA1\u7406\u8282\u70B9\u91CD\u8FDE\u7528\u4E8E{1}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java:69
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = \u5728\u7269\u7406\u673A[uuid:{3}]\u4E0A\u4E3AL2\u7F51\u7EDC[uuid:{1}, type:{2}]\u521B\u5EFA\u7F51\u6865[{0}]\u5931\u8D25\uFF0C\u539F\u56E0\uFF1A{4}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java:120
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getName(),hostUuid,rsp.getError()
failed\ to\ check\ bridge[%s]\ for\ l2NoVlanNetwork[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:\ %s],\ %s = \u5728L2\u7F51\u7EDC[uuid:{1}\u4E2D\u68C0\u67E5\u7F51\u6865[{0}]\u5931\u8D25\uFF0C\u540D\u5B57\u4E3A[{2}]\u5728\u7269\u7406\u673At[uuid: {3}]\u4E0A, {4}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java:72
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),l2vlan.getVlan(),hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s,\ vlan\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = \u521B\u5EFAL2\u7F51\u7EDC[uuid:{1}\u4E2D\u7684\u7F51\u6865[{0}]\u5931\u8D25 , \u7C7B\u578B\u4E3A\uFF1A{2}, vlan:{3}] \u5728\u7269\u7406\u673A[uuid:{4}]\u4E0A, \u539F\u56E0\uFF1A {5}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java:124
# args: cmd.getBridgeName(),l2vlan.getUuid(),l2vlan.getName(),hostUuid,rsp.getError()
failed\ to\ check\ bridge[%s]\ for\ l2VlanNetwork[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = \u68C0\u67E5\u5728\u7269\u7406\u673A[uuid:{3}]\u4E0AL2\u7F51\u7EDC[uuid:{1}, name:{2}]\u4E2D\u7684\u7F51\u6865[{0}]\u5931\u8D25, {4}

# at: src/main/java/org/zstack/kvm/KVMSecurityGroupBackend.java:97
# args: hto.getHostUuid(),rsp.getError()
failed\ to\ apply\ rules\ of\ security\ group\ rules\ to\ kvm\ host[uuid\:%s],\ because\ %s = \u4E0D\u80FD\u5E94\u7528\u5B89\u5168\u7EC4\u89C4\u5219\u5728\u7269\u7406\u673At[uuid:{0}]\u4E0A, \u56E0\u4E3A {1}

# at: src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:90
# args: host.getUuid(),host.getManagementIp(),ret.getError()
unable\ to\ do\ vm\ sync\ on\ host[uuid\:%s,\ ip\:%s]\ because\ %s = \u4E0D\u80FD\u5728\u7269\u7406\u673A[uuid:{0}, ip:{1}]\u4E0A\u6267\u884C\u4E91\u4E3B\u673A\u72B6\u6001\u540C\u6B65\u64CD\u4F5C\uFF0C\u56E0\u4E3A{2}

# at: src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:125
# args: cmd.hostUuid,state,cmd.hostUuid
an\ anonymous\ VM[uuid\:%s,\ state\:%s]\ is\ detected\ on\ the\ host[uuid\:%s] = \u7269\u7406\u673A[uuid:{2}]\u4E0A\u53D1\u73B0\u4E00\u4E2A\u4E0D\u53D7\u7BA1\u63A7\u7684\u4E91\u4E3B\u673A[uuid:{0}, state:{1}]\u3002

# at: src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:141
# args: cmd.vmState,cmd.vmUuid,cmd.hostUuid,reply.getError()
failed\ to\ report\ state[%s]\ of\ the\ vm[uuid\:%s]\ on\ the\ host[uuid\:%s],\ %s = \u62A5\u544A\u7269\u7406\u673A[uuid:{2}]\u4E0A\u7684\u4E91\u4E3B\u673A[uuid:{1}]\u7684\u72B6\u6001[{0}]\u5931\u8D25\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{3}

# at: src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:213
# args: host.getUuid(),host.getName(),errorCode
failed\ to\ sync\ VM\ states\ on\ the\ host[uuid\:%s,\ name\:%s],\ %s = \u540C\u6B65\u7269\u7406\u673A[uuid:{0}, name:{1}]\u4E0A\u7684\u4E91\u4E3B\u673A\u72B6\u6001\u5931\u8D25\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{2}

# at: src/main/java/org/zstack/mediator/ApiValidator.java:94
# args: vm.getName(),vm.getUuid(),StringUtils.join(pfStr, ",")
the\ vm[name\:%s,\ uuid\:%s]\ already\ has\ some\ port\ forwarding\ rules%s\ attached = \u4E91\u4E3B\u673A[name:{0}, uuid:{1}] \u5DF2\u7ECF\u8BBE\u7F6E\u4E86\u4E00\u4E9B\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219{2}

# at: src/main/java/org/zstack/mediator/ApiValidator.java:115
# args: vm.getName(),vm.getUuid(),StringUtils.join(eipStr, ",")
the\ vm[name\:%s,\ uuid\:%s]\ already\ has\ some\ EIPs%s\ attached = \u4E91\u4E3B\u673A[name:{0}, uuid:{1}] \u5DF2\u7ECF\u914D\u7F6E\u4E86\u5F39\u6027IP{2}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:223
# args: psType
for\ shareable\ volume,\ the\ only\ supported\ primary\ storage\ type\ is\ ceph,\ current\ is\ %s = \u5171\u4EAB\u6570\u636E\u76D8\u53EA\u652F\u6301ceph\u7C7B\u578B\u7684\u4E3B\u5B58\u50A8{0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:438
# args: bandwidth
invalid\ network\ bandwidth[%s],\ it\ is\ not\ a\ number = \u9519\u8BEF\u7684\u7F51\u7EDC\u5E26\u5BBD[{0}]\uFF0C\u8FD9\u4E0D\u662F\u6570\u5B57

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:435
# args: bandwidth
invalid\ network\ bandwidth[%s],\ it\ must\ be\ greater\ than\ 0 = \u9519\u8BEF\u7684\u7F51\u7EDC\u5E26\u5BBD[{0}]\uFF0C\u8FD9\u4E2A\u6570\u5B57\u5FC5\u987B\u8D85\u8FC70

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:456
# args: bandwidth
invalid\ volume\ bandwidth[%s]\ is\ not\ a\ number = \u9519\u8BEF\u7684\u78C1\u76D8\u5E26\u5BBD \uFF0C[{0}] \u8FD9\u4E2A\u4E0D\u662F\u6570\u5B57

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:453
# args: bandwidth
invalid\ volume\ bandwidth[%s],\ it\ must\ be\ greater\ than\ 0 = \u9519\u8BEF\u7684\u78C1\u76D8\u5E26\u5BBD \uFF0C[{0}] \u8FD9\u4E2A\u6570\u5B57\u5FC5\u987B\u8D85\u8FC70

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:474
# args: bandwidth
invalid\ volume\ IOPS[%s]\ is\ not\ a\ number = \u9519\u8BEF\u7684\u78C1\u76D8\u6BCF\u79D2\u8BFB\u5199\u901F\u5EA6[{0}]\uFF0C\u5B83\u5E94\u8BE5\u662F\u4E2A\u6570\u5B57

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:471
# args: bandwidth
invalid\ volume\ IOPS[%s],\ it\ must\ be\ greater\ than\ 0 = \u9519\u8BEF\u7684\u78C1\u76D8\u6BCF\u79D2\u8BFB\u5199\u901F\u5EA6[{0}]\uFF0C\u5B83\u5E94\u8BE5\u5927\u4E8E0

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:488
# args: hostUuid,distro,version
the\ host[uuid\:%s]'s\ operating\ system\ %s\ %s\ is\ too\ old,\ the\ QEMU\ doesn't\ support\ QoS\ of\ network\ or\ disk\ IO.\ Please\ choose\ another\ instance\ offering\ with\ no\ QoS\ configuration = \u7269\u7406\u673A[uuid:{0}] \u7684\u64CD\u4F5C\u7CFB\u7EDF{1} {2} \u8FC7\u8001,  QEMU \u4E0D\u652F\u6301\u78C1\u76D8\u7684QOS IO\u8BBE\u7F6E \u3002 \u8BF7\u9009\u62E9\u522B\u7684\u6CA1\u6709Qos\u7684\u8BA1\u7B97\u89C4\u683C

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:595
# args: newValue
invalid\ value[%s],\ it's\ not\ a\ double = \u9519\u8BEF\u7684\u503C[{0}]\uFF0C\u8FD9\u4E2A\u4E0D\u662F\u53CC\u7CBE\u5EA6\u503C

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:571
# args: newValue
invalid\ value[%s],\ it\ must\ be\ a\ double\ greater\ than\ 0 = \u9519\u8BEF\u7684\u503C[{0}]\uFF0C\u5FC5\u987B\u662F\u4E00\u4E2A\u5927\u4E8E0\u7684\u53CC\u7CBE\u5EA6\u503C

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:592
# args: newValue
invalid\ value[%s],\ it\ must\ be\ a\ double\ between\ (0,\ 1] = \u9519\u8BEF\u7684\u503C[{0}]\uFF0C\u8FD9\u4E2A\u5FC5\u987B\u57280~1\u4E4B\u95F4\u7684\u53CC\u7CBE\u5EA6\u503C

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:604
# args: newValue
invalid\ value[%s],\ ZStack\ doesn't\ have\ such\ host\ allocator\ type = \u9519\u8BEF\u503C[{0}]\uFF0CZstack\u6CA1\u6709\u8FD9\u6837\u7684\u5206\u914D\u5668\u7C7B\u578B

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1361
# args: volume.getUuid(),vm.getUuid()
Shareable\ Volume[uuid\:%s]\ has\ already\ been\ attached\ to\ VM[uuid\:%s] = \u5171\u4EAB\u4E91\u76D8[uuid:{0}]\u5DF2\u7ECF\u6302\u8F7D\u5230\u4E91\u4E3B\u673A[uuid:{1}]\u4E0A

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1379
# args: 
shareable\ disk\ only\ support\ virtio-scsi\ type\ for\ now = \u76EE\u524D\u5171\u4EAB\u76D8\u53EA\u652F\u6301virtio-scsi

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:245
# args: msg.getVolume().getUuid(),msg.getVmInstanceUuid()
failed\ to\ detach\ shareable\ volume[uuid\:%s]\ from\ VmInstance[uuid\:%s] = \u4E0D\u80FD\u5378\u8F7D\u4E91\u4E3B\u673A[uuid:{1}]\u4E0A\u7684\u5171\u4EAB\u76D8[uuid:{0}]

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:257
# args: StringUtils.join(errors, "\n\n")
failed\ to\ detach\ shareable\ volume\ from\ VmInstance\:[\n%s] = \u4E0D\u80FD\u5378\u8F7D\u4E91\u4E3B\u673A[uuid:{0}]\u4E0A\u7684\u5171\u4EAB\u76D8

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:174
# args: msg.getMonitorTriggerUuid()
cannot\ find\ monitor\ trigger[uuid\:%s],\ it\ may\ have\ been\ deleted = 

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:183
# args: msg.getMonitorTriggerActionUuid()
cannot\ find\ monitor\ trigger\ action[uuid\:%s],\ it\ may\ have\ been\ deleted = 

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:225
# args: msg.getResourceType()
the\ resource[type\:%s]\ doesn't\ have\ any\ monitoring\ items = 

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:292
# args: msg.getTargetResourceUuid(),msg.getSession().getAccountUuid()
the\ resource[uuid\:%s]\ doesn't\ belong\ to\ the\ account[uuid\:%s] = 

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:335
# args: resourceUuid
cannot\ find\ type\ for\ the\ resource[uuid\:%s] = 

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:340
# args: resourceType,triggerExpression.getItem()
no\ monitoring\ item\ found\ for\ the\ resourceType[%s]\ and\ item[%s] = 

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:445
# args: host.getName(),host.getUuid(),errorCode
failed\ to\ delete\ monitoring\ stuff\ for\ the\ host[name\:%s,\ uuid\:%s],\ %s = 

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:508
# args: vm.getName(),vm.getUuid(),errorCode
failed\ to\ delete\ monitoring\ stuff\ for\ the\ vm[name\:%s,\ uuid\:%s],\ %s = 

# at: src/main/java/org/zstack/monitoring/MonitorTriggerBase.java:175
# args: event.getAction().getUuid(),event.getTrigger().getUuid(),errorCode
unable\ to\ fire\ an\ action[uuid\:%s,\ trigger\ uuid\:%s]\ because\ of = 

# at: src/main/java/org/zstack/monitoring/MonitorTriggerBase.java:362
# args: self.getUuid(),errCode
failed\ to\ update\ the\ monitor\ trigger[uuid\:%s]\ because\ of\ %s.\ The\ trigger\ will\ be\ set\ in\ the\ error\ status,\ you\ can\ try\ updating\ again\ to\ recover\ it = 

# at: src/main/java/org/zstack/monitoring/items/host/HostCpuUtilItem.java:31
# args: 
Host\ CPU\ utilization = 

# at: src/main/java/org/zstack/monitoring/items/vm/VmCpuUtilItem.java:29
# args: 
VM\ CPU\ utilization = 

# at: src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:106
# args: expr,e.getMessage()
invalid\ expression\:\ %s,\ %s = 

# at: src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:110
# args: expr
invalid\ expression\:\ %s,\ no\ expression\ found = 

# at: src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:127
# args: key
missing\ parameter\ '%s'\ in\ the\ expression = 

# at: src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:131
# args: key,clz,value.getClass()
wrong\ type\ of\ parameter\ '%s'\ in\ the\ expression,\ it\ must\ be\ type\ of\ %s,\ but\ got\ %s = 

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:113
# args: vl2.getUuid(),vl2.getName(),msg.getClusterUuid(),vl2.getPhysicalInterface(),vl2.getVlan(),tl2.getUuid()
There\ has\ been\ a\ L2VlanNetwork[uuid\:%s,\ name\:%s]\ attached\ to\ cluster[uuid\:%s]\ that\ has\ physical\ interface[%s],\ vlan[%s].\ Failed\ to\ attach\ L2VlanNetwork[uuid\:%s] = L2\u7F51\u7EDC\u6302\u8F7D\u5931\u8D25[uuid:{5}]\uFF1AL2\u7F51\u7EDC[uuid:{0}, name:{1}]\u7684\u7269\u7406\u63A5\u53E3[{3}], vlan[{4}]\u5DF2\u7ECF\u6302\u8F7D\u5230\u96C6\u7FA4[uuid:{2}]\u4E0A

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:90
# args: l2.getUuid(),l2.getName(),msg.getClusterUuid(),l2.getPhysicalInterface(),tl2.getUuid()
There\ has\ been\ a\ l2Network[uuid\:%s,\ name\:%s]\ attached\ to\ cluster[uuid\:%s]\ that\ has\ physical\ interface[%s].\ Failed\ to\ attach\ l2Network[uuid\:%s] = L2\u7F51\u7EDC\u6302\u8F7D\u5931\u8D25[uuid:{4}]\uFF1AL2\u7F51\u7EDC[uuid:{0}, name:{1}]\u7684\u7269\u7406\u63A5\u53E3[{3}]]\u5DF2\u7ECF\u6302\u8F7D\u5230\u96C6\u7FA4[uuid:{2}]\u4E0A

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:66
# args: msg.getL2NetworkUuid(),msg.getClusterUuid()
l2Network[uuid\:%s]\ has\ attached\ to\ cluster[uuid\:%s],\ can't\ attach\ again = \u4E0D\u80FD\u518D\u6B21\u6302\u8F7Dl2\u7F51\u7EDC[uuid:{0}]\uFF0C\u56E0\u4E3A\u5DF2\u7ECF\u6302\u8F7D\u5230\u96C6\u7FA4[uuid:{1}]\u4E0A\u4E86

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:127
# args: msg.getL2NetworkUuid(),msg.getClusterUuid()
l2Network[uuid\:%s]\ has\ not\ attached\ to\ cluster[uuid\:%s] = L2\u7F51\u7EDC[uuid:{0}]\u6CA1\u6709\u6302\u8F7D\u5230\u96C6\u7FA4\u4E0A[uuid:{1}]

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:141
# args: msg.getType()
unsupported\ l2Network\ type[%s] = \u4E0D\u652F\u6301\u7684\u7F51\u7EDC\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetwork/VxlanNetworkFactory.java:188
# args: inv.getUuid(),destHostUuid
cannot\ configure\ vxlan\ network\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = \u65E0\u6CD5\u4E3A\u4E91\u4E3B\u673A[uuid:{0}]\u5728\u76EE\u6807\u7269\u7406\u673A[uuid:{1}]\u4E0A\u914D\u7F6EVXLAN\u7F51\u7EDC\u3002

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:107
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),l2vxlan.getVni(),hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s,\ vni\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = \u4E3AL2\u7F51\u7EDC[uuid:{1}, type:{2}, vni:{3}]\u5728KVM\u7269\u7406\u673A[uuid:{4}]\u4E0A\u521B\u5EFA\u7F51\u6865[{0}]\u5931\u8D25\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{5}\u3002

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkPoolBackend.java:94
# args: cmd.getCidr(),vxlanPool.getUuid(),vxlanPool.getName(),hostUuid,rsp.getError()
failed\ to\ check\ cidr[%s]\ for\ l2VxlanNetwork[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = \u4E3AKVM\u7269\u7406\u673A[uuid:{3}]\u4E0A\u7684L2 VXLAN \u7F51\u7EDC[uuid:{1}, name:{2}]\u68C0\u67E5CIDR[{0}]\u5931\u8D25\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{4}\u3002

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:85
# args: msg.getIp()
invalid\ IP[%s] = \u9519\u8BEF\u7684IP\u503C[{0}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:91
# args: 
ipRangeUuid\ and\ l3NetworkUuid\ cannot\ both\ be\ null;\ you\ must\ set\ either\ one. = IP\u6BB5\u548CL3\u7684uuid\u4E0D\u80FD\u90FD\u4E3A\u7A7A\uFF0C\u60A8\u5FC5\u987B\u9009\u62E9\u4E00\u4E2A\u586B\u4E0A

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:118
# args: msg.getNetworkCidr()
%s\ is\ not\ a\ valid\ network\ cidr = {0}\u4E0D\u662F\u6709\u6548\u7684\u65E0\u7C7B\u522B\u57DF\u95F4\u8DEF\u7531

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:115
# args: msg.getNetworkCidr()
%s\ is\ not\ an\ allowed\ network\ cidr,\ because\ it\ doesn't\ have\ usable\ ip\ range = {0}\u662F\u4E0D\u5141\u8BB8\u7684\u65E0\u7C7B\u522B\u57DF\u95F4\u8DEF\u7531\uFF0C\u56E0\u4E3A\u5B83\u4E0D\u652F\u6301\u53EF\u7528\u7684IP\u6BB5

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:138
# args: 
ipRangeUuids,\ L3NetworkUuids,\ zoneUuids\ must\ have\ at\ least\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = ipRangeUuids, L3NetworkUuids, zoneUuids \u81F3\u5C11\u4E00\u4E2A\u4E0D\u662F\u4E3A\u7A7A\u5217\u8868\uFF0C\u6216\u8005\u5168\u90E8\u4E0D\u4E3A\u7A7A

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:159
# args: msg.getType()
unsupported\ l3network\ type[%s] = \u4E0D\u652F\u6301\u7684L3\u7F51\u7EDC\u7C7B\u578B[{0}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:165
# args: msg.getDnsDomain()
%s\ is\ not\ a\ valid\ domain\ name = {0}\u4E0D\u662F\u6709\u6548\u7684\u57DF\u540D

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:191
# args: ipr.getStartIp(),ipr.getEndIp()
the\ IP\ range[%s\ ~\ %s]\ contains\ D\ class\ addresses\ which\ are\ for\ multicast = \u8FD9\u4E2AIP\u6BB5[{0} ~ {1}]\u5305\u542B\u4E86D\u7C7B\u7684\u591A\u64AD\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:195
# args: ipr.getStartIp(),ipr.getEndIp()
the\ IP\ range[%s\ ~\ %s]\ contains\ E\ class\ addresses\ which\ are\ reserved = \u8FD9\u4E2AIP\u6BB5[{0} ~ {1}]\u5305\u542B\u4E86E\u7C7B\u7684\u4FDD\u7559\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:199
# args: ipr.getStartIp(),ipr.getEndIp()
the\ IP\ range[%s\ ~\ %s]\ contains\ link\ local\ addresses\ which\ are\ reserved = \u8FD9\u4E2AIP\u6BB5[{0} ~ {1}]\u5305\u542B\u4E86\u672C\u5730\u7684\u4FDD\u7559\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:205
# args: ipr.getGateway(),ipr.getStartIp(),ipr.getNetmask()
the\ gateway[%s]\ is\ not\ in\ the\ subnet\ %s/%s = \u7F51\u5173[{0}]\u4E0D\u5728\u5B50\u7F51{1}/{2}

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:209
# args: ipr.getStartIp()
start\ ip[%s]\ is\ not\ a\ IPv4\ address = \u5F00\u59CB\u7684ip[{0}] \u4E0D\u662FIPV4\u7684\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:213
# args: ipr.getEndIp()
end\ ip[%s]\ is\ not\ a\ IPv4\ address = \u7ED3\u675F\u7684ip[{0}] \u4E0D\u662FIPV4\u7684\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:217
# args: ipr.getGateway()
gateway[%s]\ is\ not\ a\ IPv4\ address = \u7F51\u5173[{0}]\u4E0D\u662FIPV4\u7684\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:221
# args: ipr.getNetmask()
netmask[%s]\ is\ not\ a\ netmask,\ and\ the\ IP\ range\ netmask\ cannot\ be\ 0.0.0.0 = \u5B50\u7F51\u63A9\u7801[{0}]\u4E0D\u662F\u5B50\u7F51\u63A9\u7801\uFF0C\u5E76\u4E14IP\u6BB5\u7684\u5B50\u7F51\u63A9\u7801\u4E0D\u80FD\u662F0.0.0.0

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:225
# args: 
ip\ allocation\ can\ not\ contain\ network\ address\ or\ broadcast\ address = ip \u5730\u5740\u5206\u914D\u4E0D\u80FD\u5305\u542B\u7F51\u7EDC\u5730\u5740\u6216\u5E7F\u64AD\u7684\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:233
# args: ipr.getStartIp(),ipr.getEndIp()
start\ ip[%s]\ is\ behind\ end\ ip[%s] = \u8D77\u59CBip[{0}]\u5728\u5C3Eip[{1}]\u540E

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:238
# args: ipr.getGateway(),ipr.getStartIp(),ipr.getEndIp()
gateway[%s]\ can\ not\ be\ part\ of\ range[%s,\ %s] = \u7F51\u5173[{0}]\u4E0D\u80FD\u662FIP\u6BB5[{1}, {2}]\u7684\u4E00\u90E8\u5206

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:247
# args: r.getUuid(),r.getStartIp(),r.getEndIp()
overlap\ with\ ip\ range[uuid\:%s,\ start\ ip\:%s,\ end\ ip\:\ %s] = \u91CD\u53E0\u7684IP\u6BB5[uuid:{0}, \u8D77\u59CBip:{1}, \u5C3Eip: {2}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:252
# args: ipr.getUuid(),rcidr,cidr
multiple\ CIDR\ on\ the\ same\ L3\ network\ is\ not\ allowed.\ There\ has\ been\ a\ IP\ range[uuid\:%s,\ CIDR\:%s],\ the\ new\ IP\ range[CIDR\:%s]\ is\ not\ in\ the\ CIDR\ with\ the\ existing\ one = \u591A\u4E2A\u65E0\u7C7B\u522B\u57DF\u95F4\u8DEF\u7531\u5728\u60F3\u901A\u7684L3\u7F51\u7EDC\u4E0A\u662F\u4E0D\u5141\u8BB8\u7684\uFF0C\u8FD9\u53D1\u751F\u5728\u539F\u6709IP\u8303\u56F4 [uuid: {0}\uFF0CCIDR: {1}]\u3002\u65B0\u7684IP\u8303\u56F4 [CIDR: {2}] \u4E0D\u5728\u73B0\u6709\u7684\u4E00\u4E2ACIDR

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:266
# args: msg.getDns()
DNS[%s]\ is\ not\ a\ IPv4\ address = DNS[{0}]\u4E0D\u662F\u4E00\u4E2AIPv4\u5730\u5740

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:308
# args: msg.getDns(),msg.getL3NetworkUuid()
there\ has\ been\ a\ DNS[%s]\ on\ L3\ network[uuid\:%s] = \u8FD9\u4E2A\u53D1\u751F\u5728L3\u7F51\u7EDC[uuid:{1}]\u7684DNS[{0}]\u4E0A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:66
# args: msg.getSecurityGroupUuid(),msg.getL3NetworkUuid()
security\ group[uuid\:%s]\ has\ not\ attached\ to\ l3Network[uuid\:%s],\ can't\ detach = \u4E0D\u80FD\u5378\u8F7D\u5B89\u5168\u7EC4[uuid:{0}]\u5230L3[uuid:{1}]\u7F51\u7EDC\u4E0A\uFF0C\u56E0\u4E3A\u8FD8\u672A\u6302\u8F7D

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:114
# args: msg.getSecurityGroupUuid(),msg.getL3NetworkUuid()
security\ group[uuid\:%s]\ has\ attached\ to\ l3Network[uuid\:%s],\ can't\ attach\ again = \u4E0D\u80FD\u518D\u6B21\u6302\u8F7D\u5B89\u5168\u7EC4[uuid:{0}]\u5230L3[uuid:{1}]\u7F51\u7EDC\u4E0A\uFF0C\u56E0\u4E3A\u5DF2\u7ECF\u6302\u8F7D\u4E86

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:122
# args: msg.getL3NetworkUuid(),SecurityGroupConstant.SECURITY_GROUP_NETWORK_SERVICE_TYPE
the\ L3\ network[uuid\:%s]\ doesn't\ have\ the\ network\ service\ type[%s]\ enabled = L3\u7F51\u7EDC[uuid:{0}]\u6CA1\u6709\u5F00\u542F[{1}]\u7C7B\u578B\u7684\u7F51\u7EDC\u670D\u52A1

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:160
# args: wrongUuids,securityGroupUuid
VM\ nics[uuids\:%s]\ are\ not\ on\ L3\ networks\ that\ have\ been\ attached\ to\ the\ security\ group[uuid\:%s] = \u4E91\u4E3B\u673A\u7F51\u5361[uuids:{0}]\u4E0D\u5728\u5B89\u5168\u7EC4[uuid:{1}]\u6302\u8F7D\u7684L3\u7F51\u7EDC\u4E0A

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:201
# args: JSONObjectUtil.toJsonString(ao)
rule\ type\ can\ not\ be\ null.\ rule\ dump\:\ %s = \u89C4\u5219\u7C7B\u578B(rule type)\u4E0D\u80FD\u4E3A\u7A7A(null)\u3002\u89C4\u5219\u5185\u5BB9\u4E3A\uFF1A{0}\u3002

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:206
# args: ao.getType(),JSONObjectUtil.toJsonString(ao)
unknown\ rule\ type[%s],\ rule\ can\ only\ be\ Ingress/Egress.\ rule\ dump\:\ %s = \u672A\u77E5\u7684\u89C4\u5219\u7C7B\u578B(rule type)[{0}]\uFF0C\u89C4\u5219\u7C7B\u578B\u53EA\u80FD\u4E3AIngress/Egress\u3002\u89C4\u5219\u5185\u5BB9\u4E3A\uFF1A{1}\u3002

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:212
# args: JSONObjectUtil.toJsonString(ao)
protocol\ can\ not\ be\ null.\ rule\ dump\:\ %s = \u534F\u8BAE(protocol)\u4E0D\u80FD\u4E3A\u7A7A(null)\u3002\u89C4\u5219\u5185\u5BB9\u4E3A\uFF1A{0}\u3002

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:222
# args: ao.getProtocol(),JSONObjectUtil.toJsonString(ao)
invalid\ protocol[%s].\ Valid\ protocols\ are\ [TCP,\ UDP,\ ICMP,\ ALL].\ rule\ dump\:\ %s = \u65E0\u6548\u7684\u534F\u8BAE(protocol)[{0}]\u3002\u6709\u6548\u7684\u534F\u8BAE\u7C7B\u578B\u4E3A[TCP,UDP,ICMP,ALL]\u3002\u89C4\u5219\u5185\u5BB9\u4E3A\uFF1A{1}\u3002

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:229
# args: JSONObjectUtil.toJsonString(ao)
can\ not\ set\ port\ for\ protocol\ [type\:ALL].\ rule\ dump\:\ %s = \u4E0D\u80FD\u4E3A\u534F\u8BAE\u7C7B\u578B\u4E3A ALL \u7684\u89C4\u5219\u6307\u5B9A\u7AEF\u53E3\u53F7\uFF0C\u89C4\u5219\u4E3A:{0}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:223
# args: JSONObjectUtil.toJsonString(ao)
startPort\ can\ not\ be\ null.\ rule\ dump\:\ %s = \u8D77\u59CB\u7AEF\u53E3(startPort)\u4E0D\u80FD\u4E3A\u7A7A(null)\u3002\u89C4\u5219\u5185\u5BB9\u4E3A\uFF1A{0}\u3002

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:233
# args: ao.getStartPort(),JSONObjectUtil.toJsonString(ao)
invalid\ startPort[%s].\ Valid\ range\ is\ [0,\ 65535].\ rule\ dump\:\ %s = \u65E0\u6548\u7684\u8D77\u59CB\u7AEF\u53E3(startPort)[{0}]\u3002\u6709\u6548\u7684\u8303\u56F4\u4E3A[0,65535]\u3002\u89C4\u5219\u5185\u5BB9\u4E3A\uFF1A{1}\u3002

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:228
# args: ao.getStartPort(),JSONObjectUtil.toJsonString(ao)
invalid\ ICMP\ type[%s].\ Valid\ type\ is\ [-1,\ 255].\ rule\ dump\:\ %s = \u65E0\u6548\u7684ICMP\u7C7B\u578B[{0}]\u3002\u6709\u6548\u7684\u7C7B\u578B\u4E3A[-1,255]\u3002\u89C4\u5219\u5185\u5BB9\u4E3A\uFF1A{1}\u3002

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:250
# args: ao.getEndPort(),JSONObjectUtil.toJsonString(ao)
invalid\ endPort[%s].\ Valid\ range\ is\ [0,\ 65535].\ rule\ dump\:\ %s = \u65E0\u6548\u7684\u7ED3\u675F\u7AEF\u53E3(endPort)[{0}]\u3002\u6709\u6548\u7684\u8303\u56F4\u4E3A[0,65535]\u3002\u89C4\u5219\u5185\u5BB9\u4E3A\uFF1A{1}\u3002

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:245
# args: ao.getEndPort(),JSONObjectUtil.toJsonString(ao)
invalid\ ICMP\ code[%s].\ Valid\ range\ is\ [-1,\ 3].\ rule\ dump\:\ %s = \u65E0\u6548\u7684ICMP\u7F16\u7801[{0}]\u3002\u6709\u6548\u7684\u8303\u56F4\u4E3A[-1,3]\u3002\u89C4\u5219\u5185\u5BB9\u4E3A\uFF1A{1}\u3002

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:257
# args: ao.getAllowedCidr(),JSONObjectUtil.toJsonString(ao)
invalid\ CIDR[%s].\ rule\ dump\:\ %s = \u65E0\u6548\u7684CIDR[{0}]\u3002\u89C4\u5219\u5185\u5BB9\u4E3A\uFF1A{1}\u3002

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:265
# args: JSONObjectUtil.toJsonString(msg.getRules().get(j))
rule\ should\ not\ be\ duplicated.\ rule\ dump\:\ %s = \u89C4\u5219\u4E0D\u5E94\u8BE5\u91CD\u590D\u3002\u89C4\u5219\u5185\u5BB9\u4E3A\uFF1A{0}\u3002

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:303
# args: JSONObjectUtil.toJsonString(sao),svo.getRemoteSecurityGroupUuid()
rule\ exist.\ rule\ dump\:\ %s,\ remoteSecurityGroupUuid\:[%s] = \u89C4\u5219\u5DF2\u5B58\u5728\uFF0C\u89C4\u5219\u5185\u5BB9\u4E3A:{0}\uFF0C\u6E90\u5B89\u5168\u7EC4[uuid:{1}]

# at: src/main/java/org/zstack/network/manage/DhcpExtension.java:227
# args: vm.getUuid(),errorCode
unable\ to\ change\ the\ VM[uuid\:%s]'s\ default\ L3\ network\ in\ the\ DHCP\ backend,\ %s.\ You\ may\ need\ to\ reboot\ the\ VM\ to\ use\ the\ new\ default\ L3\ network\ setting = \u65E0\u6CD5\u5728DHCP\u5C42\u9762\u6539\u53D8\u4E91\u4E3B\u673A[uuid:{0}]\u7684\u9ED8\u8BA4L3\u7F51\u7EDC\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{1}\u3002\u60A8\u53EF\u80FD\u9700\u8981\u91CD\u542F\u8BE5\u4E91\u4E3B\u673A\u4EE5\u89E3\u51B3\u95EE\u9898\u3002

# at: src/main/java/org/zstack/network/manage/NetworkServiceApiInterceptor.java:41
# args: 
networkServices\ cannot\ be\ empty = \u7F51\u7EDC\u670D\u52A1(networkServices)\u4E0D\u80FD\u4E3A\u7A7A\u3002

# at: src/main/java/org/zstack/network/manage/NetworkServiceApiInterceptor.java:62
# args: puuid
network\ service\ for\ provider[uuid\:%s]\ must\ be\ specified = \u670D\u52A1\u63D0\u4F9B\u5668[uuid:{0}]\u7684\u7F51\u7EDC\u670D\u52A1\u5FC5\u987B\u88AB\u6307\u5B9A\u3002

# at: src/main/java/org/zstack/network/manage/NetworkServiceApiInterceptor.java:67
# args: puuid
cannot\ find\ network\ service\ provider[uuid\:%s]\ or\ it\ provides\ no\ services = \u65E0\u6CD5\u627E\u5230\u7F51\u7EDC\u670D\u52A1\u63D0\u4F9B\u5668[uuid:{0}]\u6216\u5B83\u6CA1\u6709\u63D0\u4F9B\u4EFB\u4F55\u670D\u52A1\u3002

# at: src/main/java/org/zstack/network/manage/NetworkServiceApiInterceptor.java:81
# args: puuid,notSupported
network\ service\ provider[uuid\:%s]\ doesn't\ provide\ services%s = \u7F51\u7EDC\u670D\u52A1\u63D0\u4F9B\u5668[uuid:{0}]\u65E0\u6CD5\u63D0\u4F9B\u670D\u52A1{1}\u3002

# at: src/main/java/org/zstack/network/manage/NetworkServiceApiInterceptor.java:100
# args: type,msg.getL3NetworkUuid()
there\ has\ been\ a\ network\ service[%s]\ attached\ to\ L3\ network[uuid\:%s] = \u5DF2\u7ECF\u6709\u4E00\u4E2A\u7F51\u7EDC\u670D\u52A1[{0}]\u88AB\u6302\u8F7D\u5230L3\u7F51\u7EDC[uuid:{1}]\u3002

# at: src/main/java/org/zstack/network/manage/NetworkServiceManagerImpl.java:369
# args: l3NetworkUuid,serviceType
L3Network[uuid\:%s]\ doesn't\ have\ network\ service[type\:%s]\ enabled\ or\ no\ provider\ provides\ this\ network\ service = L3\u7F51\u7EDC[uuid:{0}]\u4E0A\u6CA1\u6709\u7F51\u7EDC\u670D\u52A1[type:{1}]\u88AB\u542F\u7528\u6216\u6CA1\u6709\u670D\u52A1\u63D0\u4F9B\u5668\u63D0\u4F9B\u8BE5\u7F51\u7EDC\u670D\u52A1\u3002

# at: src/main/java/org/zstack/network/manage/NetworkServiceManagerImpl.java:499
# args: spec.getVmInventory().getUuid(),l3.getUuid(),errorCode
unable\ to\ release\ a\ network\ service\ of\ the\ VM[uuid\:%s]\ when\ rolling\ back\ an\ attached\ L3\ network[uuid\:\ %s],\ %s.\ You\ may\ need\ to\ reboot\ the\ VM\ to\ fix\ the\ issue = \u672A\u80FD\u91CA\u653E\u4E91\u4E3B\u673A[uuid:{0}]\u7684\u4E00\u4E2A\u7F51\u7EDC\u670D\u52A1\uFF0C\u53D1\u751F\u9519\u8BEF\u7684\u64CD\u4F5C\u4E3A\u56DE\u6EDA\u4E00\u4E2A\u5DF2\u7ECF\u6302\u8F7D\u7684L3\u7F51\u7EDC[uuid: {1}]\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{2}\u3002\u60A8\u53EF\u80FD\u9700\u8981\u91CD\u542F\u8BE5\u4E91\u4E3B\u673A\u4EE5\u89E3\u51B3\u95EE\u9898\u3002

# at: src/main/java/org/zstack/network/manage/eip/EipApiInterceptor.java:66
# args: 
either\ eipUuid\ or\ vipUuid\ must\ be\ set = eipUuid\u6216vipUuid\u5FC5\u987B\u6709\u4E00\u4E2A\u88AB\u6307\u5B9A\u3002

# at: src/main/java/org/zstack/network/manage/eip/EipApiInterceptor.java:78
# args: msg.getEipUuid()
eip[uuid\:%s]\ is\ not\ in\ state\ of\ Enabled,\ cannot\ get\ attachable\ vm\ nic = eip[uuid:{0}]\u6CA1\u6709\u88AB\u542F\u7528\uFF0C\u65E0\u6CD5\u83B7\u53D6\u53EF\u6302\u8F7D\u7684\u865A\u62DF\u673A\u7F51\u5361\u3002

# at: src/main/java/org/zstack/network/manage/eip/EipApiInterceptor.java:94
# args: msg.getEipUuid(),vmNicUuid
eip[uuid\:%s]\ has\ attached\ to\ another\ vm\ nic[uuid\:%s],\ can't\ attach\ again = eip[uuid:{0}]\u5DF2\u7ECF\u88AB\u6302\u8F7D\u5230\u53E6\u5916\u4E00\u53F0\u865A\u62DF\u673A\u7F51\u5361[uuid:{1}]\uFF0C\u65E0\u6CD5\u518D\u6B21\u6302\u8F7D\u3002

# at: src/main/java/org/zstack/network/manage/eip/EipApiInterceptor.java:103
# args: msg.getEipUuid(),EipState.Enabled,state
eip[uuid\:\ %s]\ can\ only\ be\ attached\ when\ state\ is\ %s,\ current\ state\ is\ %s = eip[uuid:{0}]\u53EA\u6709\u5728\u72B6\u6001(state)\u4E3A{1}\u7684\u60C5\u51B5\u4E0B\u53EF\u4EE5\u88AB\u6302\u8F7D\uFF0C\u5F53\u524D\u72B6\u6001\u662F{2}\u3002

# at: src/main/java/org/zstack/network/manage/eip/EipApiInterceptor.java:123
# args: msg.getVmNicUuid(),msg.getEipUuid()
guest\ l3Network\ of\ vm\ nic[uuid\:%s]\ and\ vip\ l3Network\ of\ EIP[uuid\:%s]\ are\ the\ same\ network = \u865A\u62DF\u673A\u7F51\u5361[uuid:{0}]\u7684\u5BA2\u6237L3\u7F51\u7EDC\uFF0C\u548CEIP[uuid:{1}]\u7684\u865A\u62DFip L3\u7F51\u7EDC\u662F\u540C\u4E00\u4E2A\u7F51\u7EDC\u3002

# at: src/main/java/org/zstack/network/manage/eip/EipApiInterceptor.java:137
# args: msg.getUuid()
eip[uuid\:%s]\ has\ not\ attached\ to\ any\ vm\ nic = eip[uuid:{0}]\u8FD8\u6CA1\u6709\u88AB\u6302\u8F7D\u5230\u4EFB\u610F\u865A\u62DF\u673A\u7F51\u5361\u3002

# at: src/main/java/org/zstack/network/manage/eip/EipApiInterceptor.java:149
# args: eipIp,gw,netmask,vmNicUuid
overlap\ public\ and\ private\ subnets.\ The\ subnet\ of\ EIP[%s]\ is\ an\ overlap\ with\ the\ subnet[%s/%s]\ of\ the\ VM\ nic[uuid\:\ %s]. = \u516C\u5171\u7F51\u7EDC\u548C\u79C1\u6709\u7F51\u7EDC\u7684\u5B50\u7F51\u91CD\u53E0\u3002EIP[{0}]\u7684\u5B50\u7F51\u4E0E\u865A\u62DF\u673A\u7F51\u5361[{uuid:3}]\u7684\u5B50\u7F51[{1}/{2}]\u91CD\u53E0\u3002

# at: src/main/java/org/zstack/network/manage/eip/EipApiInterceptor.java:172
# args: vmUuid,vip.getL3NetworkUuid(),vip.getUuid(),vip.getName(),vip.getIp()
the\ vm[uuid\:%s]\ that\ the\ EIP\ is\ about\ to\ attach\ is\ already\ on\ the\ public\ network[uuid\:%s]\ from\ which\ the\ vip[uuid\:%s,\ name\:%s,\ ip\:%s]\ comes = EIP\u5C06\u8981\u6302\u8F7D\u5230\u7684\u865A\u62DF\u673A[uuid:{0}]\u5DF2\u7ECF\u5904\u4E8E\u516C\u5171\u7F51\u7EDC[uuid:{1}]\u4E0A\uFF0C\u8BE5\u7F51\u7EDC\u4E0A\u5DF2\u6709vip[uuid:{2}, name:{3}, ip:{4}]\u3002

# at: src/main/java/org/zstack/network/manage/eip/EipApiInterceptor.java:180
# args: msg.getVipUuid(),vip.getUseFor()
vip[uuid\:%s]\ has\ been\ occupied\ other\ network\ service\ entity[%s] = vip[uuid:{0}]\u5DF2\u7ECF\u88AB\u5176\u4ED6\u7F51\u7EDC\u670D\u52A1\u5B9E\u4F53[{1}]\u5360\u7528\u3002

# at: src/main/java/org/zstack/network/manage/eip/EipApiInterceptor.java:184
# args: msg.getVipUuid(),VipState.Enabled,vip.getState()
vip[uuid\:%s]\ is\ not\ in\ state[%s],\ current\ state\ is\ %s = vip[uuid:{0}]\u4E0D\u5904\u4E8E\u72B6\u6001[{1}]\u4E2D\uFF0C\u5F53\u524D\u72B6\u6001[{2}]\u3002

# at: src/main/java/org/zstack/network/manage/eip/EipManagerImpl.java:1076
# args: l3.getUuid(),l3.getName(),vm.getUuid(),vm.getName()
unable\ to\ attach\ the\ L3\ network[uuid\:%s,\ name\:%s]\ to\ the\ vm[uuid\:%s,\ name\:%s],\ because\ the\ L3\ network\ is\ providing\ EIP\ to\ one\ of\ the\ vm's\ nic = \u65E0\u6CD5\u5C06L3\u7F51\u7EDC[uuid:{0}, name:{1}]\u6302\u8F7D\u5230\u865A\u62DF\u673A[uuid:{2}, name:{3}]\uFF0C\u56E0\u4E3AL3\u7F51\u7EDC\u6B63\u5728\u4E3A\u865A\u62DF\u673A\u4E0A\u7684\u4E00\u5757\u7F51\u5361\u63D0\u4F9BEIP\u3002

# at: src/main/java/org/zstack/network/manage/flat/FlatDhcpBackend.java:242
# args: 
l3\ network\ uuid\ cannot\ be\ null = L3\u7F51\u7EDC\u7684uuid\u4E0D\u80FD\u4E3A\u7A7A\u3002

# at: src/main/java/org/zstack/network/manage/flat/FlatDhcpBackend.java:274
# args: msg.getL3NetworkUuid()
Cannot\ find\ DhcpIp\ for\ l3\ network[uuid\:%s] = \u65E0\u6CD5\u4E3AL3\u7F51\u7EDC[uuid:{0}]\u627E\u5230DHCP IP\u3002

# at: src/main/java/org/zstack/network/manage/flat/FlatDhcpBackend.java:565
# args: inv.getUuid(),destHostUuid
cannot\ configure\ DHCP\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = \u65E0\u6CD5\u4E3A\u76EE\u6807\u7269\u7406\u673A[uuid:{1}]\u4E0A\u7684\u865A\u62DF\u673A[uuid:{0}]\u914D\u7F6EDHCP\u3002

# at: src/main/java/org/zstack/network/manage/flat/FlatDhcpBackend.java:748
# args: vm.getUuid(),applyHostUuidForRollback,errorCode
failed\ to\ re-apply\ DHCP\ configuration\ of\ the\ vm[uuid\:%s]\ to\ the\ host[uuid\:%s],\ %s.\ You\ may\ need\ to\ reboot\ the\ VM\ to\ make\ the\ DHCP\ works = \u672A\u80FD\u5411\u7269\u7406\u673A[uuid:{1}]\u91CD\u65B0\u5E94\u7528\u4E91\u4E3B\u673A[uuid:{0}]\u7684DHCP\u914D\u7F6E\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{2}\u3002\u60A8\u53EF\u80FD\u9700\u8981\u91CD\u542F\u8BE5\u4E91\u4E3B\u673A\u4EE5\u89E3\u51B3\u95EE\u9898\u3002

# at: src/main/java/org/zstack/network/manage/flat/FlatEipBackend.java:131
# args: eips.stream().map( e -> e.vip).collect(Collectors.toList()),inv.getUuid(),inv.getName(),inv.getHostUuid(),errorCode
after\ migration,\ failed\ to\ apply\ EIPs[uuids\:%s]\ to\ the\ vm[uuid\:%s,\ name\:%s]\ on\ the\ destination\ host[uuid\:%s],\ %s = \u8FC1\u79FB\u540E\uFF0C\u672A\u80FD\u5411\u4E91\u4E3B\u673A\uFF08VM\uFF09[uuid:{1}, name:{2}]\u5E94\u7528\u5F39\u6027IP\uFF08EIP\uFF09[uuids:{0}]\uFF0C\u76EE\u6807\u7269\u7406\u673A\u4E3A[uuid:{3}]\uFF0C\u9519\u8BEF\u539F\u56E0\u4E3A\uFF1A{4}\u3002

# at: src/main/java/org/zstack/network/manage/flat/FlatEipBackend.java:283
# args: eips.stream().map( e -> e.vip).collect(Collectors.toList()),vm.getUuid(),vm.getName(),applyHostUuidForRollback,errorCode
after\ migration,\ failed\ to\ apply\ EIPs[uuids\:%s]\ to\ the\ vm[uuid\:%s,\ name\:%s]\ on\ the\ destination\ host[uuid\:%s],\ %s.You\ may\ need\ to\ reboot\ the\ VM\ to\ resolve\ the\ issue = \u8FC1\u79FB\u540E\uFF0C\u672A\u80FD\u5411\u4E91\u4E3B\u673A\uFF08VM\uFF09[uuid:{1}, name:{2}]\u5E94\u7528\u5F39\u6027IP\uFF08EIP\uFF09[uuids:{0}]\uFF0C\u76EE\u6807\u7269\u7406\u673A\u4E3A[uuid:{3}]\uFF0C\u9519\u8BEF\u539F\u56E0\u4E3A\uFF1A{4}\u3002\u60A8\u53EF\u80FD\u9700\u8981\u91CD\u542F\u8BE5\u4E91\u4E3B\u673A\u4EE5\u89E3\u51B3\u95EE\u9898\u3002

# at: src/main/java/org/zstack/network/manage/flat/FlatEipBackend.java:529
# args: vmUuid,vm.getState()
unable\ to\ apply\ the\ EIP\ operation\ for\ the\ the\ vm[uuid\:%s,\ state\:%s],\ because\ cannot\ find\ the\ VM's\ hostUUid = \u65E0\u6CD5\u4E3A\u865A\u62DF\u673A[uuid:{0}, state:{1}]\u5E94\u7528EIP\u64CD\u4F5C\uFF0C\u56E0\u4E3A\u65E0\u6CD5\u627E\u5230\u8BE5\u865A\u62DF\u673A\u7684\u7269\u7406\u673Auuid(hostUuid)\u3002

# at: src/main/java/org/zstack/network/manage/flat/FlatUserdataBackend.java:341
# args: struct.getHostUuid()
host[uuid\:%s]\ is\ not\ connected = \u7269\u7406\u673A[uuid:{0}]\u672A\u8FDE\u63A5\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerApiInterceptor.java:95
# args: msg.getVipUuid(),lbuuid
the\ vip[uuid\:%s]\ is\ occupied\ by\ another\ load\ balancer[uuid\:%s] = vip[uuid:{0}]\u5DF2\u7ECF\u88AB\u53E6\u4E00\u4E2A\u8D1F\u8F7D\u5747\u8861\u5668[uuid:{1}]\u5360\u7528\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerApiInterceptor.java:99
# args: msg.getVipUuid(),useFor
the\ vip[uuid\:%s]\ is\ occupied\ by\ another\ service[%s] = vip[uuid:{0}]\u5DF2\u7ECF\u88AB\u53E6\u4E00\u4E2A\u670D\u52A1[uuid:{1}]\u5360\u7528\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerApiInterceptor.java:111
# args: msg.getVmNicUuids(),l3Uuids
vm\ nics[uuids\:%s]\ are\ not\ on\ the\ same\ L3\ network.\ they\ are\ on\ L3\ networks[uuids\:%s] = \u865A\u62DF\u673A\u7F51\u5361[uuids:{0}]\u4E0D\u5728\u540C\u4E00\u4E2AL3\u7F51\u7EDC\u4E0A\u3002\u5B83\u4EEC\u5206\u522B\u5904\u4E8E[uuids:{1}]\u8FD9\u4E9BL3\u7F51\u7EDC\u4E0A\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerApiInterceptor.java:125
# args: l3Uuid,LoadBalancerConstants.LB_NETWORK_SERVICE_TYPE_STRING
the\ L3\ network[uuid\:%s]\ of\ the\ vm\ nics\ has\ no\ network\ service[%s]\ enabled = \u865A\u62DF\u673A\u7F51\u5361\u6240\u5728\u7684L3\u7F51\u7EDC[uuid:{0}]\u6CA1\u6709\u542F\u7528\u7F51\u7EDC\u670D\u52A1[{1}]\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerApiInterceptor.java:134
# args: existingNics,msg.getListenerUuid()
the\ vm\ nics[uuid\:%s]\ are\ already\ on\ the\ load\ balancer\ listener[uuid\:%s] = \u865A\u62DF\u673A\u7F51\u5361[uuid:{0}]\u5DF2\u7ECF\u5904\u4E8E\u8D1F\u8F7D\u5747\u8861\u76D1\u542C\u5668[uuid:{1}]\u4E0A\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerApiInterceptor.java:227
# args: msg.getLoadBalancerPort(),luuid
conflict\ loadBalancerPort[%s],\ a\ listener[uuid\:%s]\ has\ used\ that\ port = \u51B2\u7A81\u7684\u8D1F\u8F7D\u5747\u8861\u5668\u7AEF\u53E3(loadBalancerPort)[{0}]\uFF0C\u4E00\u4E2A\u76D1\u542C\u5668[uuid:{1}]\u5DF2\u7ECF\u4F7F\u7528\u4E86\u8BE5\u7AEF\u53E3\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerApiInterceptor.java:236
# args: msg.getInstancePort(),luuid
conflict\ instancePort[%s],\ a\ listener[uuid\:%s]\ has\ used\ that\ port = \u51B2\u7A81\u7684\u5B9E\u4F8B\u7AEF\u53E3(instancePort)[{0}]\uFF0C\u4E00\u4E2A\u76D1\u542C\u5668[uuid:{1}]\u5DF2\u7ECF\u4F7F\u7528\u4E86\u8BE5\u7AEF\u53E3\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerBase.java:902
# args: msg.getVmNicUuids().get(0)
the\ L3\ network\ of\ vm\ nic[uuid\:%s]\ doesn't\ have\ load\ balancer\ service\ enabled = \u865A\u62DF\u673A\u7F51\u5361[uuid:{0}]\u7684L3\u7F51\u7EDC\u6CA1\u6709\u542F\u7528\u8D1F\u8F7D\u5747\u8861\u670D\u52A1\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerBase.java:929
# args: self.getUuid(),self.getProviderType(),msg.getVmNicUuids().get(0),providerType
service\ provider\ type\ mismatching.\ The\ load\ balancer[uuid\:%s]\ is\ provided\ by\ the\ service\ provider[type\:%s],\ but\ the\ L3\ network\ of\ vm\ nic[uuid\:%s]\ is\ enabled\ with\ the\ service\ provider[type\:\ %s] = \u7F51\u7EDC\u670D\u52A1\u63D0\u4F9B\u5668\u7684\u7C7B\u578B\u4E0D\u5339\u914D\u3002\u8D1F\u8F7D\u5747\u8861\u5668[uuid:{0}]\u7531\u670D\u52A1\u63D0\u4F9B\u5668[type:{1}]\u63D0\u4F9B\uFF0C\u4F46\u865A\u62DF\u673A\u7F51\u5361[uuid:{2}]\u7684L3\u7F51\u7EDC\u542F\u7528\u670D\u52A1\u5668\u7C7B\u578B\u4E3A[type: {3}]\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerManagerImpl.java:91
# args: msg.getLoadBalancerUuid()
cannot\ find\ the\ load\ balancer[uuid\:%s] = \u65E0\u6CD5\u627E\u5230\u8D1F\u8F7D\u5747\u8861\u5668[uuid:{0}]\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerManagerImpl.java:230
# args: tag.getTag()
cannot\ delete\ the\ system\ tag[%s].\ The\ load\ balancer\ plugin\ relies\ on\ it,\ you\ can\ only\ update\ it = \u65E0\u6CD5\u5220\u9664\u7CFB\u7EDF\u6807\u7B7E[{0}]\u3002\u8D1F\u8F7D\u5747\u8861\u5668\u63D2\u4EF6\u4F9D\u8D56\u4E8E\u8BE5\u6807\u7B7E\uFF0C\u8BE5\u6807\u7B7E\u53EA\u80FD\u88AB\u66F4\u65B0\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerManagerImpl.java:250
# args: algorithm,LoadBalancerConstants.BALANCE_ALGORITHMS
invalid\ balance\ algorithm[%s],\ valid\ algorithms\ are\ %s = \u65E0\u6548\u7684\u5747\u8861\u7B97\u6CD5[{0}]\uFF0C\u6709\u6548\u7684\u4E3A[{1}]\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerManagerImpl.java:264
# args: systemTag,s
invalid\ unhealthy\ threshold[%s],\ %s\ is\ not\ a\ number = \u65E0\u6548\u7684\u4E0D\u5065\u5EB7\u9608\u503C[{0}]\uFF0C[{1}]\u4E0D\u662F\u4E00\u4E2A\u6570\u5B57\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerManagerImpl.java:278
# args: systemTag,s
invalid\ healthy\ threshold[%s],\ %s\ is\ not\ a\ number = \u65E0\u6548\u7684\u5065\u5EB7\u9608\u503C[{0}]\uFF0C[{1}]\u4E0D\u662F\u4E00\u4E2A\u6570\u5B57\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerManagerImpl.java:292
# args: systemTag,s
invalid\ healthy\ timeout[%s],\ %s\ is\ not\ a\ number = \u65E0\u6548\u7684\u5065\u5EB7\u8D85\u65F6[{0}]\uFF0C[{1}]\u4E0D\u662F\u4E00\u4E2A\u6570\u5B57\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerManagerImpl.java:306
# args: systemTag,s
invalid\ connection\ idle\ timeout[%s],\ %s\ is\ not\ a\ number = \u65E0\u6548\u7684\u8FDE\u63A5\u7A7A\u95F2\u8D85\u65F6[{0}]\uFF0C[{1}]\u4E0D\u662F\u4E00\u4E2A\u6570\u5B57\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerManagerImpl.java:320
# args: systemTag,s
invalid\ health\ check\ interval[%s],\ %s\ is\ not\ a\ number = \u65E0\u6548\u7684\u5065\u5EB7\u68C0\u67E5\u95F4\u9694[{0}]\uFF0C[{1}]\u4E0D\u662F\u4E00\u4E2A\u6570\u5B57\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerManagerImpl.java:334
# args: systemTag,s
invalid\ max\ connection[%s],\ %s\ is\ not\ a\ number = \u65E0\u6548\u7684\u6700\u5927\u8FDE\u63A5[{0}]\uFF0C[{1}]\u4E0D\u662F\u4E00\u4E2A\u6570\u5B57\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerManagerImpl.java:347
# args: systemTag
invalid\ health\ target[%s],\ the\ format\ is\ targetCheckProtocol\:port,\ for\ example,\ tcp\:default = \u65E0\u6548\u7684\u5065\u5EB7\u68C0\u67E5\u76EE\u6807[{0}]\uFF0C\u683C\u5F0F\u4E3A[\u76EE\u6807\u68C0\u67E5\u534F\u8BAE(targetCheckProtocol):\u7AEF\u53E3(port)], \u4F8B\u5982[tcp:default]\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerManagerImpl.java:352
# args: systemTag,protocol,LoadBalancerConstants.HEALTH_CHECK_TARGET_PROTOCOLS
invalid\ health\ target[%s],\ the\ target\ checking\ protocol[%s]\ is\ invalid,\ valid\ protocols\ are\ %s = \u65E0\u6548\u7684\u5065\u5EB7\u68C0\u67E5\u76EE\u6807[{0}]\uFF0C\u76EE\u6807\u68C0\u67E5\u534F\u8BAE\u65E0\u6548[{1}]\uFF0C\u6709\u6548\u7684\u4E3A[{2}]\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerManagerImpl.java:364
# args: systemTag,port
invalid\ invalid\ health\ target[%s],\ port[%s]\ is\ not\ a\ number = \u65E0\u6548\u7684\u5065\u5EB7\u68C0\u67E5\u76EE\u6807[{0}]\uFF0C\u7AEF\u53E3[{1}]\u4E0D\u662F\u4E00\u4E2A\u6570\u5B57\u3002

# at: src/main/java/org/zstack/network/manage/lb/LoadBalancerManagerImpl.java:361
# args: systemTag,port
invalid\ invalid\ health\ target[%s],\ port[%s]\ is\ not\ in\ the\ range\ of\ [1,\ 65535] = \u65E0\u6548\u7684\u65E0\u6548\u5065\u5EB7\u68C0\u67E5\u76EE\u6807[{0}]\uFF0C\u7AEF\u53E3[{1}]\u4E0D\u5728\u8303\u56F4[1, 65535]\u5185\u3002

# at: src/main/java/org/zstack/network/manage/portforwarding/PortForwardingApiInterceptor.java:193
# args: msg.getVmNicUuid(),msg.getVipUuid()
guest\ l3Network\ of\ vm\ nic[uuid\:%s]\ and\ vip\ l3Network\ of\ vip[uuid\:\ %s]\ are\ the\ same\ network = \u865A\u62DF\u673A\u7F51\u5361[uuid:{0}]\u7684\u5BA2\u6237L3\u7F51\u7EDC\u548C\u865A\u62DFIP[uuid:{1}]\u7684\u865A\u62DFIP L3\u7F51\u7EDC\u662F\u540C\u4E00\u4E2A\u7F51\u7EDC\u3002

# at: src/main/java/org/zstack/network/manage/portforwarding/PortForwardingApiInterceptor.java:64
# args: msg.getRuleUuid(),state
Port\ forwarding\ rule[uuid\:%s]\ is\ not\ in\ state\ of\ Enabled,\ current\ state\ is\ %s = \u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219[uuid:{0}]\u672A\u542F\u7528\uFF0C\u5F53\u524D\u72B6\u6001[{1}]\u3002

# at: src/main/java/org/zstack/network/manage/portforwarding/PortForwardingApiInterceptor.java:80
# args: msg.getUuid()
port\ forwarding\ rule\ rule[uuid\:%s]\ has\ not\ been\ attached\ to\ any\ vm\ nic,\ can't\ detach = \u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219[uuid:{0}]\u5C1A\u672A\u88AB\u6302\u8F7D\u5230\u4EFB\u4F55\u865A\u62DF\u673A\u7F51\u5361\uFF0C\u65E0\u6CD5\u5378\u8F7D\u3002

# at: src/main/java/org/zstack/network/manage/portforwarding/PortForwardingApiInterceptor.java:92
# args: msg.getRuleUuid(),vmNicUuid
port\ forwarding\ rule[uuid\:%s]\ has\ been\ attached\ to\ vm\ nic[uuid\:%s],\ can't\ attach\ again = \u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219[uuid:{0}]\u5DF2\u7ECF\u88AB\u6302\u8F7D\u5230\u865A\u62DF\u673A\u7F51\u5361[uuid:{1}]\uFF0C\u65E0\u6CD5\u518D\u6B21\u6302\u8F7D\u3002

# at: src/main/java/org/zstack/network/manage/portforwarding/PortForwardingApiInterceptor.java:100
# args: msg.getRuleUuid(),state
port\ forwarding\ rule[uuid\:%s]\ is\ not\ in\ state\ of\ Enabled,\ \ current\ state\ is\ %s.\ A\ rule\ can\ only\ be\ attached\ when\ its\ state\ is\ Enabled = \u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219[uuid:{0}]\u6CA1\u6709\u542F\u7528\uFF0C\u5F53\u524D\u72B6\u6001\u4E3A{1}\u3002\u4E00\u4E2A\u89C4\u5219\u53EA\u80FD\u5728\u542F\u7528\u65F6\u88AB\u6302\u8F7D\u3002

# at: src/main/java/org/zstack/network/manage/portforwarding/PortForwardingApiInterceptor.java:116
# args: msg.getVmNicUuid(),msg.getRuleUuid()
guest\ l3Network\ of\ vm\ nic[uuid\:%s]\ and\ vip\ l3Network\ of\ port\ forwarding\ rule[uuid\:%s]\ are\ the\ same\ network = \u865A\u62DF\u673A\u7F51\u5361[uuid:{0}]\u7684\u5BA2\u6237L3\u7F51\u7EDC\u548C\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219[uuid:{1}]\u7684VIP L3\u7F51\u7EDC\u662F\u540C\u4E00\u4E2A\u7F51\u7EDC\u3002

# at: src/main/java/org/zstack/network/manage/portforwarding/PortForwardingApiInterceptor.java:197
# args: msg.getVipUuid(),peerL3Uuid,msg.getVmNicUuid(),nicL3Uuid
the\ VIP[uuid\:%s]\ is\ already\ bound\ the\ a\ guest\ L3\ network[uuid\:%s],\ but\ the\ VM\ nic[uuid\:%s]\ is\ on\ another\ guest\ L3\ network[uuid\:%s] = VIP[uuid:{0}]\u5DF2\u7ECF\u7ED1\u5B9A\u5230\u4E00\u4E2A\u7528\u6237L3\u7F51\u7EDC[uuid:{1}]\uFF0C\u4F46\u662F\u865A\u62DF\u673A\u7F51\u5361[uuid:{2}]\u5728\u53E6\u4E00\u4E2AL3\u7F51\u7EDC[uuid:{3}]\u4E0A\u3002

# at: src/main/java/org/zstack/network/manage/portforwarding/PortForwardingApiInterceptor.java:157
# args: msg.getVipPortStart(),msg.getVipPortEnd(),msg.getPrivatePortStart(),msg.getPrivatePortEnd()
for\ range\ port\ forwarding,\ the\ port\ range\ size\ must\ match;\ vip\ range[%s,\ %s]'s\ size\ doesn't\ match\ range[%s,\ %s]'s\ size = \u5BF9\u4E8E\u8303\u56F4\u7AEF\u53E3\u8F6C\u53D1\uFF0C\u7AEF\u53E3\u8303\u56F4\u5927\u5C0F\u5FC5\u987B\u5339\u914D\uFF1BVIP\u8303\u56F4[{0}, {1}]\u7684\u5927\u5C0F\u4E0D\u5339\u914D\u8303\u56F4[{2}, {3}]\u7684\u5927\u5C0F\u3002

# at: src/main/java/org/zstack/network/manage/portforwarding/PortForwardingApiInterceptor.java:164
# args: msg.getAllowedCidr()
invalid\ CIDR[%s] = \u65E0\u6548\u7684CIDR[{0}]

# at: src/main/java/org/zstack/network/manage/portforwarding/PortForwardingApiInterceptor.java:174
# args: vipStart,vipEnd,vo.getUuid(),vo.getVipPortStart(),vo.getVipPortEnd()
vip\ port\ range[vipStartPort\:%s,\ vipEndPort\:%s]\ overlaps\ with\ rule[uuid\:%s,\ vipStartPort\:%s,\ vipEndPort\:%s] = \u865A\u62DFIP\uFF08vip\uFF09\u7AEF\u53E3\u8303\u56F4[vipStartPort:{0}, vipEndPort:{1}]\u4E0E\u89C4\u5219[uuid:{2}, vipStartPort:{3}, vipEndPort:{4}]\u91CD\u53E0\u3002

# at: src/main/java/org/zstack/network/manage/portforwarding/PortForwardingApiInterceptor.java:242
# args: vm.getName(),vm.getUuid(),vipUuid
the\ VM[name\:%s\ uuid\:%s]\ already\ has\ port\ forwarding\ rules\ that\ have\ different\ VIPs\ than\ the\ one[uuid\:%s] = \u865A\u62DF\u673A[name:{0} uuid:{1}]\u5DF2\u7ECF\u6709\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219\uFF0C\u4E14\u4E0E[uuid:{2}]\u6709\u4E0D\u540C\u7684VIPs\u3002

# at: src/main/java/org/zstack/network/manage/vip/VipApiInterceptor.java:50
# args: msg.getAllocatorStrategy()
unsupported\ ip\ allocation\ strategy[%s] = \u4E0D\u652F\u6301\u7684ip\u5206\u914D\u7B56\u7565[{0}]

# at: src/main/java/org/zstack/network/manage/vip/VipApiInterceptor.java:55
# args: msg.getRequiredIp()
requiredIp[%s]\ is\ not\ in\ valid\ IPv4\ mediaType = \u8BF7\u6C42\u7684ip[{0}]\u4E0D\u662F\u6709\u6548\u7684IPv4\u5730\u5740\u3002

# at: src/main/java/org/zstack/network/manage/vip/VipApiInterceptor.java:65
# args: msg.getRequiredIp(),msg.getL3NetworkUuid()
there\ is\ already\ a\ vip[%s]\ on\ l3Network[uuid\:%s] = \u5DF2\u6709\u4E00\u4E2Avip[{0}]\u5728L3\u7F51\u7EDC[uuid:{1}]\u4E0A\u3002

# at: src/main/java/org/zstack/network/manage/vip/VipBase.java:179
# args: self.getUuid(),self.getName(),self.getIp(),self.getServiceProvider()
service\ provider\ of\ the\ vip[uuid\:%s,\ name\:%s,\ ip\:\ %s]\ has\ been\ set\ to\ %s = vip[uuid:{0}, name:{1}, ip: {2}]\u7684\u670D\u52A1\u63D0\u4F9B\u5668\u5DF2\u7ECF\u88AB\u8BBE\u7F6E\u6210[{3}]\u3002

# at: src/main/java/org/zstack/network/manage/vip/VipBase.java:189
# args: self.getUuid(),self.getName(),self.getIp(),self.getUseFor()
the\ field\ 'useFor'\ of\ the\ vip[uuid\:%s,\ name\:%s,\ ip\:\ %s]\ has\ been\ set\ to\ %s = vip[uuid:{0}, name:{1}, ip: {2}]\u7684useFor\u5B57\u6BB5\u5DF2\u7ECF\u88AB\u8BBE\u7F6E\u6210[{3}]\u3002

# at: src/main/java/org/zstack/network/manage/vip/VipBase.java:199
# args: self.getUuid(),self.getName(),self.getIp(),self.getPeerL3NetworkUuid()
the\ field\ 'peerL3NetworkUuid'\ of\ the\ vip[uuid\:%s,\ name\:%s,\ ip\:\ %s]\ has\ been\ set\ to\ %s = vip[uuid:{0}, name:{1}, ip: {2}]\u7684peerL3NetworkUuid\u5B57\u6BB5\u5DF2\u7ECF\u88AB\u8BBE\u7F6E\u6210[{3}]\u3002

# at: src/main/java/org/zstack/network/manage/vip/VipQosApiInterceptor.java:31
# args: msg.getVipUuid()
no\ qos\ about\ [vip\:%s]is\ setting = 

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:246
# args: self.getName(),self.getUuid(),self.getState()
the\ virtual\ router[name\:%s,\ uuid\:%s,\ current\ state\:%s]\ is\ not\ running,and\ cannot\ perform\ required\ operation.\ Please\ retry\ your\ operation\ later\ once\ it\ is\ running = \u4E91\u8DEF\u7531[name:{0}, uuid:{1}, current state:{2}]\u6CA1\u6709\u8FD0\u884C\uFF0C\u65E0\u6CD5\u6267\u884C\u8BF7\u6C42\u7684\u64CD\u4F5C\u3002\u8BF7\u5728\u5176\u542F\u52A8\u540E\u91CD\u8BD5\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouter.java:251
# args: self.getUuid(),getSelf().getStatus(),msg.getPath()
virtual\ router[uuid\:%s]\ is\ in\ status\ of\ %s\ that\ cannot\ make\ http\ call\ to\ %s = \u4E91\u8DEF\u7531[uuid:{0}]\u4E0D\u5904\u4E8E\u72B6\u6001{1}\u4E2D\uFF0C\u65E0\u6CD5\u5411{2}\u53D1\u9001http\u8C03\u7528\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouter.java:429
# args: info,vr.getUuid(),vr.getManagementNic().getIp(),rsp.getError()
unable\ to\ add\ nic[%s]\ to\ virtual\ router\ vm[uuid\:%s\ ip\:%s],\ because\ %s = \u65E0\u6CD5\u5411\u4E91\u8DEF\u7531\u8BBE\u5907[uuid:{1} ip:{2}]\u6DFB\u52A0\u7F51\u5361[{0}]\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{3}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouter.java:470
# args: info,vr.getUuid(),vr.getManagementNic().getIp(),rsp.getError()
unable\ to\ detach\ nic[%s]\ from\ virtual\ router\ vm[uuid\:%s\ ip\:%s],\ because\ %s = \u65E0\u6CD5\u4ECE\u4E91\u8DEF\u7531\u8BBE\u5907[uuid:{1} ip:{2}]\u4E0A\u5378\u8F7D\u7F51\u5361[{0}]\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{3}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouterApiInterceptor.java:130
# args: msg.getImageUuid(),type,ImageMediaType.RootVolumeTemplate
image[uuid\:%s]'s\ mediaType\ is\ %s,\ the\ mediaType\ of\ a\ virtual\ router\ image\ must\ be\ %s = \u955C\u50CF[uuid:{0}]\u7684mediaType\u4E3A{1}\uFF0C\u4E91\u8DEF\u7531\u7684mediaType\u5FC5\u987B\u4E3A{2}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouterApiInterceptor.java:136
# args: msg.getImageUuid(),format
image[uuid\:%s]\ is\ of\ format\ %s,\ cannot\ be\ used\ for\ virtual\ router = \u955C\u50CF[uuid:{0}]\u7684\u683C\u5F0F\u4E3A{1}\uFF0C\u65E0\u6CD5\u88AB\u7528\u4E8E\u4E91\u8DEF\u7531\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouterApiInterceptor.java:106
# args: msg.getManagementNetworkUuid(),msg.getZoneUuid()
management\ network[uuid\:%s]\ is\ not\ in\ the\ same\ zone[uuid\:%s]\ this\ offering\ is\ going\ to\ create = \u7BA1\u7406\u7F51\u7EDC[uuid:{0}]\u548C\u5C06\u8981\u521B\u5EFA\u7684\u89C4\u683C\u4E0D\u5904\u4E8E\u540C\u4E00\u4E2A\u533A\u57DF\uFF08zone\uFF09[uuid:{1}]\u4E2D\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouterApiInterceptor.java:119
# args: msg.getManagementNetworkUuid(),msg.getZoneUuid()
public\ network[uuid\:%s]\ is\ not\ in\ the\ same\ zone[uuid\:%s]\ this\ offering\ is\ going\ to\ create = \u516C\u5171\u7F51\u7EDC[uuid:{0}]\u548C\u5C06\u8981\u521B\u5EFA\u7684\u89C4\u683C\u4E0D\u5904\u4E8E\u540C\u4E00\u4E2A\u533A\u57DF\uFF08zone\uFF09[uuid:{1}]\u4E2D\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouterApiInterceptor.java:147
# args: msg.getPublicNetworkUuid()
the\ L3\ network[uuid\:\ %s]\ has\ the\ SNAT\ service\ enabled,\ it\ cannot\ be\ used\ as\ a\ public\ network = L3\u7F51\u7EDC[uuid: {0}]\u542F\u7528\u4E86SNAT\u670D\u52A1\uFF0C\u65E0\u6CD5\u88AB\u7528\u4F5C\u516C\u5171\u7F51\u7EDC\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouterApiInterceptor.java:145
# args: msg.getManagementNetworkUuid()
the\ L3\ network[uuid\:\ %s]\ has\ the\ SNAT\ service\ enabled,\ it\ cannot\ be\ used\ as\ a\ management\ network = L3\u7F51\u7EDC[uuid: {0}]\u542F\u7528\u4E86SNAT\u670D\u52A1\uFF0C\u65E0\u6CD5\u88AB\u7528\u4F5C\u7BA1\u7406\u7F51\u7EDC\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouterApiInterceptor.java:173
# args: managementNetworkUuid
the\ management\ network[uuid\:%s]\ doesn't\ have\ any\ IP\ range = \u7BA1\u7406\u7F51\u7EDC[uuid:{0}]\u4E0D\u5305\u542B\u4EFB\u4F55\u7684IP\u8303\u56F4\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouterApiInterceptor.java:175
# args: managementNetworkUuid,gateway
the\ management\ network[uuid\:%s,\ gateway\:%s]\ is\ not\ reachable = \u7BA1\u7406\u7F51\u7EDC[uuid:{0}, gateway:{1}]\u4E0D\u53EF\u62B5\u8FBE\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouterKvmBackend.java:108
# args: iso.getIsoPath(),vrSpec.getDestHost().getUuid(),vrSpec.getDestHost().getManagementIp(),iso.getVirtualRouterUuid(),rsp.getError()
failed\ to\ create\ VirtualRouterBootstrapIso[%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s]\ for\ virtual\ router[uuid\:%s],\ because\ %s = \u521B\u5EFA\u4E91\u8DEF\u7531\u5F15\u5BFC\u955C\u50CF\uFF08VirtualRouterBootstrapIso\uFF09[{0}]\u5931\u8D25\uFF0C\u8BE5\u64CD\u4F5C\u662F\u5728KVM\u7269\u7406\u673A[uuid:{1}, ip:{2}]\u4E0A\u4E3A\u4E91\u8DEF\u7531[uuid:{3}]\u6267\u884C\u7684\uFF0C\u539F\u56E0\u4E3A{4}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouterKvmBackend.java:142
# args: iso.getIsoPath(),hostUuid,iso.getVirtualRouterUuid(),rsp.getError()
failed\ to\ delete\ VirtualRouterBootstrapIso[%s]\ on\ kvm\ host[uuid\:%s]\ for\ virtual\ router[uuid\:%s],\ because\ %s = \u5220\u9664\u4E91\u8DEF\u7531\u5F15\u5BFC\u955C\u50CF\uFF08VirtualRouterBootstrapIso\uFF09[{0}]\u5931\u8D25\uFF0C\u8BE5\u64CD\u4F5C\u662F\u5728KVM\u7269\u7406\u673A[uuid:{1}]\u4E0A\u4E3A\u4E91\u8DEF\u7531[uuid:{2}]\u6267\u884C\u7684\uFF0C\u539F\u56E0\u4E3A{3}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouterManagerImpl.java:257
# args: 
cannot\ create\ virtual\ Router\ vm\ while\ virtual\ router\ network\ overlaps\ with\ private\ network\ in\ ip\  = \u5F53\u4E91\u8DEF\u7531\u7F51\u7EDC\u548C\u79C1\u6709\u7F51\u7EDCIP\u8303\u56F4\u6709\u91CD\u53E0\u65F6\uFF0C\u65E0\u6CD5\u521B\u5EFA\u4E91\u8DEF\u7531\u8BBE\u5907\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouterManagerImpl.java:650
# args: vr.getUuid(),l3Nw.getUuid(),vr.getState()
virtual\ router[uuid\:%s]\ for\ l3\ network[uuid\:%s]\ is\ not\ in\ Running\ state,\ current\ state\ is\ %s.\ We\ don't\ have\ HA\ feature\ now(it's\ coming\ soon),\ please\ restart\ it\ from\ UI\ and\ then\ try\ starting\ this\ vm\ again = L3\u7F51\u7EDC[uuid:{1}]\u4E0A\u7684\u4E91\u8DEF\u7531[uuid:{0}]\u4E0D\u5904\u4E8E\u8FD0\u884C\u72B6\u6001\uFF0C\u5F53\u524D\u72B6\u6001\u4E3A{2}\u3002\u76EE\u524D\u6211\u4EEC\u6CA1\u6709HA\u7279\u6027\uFF08\u5F88\u5FEB\u5C31\u4F1A\u6709\uFF09\uFF0C\u8BF7\u4ECE\u754C\u9762\u4E0A\u91CD\u542F\u5B83\uFF0C\u7136\u540E\u5C1D\u8BD5\u542F\u52A8\u865A\u62DF\u673A\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouterManagerImpl.java:921
# args: msg.getL3NetworkUuid()
failed\ tot\ attach\ virtual\ router\ network\ services\ to\ l3Network[uuid\:%s].\ When\ eip\ is\ selected,\ snat\ must\ be\ selected\ too = \u6302\u8F7D\u865A\u62DF\u8DEF\u7531\u7F51\u7EDC\u670D\u52A1\u5230L3\u7F51\u7EDC[uuid:{0}]\u5931\u8D25\u3002\u9009\u4E2DEIP\u670D\u52A1\u65F6\uFF0CSNAT\u670D\u52A1\u4E5F\u5FC5\u987B\u88AB\u9009\u4E2D\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/VirtualRouterManagerImpl.java:925
# args: msg.getL3NetworkUuid()
failed\ tot\ attach\ virtual\ router\ network\ services\ to\ l3Network[uuid\:%s].\ When\ port\ forwarding\ is\ selected,\ snat\ must\ be\ selected\ too = \u6302\u8F7D\u865A\u62DF\u8DEF\u7531\u7F51\u7EDC\u670D\u52A1\u5230L3\u7F51\u7EDC[uuid:{0}]\u5931\u8D25\u3002\u9009\u4E2D\u7AEF\u53E3\u8F6C\u53D1\u670D\u52A1\u65F6\uFF0CSNAT\u670D\u52A1\u4E5F\u5FC5\u987B\u88AB\u9009\u4E2D\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/dhcp/VirtualRouterDhcpBackend.java:120
# args: vr.getUuid(),vr.getManagementNic().getIp(),rsp.getError(),struct
unable\ to\ add\ dhcp\ entries\ to\ virtual\ router\ vm[uuid\:%s\ ip\:%s],\ because\ %s,\ dhcp\ entry[%s] = \u65E0\u6CD5\u5411\u4E91\u8DEF\u7531[uuid:{0} ip:{1}]\u6DFB\u52A0DHCP\u6761\u76EE\uFF0C\u56E0\u4E3A{2}\uFF0CDHCP\u6761\u76EE\u4E3A[{3}]\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/dhcp/VirtualRouterSyncDHCPOnStartFlow.java:175
# args: vr.getUuid(),vr.getManagementNic().getIp(),ret.getError()
unable\ to\ program\ dhcp\ entries\ served\ by\ virtual\ router[uuid\:%s,\ ip\:%s],\ %s = \u65E0\u6CD5\u6267\u884C\u7531\u4E91\u8DEF\u7531[uuid:{0}, ip:{1}]\u63D0\u4F9B\u7684DHCP\u6761\u76EE{2}.

# at: src/main/java/org/zstack/network/manage/virtualrouter/dns/VirtualRouterDnsBackend.java:193
# args: vr.getUuid(),vr.getManagementNic().getIp(),struct,l3.getUuid(),l3.getName(),ret.getError()
virtual\ router[uuid\:%s,\ ip\:%s]\ failed\ to\ configure\ dns%s\ for\ L3Network[uuid\:%s,\ name\:%s],\ %s = \u4E91\u8DEF\u7531[uuid:{0}, ip:{1}]\u672A\u80FD\u4E3AL3\u7F51\u7EDC[uuid:{3}, name:{4}]\u914D\u7F6EDNS{2}\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{5}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/dns/VirtualRouterSyncDnsOnStartFlow.java:108
# args: vr.getName(),vr.getUuid(),JSONObjectUtil.toJsonString(dns),ret.getError()
virtual\ router[name\:\ %s,\ uuid\:\ %s]\ failed\ to\ configure\ dns%s,\ %s\  = \u4E91\u8DEF\u7531[name: {0}, uuid: {1}]\u672A\u80FD\u914D\u7F6EDNS{2}\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{3}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/eip/VirtualRouterEipBackend.java:149
# args: struct.getEip().getUuid(),struct.getEip().getName(),struct.getVip().getIp(),struct.getNic().getUuid(),vr.getUuid(),ret.getError()
failed\ to\ create\ eip[uuid\:%s,\ name\:%s,\ ip\:%s]\ for\ vm\ nic[uuid\:%s]\ on\ virtual\ router[uuid\:%s],\ %s = \u65E0\u6CD5\u4E3A\u865A\u62DF\u673A\u7F51\u5361[uuid:{3}]\u5728\u4E91\u8DEF\u7531[uuid:{4}]\u4E0A\u521B\u5EFAEIP[uuid:{0}, name:{1}, ip:{2}]\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{5}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/eip/VirtualRouterEipBackend.java:185
# args: offering.getUuid(),l3inv.getUuid(),l3inv.getZoneUuid(),struct.getVip().getL3NetworkUuid(),struct.getEip().getUuid()
found\ a\ virtual\ router\ offering[uuid\:%s]\ for\ L3Network[uuid\:%s]\ in\ zone[uuid\:%s];\ however,\ the\ network's\ public\ network[uuid\:%s]\ is\ not\ the\ same\ to\ EIP[uuid\:%s]'s;\ you\ may\ need\ to\ use\ system\ tag\ guestL3Network\:\:l3NetworkUuid\ to\ specify\ a\ particular\ virtual\ router\ offering\ for\ the\ L3Network = \u5728\u533A\u57DF\uFF08zone\uFF09[uuid:{2}]\u4E0A\u4E3AL3\u7F51\u7EDC[uuid:{1}]\u627E\u5230\u4E86\u4E91\u8DEF\u7531\u89C4\u683C[uuid:{0}]\uFF1B\u4F46\u662F\uFF0C\u5176\u516C\u5171\u7F51\u7EDC[uuid:{3}]\u548CEIP[uuid:{4}]\u7684\u516C\u5171\u7F51\u7EDC\u4E0D\u662F\u540C\u4E00\u4E2AL3\u7F51\u7EDC\u3002\u4F60\u53EF\u80FD\u9700\u8981\u4F7F\u7528\u7CFB\u7EDF\u6807\u7B7E[guestL3Network::l3NetworkUuid]\u4E3A\u8BE5L3\u7F51\u7EDC\u6307\u5B9A\u4E00\u4E2A\u7279\u5B9A\u7684\u4E91\u8DEF\u6709\u89C4\u683C\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/eip/VirtualRouterEipBackend.java:288
# args: struct.getEip().getUuid(),struct.getEip().getName(),struct.getVip().getIp(),struct.getNic().getUuid(),vr.getUuid(),ret.getError()
failed\ to\ remove\ eip[uuid\:%s,\ name\:%s,\ ip\:%s]\ for\ vm\ nic[uuid\:%s]\ on\ virtual\ router[uuid\:%s],\ %s = \u672A\u80FD\u5728\u4E91\u8DEF\u7531[uuid:{4}]\u4E0A\u4E3A\u865A\u62DF\u673A\u7F51\u5361[uuid:{3}]\u79FB\u9664EIP[uuid:{0}, name:{1}, ip:{2}]\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{5}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/eip/VirtualRouterSyncEipOnStartFlow.java:180
# args: vr.getUuid(),ret.getError()
failed\ to\ sync\ eip\ on\ virtual\ router[uuid\:%s],\ %s = \u672A\u80FD\u5728\u4E91\u8DEF\u7531[uuid:{0}]\u4E0A\u540C\u6B65EIP\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{1}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java:701
# args: struct.getLb().getUuid()
cannot\ find\ virtual\ router\ for\ load\ balancer\ [uuid\:%s] = \u672A\u80FD\u4E3A\u8D1F\u8F7D\u5747\u8861\u5668[uuid:{0}]\u627E\u5230\u4E91\u8DEF\u7531\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/nat/VirtualRouterSnatBackend.java:73
# args: guestL3.getUuid(),guestL3.getName(),offering.getPublicNetworkUuid(),offering.getUuid(),offering.getName()
guest\ l3Network[uuid\:%s,\ name\:%s]\ needs\ SNAT\ service\ provided\ by\ virtual\ router,\ but\ public\ l3Network[uuid\:%s]\ of\ virtual\ router\ offering[uuid\:\ %s,\ name\:%s]\ is\ the\ same\ to\ this\ guest\ l3Network = \u7528\u6237L3\u7F51\u7EDC[uuid:{0}, name:{1}]\u9700\u8981\u4E91\u8DEF\u7531\u63D0\u4F9B\u7684SNAT\u670D\u52A1\uFF0C\u4F46\u662F\u4E91\u8DEF\u7531\u89C4\u683C[uuid: {3}, name:{4}]\u7684\u516C\u5171L3\u7F51\u7EDC[uuid:{2}]\u4E0E\u8BE5\u5BA2\u6237L3\u7F51\u7EDC\u76F8\u540C\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/nat/VirtualRouterSnatBackend.java:124
# args: vr.getUuid(),vr.getManagementNic().getIp(),JSONObjectUtil.toJsonString(info),spec.getVmInventory().getUuid(),spec.getVmInventory().getName(),struct.getL3Network().getUuid(),struct.getL3Network().getName(),ret.getError()
virtual\ router[uuid\:%s,\ ip\:%s]\ failed\ to\ apply\ snat[%s]\ for\ vm[uuid\:%s,\ name\:%s]\ on\ L3Network[uuid\:%s,\ name\:%s],\ because\ %s = \u4E91\u8DEF\u7531[uuid:{0}, ip:{1}]\u65E0\u6CD5\u4E3A\u865A\u62DF\u673A[uuid:{3}, name:{4}]\u5728L3\u7F51\u7EDC[uuid:{5}, name:{6}]\u4E0A\u5E94\u7528SNAT\u89C4\u5219[{2}]\uFF0C\u56E0\u4E3A\uFF1A{7}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/nat/VirtualRouterSyncSNATOnStartFlow.java:92
# args: vr.getName(),vr.getUuid(),JSONObjectUtil.toJsonString(snatInfo),ret.getError()
virtual\ router[name\:\ %s,\ uuid\:\ %s]\ failed\ to\ sync\ snat%s,\ %s = \u4E91\u8DEF\u7531[name: {0}, uuid: {1}]\u672A\u80FD\u540C\u6B65SNAT{2}\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{3}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/portforwarding/ApplyPortforwardingRuleOnVirtualRouterVmFlow.java:81
# args: to.getVipIp(),to.getPrivateIp(),to.getVipPortStart(),to.getVipPortEnd(),to.getPrivatePortStart(),to.getPrivatePortEnd(),ret.getError()
failed\ to\ create\ port\ forwarding\ rule[vip\ ip\:\ %s,\ private\ ip\:\ %s,\ vip\ start\ port\:\ %s,\ vip\ end\ port\:\ %s,\ private\ start\ port\:\ %s,\ private\ end\ port\:\ %s],\ because\ %s = \u65E0\u6CD5\u521B\u5EFA\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219[vip ip: {0}, private ip: {1}, vip start port: {2}, vip end port: {3}, private start port: {4}, private end port: {5}]\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{6}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/portforwarding/ReleasePortForwardingRuleOnVirtualRouterVmFlow.java:75
# args: JSONObjectUtil.toJsonString(to),ret.getError()
failed\ to\ revoke\ port\ forwarding\ rules\ %s,\ because\ %s = \u672A\u80FD\u89E3\u9664\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219{0}\uFF0C\u539F\u56E0\uFF1A{1}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:141
# args: offering.getUuid(),struct.getGuestL3Network().getUuid(),struct.getGuestL3Network().getZoneUuid(),struct.getVip().getL3NetworkUuid(),struct.getRule().getUuid()
found\ a\ virtual\ router\ offering[uuid\:%s]\ for\ L3Network[uuid\:%s]\ in\ zone[uuid\:%s];\ however,\ the\ network's\ public\ network[uuid\:%s]\ is\ not\ the\ same\ to\ PortForwarding\ rule[uuid\:%s]'s;\ you\ may\ need\ to\ use\ system\ tag\ guestL3Network\:\:l3NetworkUuid\ to\ specify\ a\ particular\ virtual\ router\ offering\ for\ the\ L3Network = \u5728\u533A\u57DF\uFF08zone\uFF09[uuid:{2}]\u5185\u4E3AL3\u7F51\u7EDC[uuid:{1}]\u627E\u5230\u4E86\u4E00\u4E2A\u4E91\u8DEF\u7531\u89C4\u683C[uuid:{0}]\uFF1B\u7136\u800C\uFF0C\u5176\u7F51\u7EDC\u7684\u516C\u5171\u7F51\u7EDC[uuid:{3}]\u548C\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219[uuid:{4}]\u7684\u516C\u5171\u7F51\u7EDC\u4E0D\u4E00\u81F4\u3002\u4F60\u53EF\u80FD\u9700\u8981\u4F7F\u7528\u7CFB\u7EDF\u6807\u7B7E[guestL3Network::l3NetworkUuid]\u4E3A\u8BE5L3\u7F51\u7EDC\u6307\u5B9A\u4E00\u4E2A\u7279\u5B9A\u7684\u4E91\u8DEF\u6709\u89C4\u683C\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:207
# args: rule.getVipPortStart(),rule.getVipPortEnd(),rule.getPrivatePortStart(),rule.getPrivatePortEnd()
virtual\ router\ doesn't\ support\ port\ forwarding\ range\ redirection,\ the\ vipPortStart\ must\ be\ equals\ to\ privatePortStart\ and\ vipPortEnd\ must\ be\ equals\ to\ privatePortEnd;but\ this\ rule\ rule\ has\ a\ mismatching\ range\:\ vip\ port[%s,\ %s],\ private\ port[%s,\ %s] = \u4E91\u8DEF\u7531\u4E0D\u652F\u6301\u8303\u56F4\u6027\u7684\u7AEF\u53E3\u8F6C\u53D1\u91CD\u5B9A\u5411\uFF0CvipPortStart\u548CprivatePortStart\u5FC5\u987B\u4E00\u81F4\uFF0CvipPortEnd\u548CprivatePortEnd\u5FC5\u987B\u4E00\u81F4\uFF0C\u4F46\u8FD9\u6761\u89C4\u5219\u6709\u4E2A\u4E0D\u5339\u914D\u7684\u8303\u56F4\uFF1Avip\u7AEF\u53E3\u8303\u56F4[{0}, {1}]\uFF0C\u79C1\u6709\u7AEF\u53E3\u8303\u56F4[{2}, {3}]\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/portforwarding/VirtualRouterSyncPortForwardingRulesOnStartFlow.java:187
# args: vr.getName(),vr.getUuid(),ret.getError()
failed\ to\ sync\ port\ forwarding\ rules\ served\ by\ virtual\ router[name\:\ %s,\ uuid\:\ %s],\ because\ %s = \u672A\u80FD\u540C\u6B65\u7531\u4E91\u8DEF\u7531[name: {0}, uuid: {1}]\u63D0\u4F9B\u7684\u7AEF\u53E3\u8F6C\u53D1\u89C4\u5219\uFF0C\u56E0\u4E3A\uFF1A{2}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/vip/VirtualRouterVipBackend.java:171
# args: vipvo.getVirtualRouterVmUuid(),vrState
virtual\ router[uuid\:%s,\ state\:%s]\ is\ not\ running,\ current\ HA\ has\ not\ been\ supported,\ please\ manually\ start\ this\ virtual\ router = \u4E91\u8DEF\u7531[uuid:{0}, state:{1}]\u6CA1\u6709\u8FD0\u884C\uFF0C\u5F53\u524DHA\u673A\u5236\u5C1A\u4E0D\u652F\u6301\uFF0C\u8BF7\u624B\u52A8\u542F\u52A8\u8BE5\u4E91\u8DEF\u7531\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/vip/VirtualRouterVipBaseBackend.java:176
# args: tos,vr.getUuid(),ret.getError()
failed\ to\ create\ vip%s\ on\ virtual\ router[uuid\:%s],\ because\ %s = \u672A\u80FD\u5728\u4E91\u8DEF\u7531[uuid:{1}]\u4E0A\u521B\u5EFAVIP{0}\uFF0C\u56E0\u4E3A{2}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/vip/VirtualRouterVipBaseBackend.java:141
# args: tos,ret.getError()
failed\ to\ remove\ vip%s,\ because\ %s = \u672A\u80FD\u79FB\u9664VIP{0}\uFF0C\u56E0\u4E3A{1}\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/vip/VirtualRouterVipBaseBackend.java:228
# args: offering.getUuid(),s.getL3Network().getUuid(),s.getL3Network().getZoneUuid(),self.getL3NetworkUuid(),self.getUuid()
found\ a\ virtual\ router\ offering[uuid\:%s]\ for\ L3Network[uuid\:%s]\ in\ zone[uuid\:%s];\ however,\ the\ network's\ public\ network[uuid\:%s]\ is\ not\ the\ same\ to\ VIP[uuid\:%s]'s;\ you\ may\ need\ to\ use\ system\ tag\ guestL3Network\:\:l3NetworkUuid\ to\ specify\ a\ particular\ virtual\ router\ offering\ for\ the\ L3Network = \u5728\u533A\u57DF\uFF08zone\uFF09[uuid:{2}]\u5185\u4E3AL3\u7F51\u7EDC[uuid:{1}]\u627E\u5230\u4E86\u4E00\u4E2A\u4E91\u8DEF\u7531\u89C4\u683C[uuid:{0}]\uFF1B\u7136\u800C\uFF0C\u5176\u7F51\u7EDC\u7684\u516C\u5171\u7F51\u7EDC[uuid:{3}]\u548CVIP[uuid:{4}]\u7684\u516C\u5171\u7F51\u7EDC\u4E0D\u4E00\u81F4\u3002\u4F60\u53EF\u80FD\u9700\u8981\u4F7F\u7528\u7CFB\u7EDF\u6807\u7B7E[guestL3Network::l3NetworkUuid]\u4E3A\u8BE5L3\u7F51\u7EDC\u6307\u5B9A\u4E00\u4E2A\u7279\u5B9A\u7684\u4E91\u8DEF\u6709\u89C4\u683C\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/vip/VirtualRouterVipBaseBackend.java:196
# args: vipvo.getVirtualRouterVmUuid(),vrState
virtual\ router[uuid\:%s,\ state\:%s]\ is\ not\ running = \u4E91\u8DEF\u7531[uuid:{0}, state:{1}]\u6CA1\u6709\u8FD0\u884C\u3002

# at: src/main/java/org/zstack/network/manage/virtualrouter/vyos/VyosDeployAgentFlow.java:87
# args: mgmtNicIp
unable\ to\ ssh\ in\ to\ the\ vyos[%s],\ the\ ssh\ port\ seems\ not\ open = \u672A\u80FD\u901A\u8FC7ssh\u8FDB\u5165vyos[{0}]\uFF0Cssh\u7AEF\u53E3\u770B\u8D77\u6765\u6CA1\u6709\u6253\u5F00\u3002

# at: src/main/java/org/zstack/portal/apimediator/ApiMediatorImpl.java:241
# args: cmsg.getResourceUuid()
resourceUuid[%s]\ is\ not\ a\ valid\ uuid.\ A\ valid\ uuid\ is\ a\ UUID(v4\ recommended)\ with\ '-'\ stripped.\ see\ http\://en.wikipedia.org/wiki/Universally_unique_identifier\ for\ format\ of\ UUID,\ the\ regular\ expression\ ZStack\ uses\ to\ validate\ a\ UUID\ is\ '[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}' = \u8D44\u6E90UUID\uFF08\uFF09\u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u7684uuid\u3002\u4E00\u4E2A\u6709\u6548\u7684UUID\u662F\u4E00\u4E2A\u6CA1\u6709-\u7684UUID\uFF08\u5EFA\u8BAE\u4E3AUUIDv4\uFF09.\u683C\u5F0F\u53C2\u89C1http://en.wikipedia.org/wiki/Universally_unique_identifier\uFF0CZStack\u4E2D\u9A8C\u8BC1\u4E00\u4E2AUUID\u7684\u6B63\u5219\u8868\u8FBE\u5F0F\u4E3A\uFF1A[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}\u3002

# at: src/main/java/org/zstack/portal/apimediator/ApiMessageProcessorImpl.java:268
# args: f.getName(),msg.getClass().getName(),at.maxLength(),str.length()
field[%s]\ of\ message[%s]\ exceeds\ max\ length\ of\ string.\ expected\ was\ <\=\ %s,\ actual\ was\ %s = \u6D88\u606F[{1}]\u7684\u5B57\u6BB5[{0}]\u8D85\u8FC7\u4E86\u5176\u5141\u8BB8\u7684\u5B57\u7B26\u4E32\u6700\u5927\u957F\u5EA6\u3002\u671F\u671B\u7684\u662F{2}\uFF0C\u5B9E\u9645\u4E3A{3}\u3002

# at: src/main/java/org/zstack/portal/apimediator/ApiMessageProcessorImpl.java:274
# args: f.getName(),msg.getClass().getName()
field[%s]\ of\ message[%s]\ is\ mandatory,\ can\ not\ be\ null = \u6D88\u606F[{1}]\u7684\u5B57\u6BB5[{0}]\u662F\u5FC5\u586B\u7684\uFF0C\u4E0D\u80FD\u4E3ANULL\u3002

# at: src/main/java/org/zstack/portal/apimediator/ApiMessageProcessorImpl.java:281
# args: f.getName(),msg.getClass().getName(),vals,value
valid\ value\ for\ field[%s]\ of\ message[%s]\ are\ %s,\ but\ %s\ found = \u6D88\u606F[{1}]\u7684\u5B57\u6BB5[{0}]\u7684\u6709\u6548\u503C\u4E3A[{2}]\uFF0C\u4F46\u662F\u63D0\u4F9B\u7684\u662F[{3}]\u3002

# at: src/main/java/org/zstack/portal/apimediator/ApiMessageProcessorImpl.java:291
# args: f.getName(),msg.getClass().getName(),regex,value
valid\ regex\ value\ for\ field[%s]\ of\ message[%s]\ are\ %s,\ but\ %s\ found = \u6D88\u606F[{1}]\u7684\u5B57\u6BB5[{0}]\u7684\u6709\u6548\u7684\u6B63\u5219\u8868\u8FBE\u5F0F\u503C\u4E3A[{2}]\uFF0C\u4F46\u662F\u63D0\u4F9B\u7684\u662F[{3}]\u3002

# at: src/main/java/org/zstack/portal/apimediator/ApiMessageProcessorImpl.java:299
# args: f.getName()
field[%s]\ must\ be\ a\ nonempty\ list = \u5B57\u6BB5[{0}]\u5FC5\u987B\u4E3A\u4E00\u4E2A\u975E\u7A7A\u7684\u5217\u8868\u3002

# at: src/main/java/org/zstack/portal/apimediator/ApiMessageProcessorImpl.java:307
# args: f.getName()
field[%s]\ cannot\ contain\ a\ NULL\ element = \u5B57\u6BB5[{0}]\u4E0D\u80FD\u5305\u62EC\u4E00\u4E2ANULL\u5143\u7D20\u3002

# at: src/main/java/org/zstack/portal/apimediator/ApiMessageProcessorImpl.java:318
# args: f.getName()
field[%s]\ cannot\ contain\ any\ empty\ string = \u5B57\u6BB5[{0}]\u4E0D\u80FD\u5305\u62EC\u4E00\u4E2A\u7A7A\u5B57\u7B26\u4E32\u3002

# at: src/main/java/org/zstack/portal/apimediator/ApiMessageProcessorImpl.java:314
# args: f.getName()
field[%s]\ cannot\ be\ an\ empty\ string = \u5B57\u6BB5[{0}]\u4E0D\u80FD\u662F\u4E00\u4E2A\u7A7A\u5B57\u7B26\u4E32\u3002

# at: src/main/java/org/zstack/portal/apimediator/ApiMessageProcessorImpl.java:330
# args: f.getName(),low,high
field[%s]\ must\ be\ in\ range\ of\ [%s,\ %s] = \u503C[{0}]\u5FC5\u987B\u5728[{1}, {2}]\u4E4B\u95F4

# at: src/main/java/org/zstack/prometheus/PrometheusApiInterceptor.java:41
# args: msg.getRelativeTime()
the\ relativeTime[%s]\ is\ invalid,\ it\ must\ be\ in\ format\ of,\ for\ example,\ 10s,\ 1h = \u76F8\u5173\u65F6\u95F4[{0}]\u4E0D\u5408\u6CD5,\u683C\u5F0F\u5FC5\u987B\u4F8B\u598210s\uFF0C1h

# at: src/main/java/org/zstack/prometheus/PrometheusApiInterceptor.java:45
# args: msg.getRelativeTime()
the\ relativeTime[%s]\ is\ invalid,\ it's\ too\ big = \u76F8\u5173\u65F6\u95F4[{0}]\u4E0D\u5408\u6CD5\uFF0C\u503C's \u8FC7\u5927

# at: src/main/java/org/zstack/prometheus/PrometheusManagerImpl.java:426
# args: rsp.getStatusCode(),rsp.getBody()
query\ failure;\ status\ code\:%s,%s = \u67E5\u8BE2\u5931\u8D25\uFF1B\u5931\u8D25\u7801\u4E3A\uFF1A{0},{1}

# at: src/main/java/org/zstack/prometheus/PrometheusManagerImpl.java:459
# args: msg.getExpression(),disallowedMetric
the\ expression[%s]\ contains\ disallowed\ metric[%s] = \u8868\u8FBE[{0}]\u5305\u542B\u4E86\u4E0D\u5141\u8BB8\u7684\u5EA6\u91CF[{1}]

# at: src/main/java/org/zstack/prometheus/PrometheusManagerImpl.java:481
# args: ret.get("errorType"),ret.get("error")
query\ failure,\ errorType\:%s,\ error\:\ %s = \u67E5\u8BE2\u5931\u8D25\uFF0C\u9519\u8BEF\u7C7B\u578B\uFF1A{0}, \u9519\u8BEF\uFF1A{1}

# at: src/main/java/org/zstack/prometheus/PrometheusManagerImpl.java:450
# args: ret.get("error")
prometheus\ query\ error\:\ %s = 

# at: src/main/java/org/zstack/prometheus/monitoring/AlertRuleWriter.java:115
# args: rb.name,r
conflict\ alert\ rule[%s],\ there\ has\ been\ a\ rule[%s]\ with\ the\ same\ name = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusAlert.java:61
# args: resourceName,resourceUuid,toI18nString(resourceType),itemName,toI18nString(expression.getOperator()),expression.getConstant(),value,tvo.getDuration()
ALERT\:\
\ resource[name\:\ %s,\ uuid\:\ %s,\ type\:\ %s]\
event\:\ %s\ %s\ %s\
current\ value\:\ %s\
duration\:\ %s\ seconds\
 = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusHostCpuUtilAlertWriter.java:42
# args: args
A\ host[name\:\ {name},\ uuid\:\ {hostUuid}]'s\ CPU\ utilization\ reaches\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}].\ Current\ CPU\ utilization\ is\ {value},\ please\ handle\ it\ as\ soon\ as\ possible. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusHostCpuUtilAlertWriter.java:71
# args: args
A\ host[name\:\ {name},\ uuid\:\ {hostUuid}]'s\ CPU\ utilization\ recovers\ from\ a\ previous\ alert,current\ CPU\ utilization\ is\ {value}\ that\ doesn't\ reach\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}]. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusHostCpuUtilItem.java:58
# args: cpu,trigger.getTargetResourceUuid(),cpuNum
invalid\ cpu[%s],\ the\ host[uuid\:%s]\ doesn't\ have\ a\ CPU\ numbered\ by\ %s = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusHostDiskIOAlertWriter.java:50
# args: 
host.disk.io.direction = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusHostDiskIOAlertWriter.java:57
# args: args
A\ host[name\:\ {name},\ uuid\:\ {hostUuid}]'s\ disk\ {host.disk.io.direction}\ bandwidth\ reaches\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}].\ Current\ disk\ bandwidth\ is\ {value},\ please\ handle\ it\ as\ soon\ as\ possible. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusHostDiskIOAlertWriter.java:53
# args: args
A\ host[name\:\ {name},\ uuid\:\ {hostUuid}]'s\ disk\ {host.disk.io.direction}\ IOPS\ reaches\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}].\ Current\ disk\ IOPS\ is\ {value},\ please\ handle\ it\ as\ soon\ as\ possible. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusHostDiskIOAlertWriter.java:100
# args: args
A\ host[name\:\ {name},\ uuid\:\ {hostUuid}]'s\ {host.disk.io.direction}\ bandwidth\ recovers\ from\ a\ previous\ alert,current\ disk\ bandwidth\ is\ {value}\ that\ doesn't\ reach\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}]. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusHostDiskIOAlertWriter.java:96
# args: args
A\ host[name\:\ {name},\ uuid\:\ {hostUuid}]'s\ {host.disk.io.direction}\ IOPS\ recovers\ from\ a\ previous\ alert,current\ disk\ IOPS\ is\ {value}\ that\ doesn't\ reach\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}]. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusHostMemUtilAlertWriter.java:42
# args: args
A\ host[name\:\ {name},\ uuid\:\ {hostUuid}]'s\ memory\ utilization\ reaches\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}].\ Current\ memory\ utilization\ is\ {value},\ please\ handle\ it\ as\ soon\ as\ possible. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusHostMemUtilAlertWriter.java:71
# args: args
A\ host[name\:\ {name},\ uuid\:\ {hostUuid}]'s\ memory\ utilization\ recovers\ from\ a\ previous\ alert,current\ CPU\ utilization\ is\ {value}\ that\ doesn't\ reach\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}]. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusHostNetworkIOAlertWriter.java:49
# args: 
host.network.io.direction = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusHostNetworkIOAlertWriter.java:51
# args: args
A\ host[name\:\ {name},\ uuid\:\ {hostUuid}]'s\ network\ {host.network.io.direction}\ bandwidth\ reaches\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}].\ Current\ network\ bandwidth\ is\ {value},\ please\ handle\ it\ as\ soon\ as\ possible. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusHostNetworkIOAlertWriter.java:85
# args: args
A\ host[name\:\ {name},\ uuid\:\ {hostUuid}]'s\ {host.network.io.direction}\ bandwidth\ recovers\ from\ a\ previous\ alert,current\ network\ bandwidth\ utilization\ is\ {value}\ that\ doesn't\ reach\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}]. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmCpuUtilAlertWriter.java:42
# args: args
A\ virtual\ machine[name\:\ {name},\ uuid\:\ {vmUuid}]'s\ CPU\ utilization\ reaches\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}].\ Current\ CPU\ utilization\ is\ {value},\ please\ handle\ it\ as\ soon\ as\ possible. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmCpuUtilAlertWriter.java:71
# args: args
A\ virtual\ machine[name\:\ {name},\ uuid\:\ {vmUuid}]'s\ CPU\ utilization\ recovers\ from\ a\ previous\ alert,current\ CPU\ utilization\ is\ {value}\ that\ doesn't\ reach\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}]. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmDiskIOAlertWriter.java:50
# args: 
vm.disk.io.direction = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmDiskIOAlertWriter.java:57
# args: args
A\ virtual\ machine[name\:\ {name},\ uuid\:\ {vmUuid}]'s\ disk\ {vm.disk.io.direction}\ bandwidth\ reaches\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}].\ Current\ disk\ bandwidth\ is\ {value},\ please\ handle\ it\ as\ soon\ as\ possible. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmDiskIOAlertWriter.java:53
# args: args
A\ virtual\ machine[name\:\ {name},\ uuid\:\ {vmUuid}]'s\ disk\ {vm.disk.io.direction}\ IOPS\ reaches\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}].\ Current\ disk\ IOPS\ is\ {value},\ please\ handle\ it\ as\ soon\ as\ possible. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmDiskIOAlertWriter.java:100
# args: args
A\ virtual\ machine[name\:\ {name},\ uuid\:\ {vmUuid}]'s\ {vm.disk.io.direction}\ bandwidth\ recovers\ from\ a\ previous\ alert,current\ disk\ bandwidth\ is\ {value}\ that\ doesn't\ reach\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}]. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmDiskIOAlertWriter.java:96
# args: args
A\ virtual\ machine[name\:\ {name},\ uuid\:\ {vmUuid}]'s\ {vm.disk.io.direction}\ IOPS\ recovers\ from\ a\ previous\ alert,current\ disk\ IOPS\ is\ {value}\ that\ doesn't\ reach\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}]. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmDiskIOItem.java:21
# args: type,ALLOWED_TYPES
invalid\ type[%s],\ only\ %s\ are\ allowed = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmMemUtilAlertWriter.java:42
# args: args
A\ virtual\ machine[name\:\ {name},\ uuid\:\ {vmUuid}]'s\ memory\ utilization\ reaches\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}].\ Current\ CPU\ utilization\ is\ {value},\ please\ handle\ it\ as\ soon\ as\ possible. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmMemUtilAlertWriter.java:71
# args: args
A\ virtual\ machine[name\:\ {name},\ uuid\:\ {vmUuid}]'s\ memory\ utilization\ recovers\ from\ a\ previous\ alert,current\ CPU\ utilization\ is\ {value}\ that\ doesn't\ reach\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}]. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmMemUtilItem.java:53
# args: expression.getConstant()
invalid\ right\ value[%s],\ it\ must\ be\ a\ float\ or\ double\ number = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmMemUtilItem.java:49
# args: expression.getConstant()
invalid\ right\ value[%s],\ it\ must\ be\ float\ or\ double\ number\ greater\ than\ zero\ and\ lesser\ than\ one = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmNetworkIOAlertWriter.java:49
# args: 
vm.network.io.direction = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmNetworkIOAlertWriter.java:51
# args: args
A\ virtual\ machine[name\:\ {name},\ uuid\:\ {vmUuid}]'s\ network\ {vm.network.io.direction}\ bandwidth\ reaches\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}].\ Current\ network\ bandwidth\ is\ {value},\ please\ handle\ it\ as\ soon\ as\ possible. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmNetworkIOAlertWriter.java:85
# args: args
A\ virtual\ machine[name\:\ {name},\ uuid\:\ {vmUuid}]'s\ {vm.network.io.direction}\ bandwidth\ recovers\ from\ a\ previous\ alert,current\ network\ bandwidth\ utilization\ is\ {value}\ that\ doesn't\ reach\ the\ threshold({threshold})\ you\ set\ in\ the\ trigger[uuid\:\ {triggerUuid}]. = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmNetworkIOItem.java:24
# args: expression.getConstant()
invalid\ right\ value[%s],\ it\ must\ be\ a\ number(int,\ long,\ float,\ double) = 

# at: src/main/java/org/zstack/prometheus/monitoring/PrometheusVmNetworkIOItem.java:20
# args: dir,ALLOWED_DIRECTION
invalid\ direction[%s],\ only\ %s\ are\ allowed = 

# at: src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:431
# args: attr,inventoryClass.getName()
condition\ name[%s]\ is\ invalid,\ no\ such\ field\ on\ inventory\ class[%s] = \u6761\u4EF6\u540D[{0}]\u975E\u6CD5\uFF0C\u5728\u6E05\u5355\u7C7B\u91CC\u9762\u6CA1\u6709\u8FD9\u4E2A\u9608

# at: src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:436
# args: attr,attr,inventoryClass.getName()
condition\ name[%s]\ is\ invalid,\ field[%s]\ of\ inventory[%s]\ is\ annotated\ as\ @Unqueryable\ field = \u6761\u4EF6\u540D[{0}]\u975E\u6CD5\uFF0C\u6E05\u5355[{2}]\u7684\u503C[{1}]\u4E0D\u662F\u88AB\u6807\u8BB0\u4E3A@Unqueryable\u7684\u503C

# at: src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:447
# args: info.jpaMetaClass.getName(),attr
entity\ meta\ class[%s]\ has\ no\ field[%s] = \u5B9E\u4F53\u5143\u7C7B[{0}]\u4E2D\u6CA1\u6709\u503C[{1}]

# at: src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:999
# args: f,info.inventoryClass.getSimpleName(),info.premitiveFieldNames
field[%s]\ is\ not\ a\ primitive\ of\ the\ inventory\ %s;\ you\ cannot\ specify\ it\ in\ the\ parameter\ 'fields';valid\ fields\ are\ %s = \u503C[{0}]\u4E0D\u662F\u6E05\u5355{1}\u7684\u539F\u8BED\uFF1B\u4F60\u4E0D\u80FD\u5728\u53C2\u6570'\u57DF'\u4E2D\u6307\u5B9A\u8BE5\u53C2\u6570\uFF1B\u975E\u6CD5\u7684\u57DF{2}

# at: src/main/java/org/zstack/query/QueryFacadeImpl.java:257
# args: JSONObjectUtil.toJsonString(cond)
'value'\ of\ query\ condition\ %s\ cannot\ be\ null = \u67E5\u8BE2\u6761\u4EF6\u4E2D{0}\u7684'\u503C'\u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:58
# args: msg.getUuid()
This\ trigger[uuid\:%s]\ is\ added\ to\ some\ job,\ please\ remove\ it\ first = 

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:69
# args: msg.getSchedulerJobUuid(),msg.getSchedulerTriggerUuid()
Can\ not\ add\ job[uuid\:%s]\ twice\ to\ the\ same\ trigger[uuid\:%s] = 

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:93
# args: 
repeat\ count\ must\ be\ positive\ integer = 

# at: src/main/java/org/zstack/scheduler/SchedulerFacadeImpl.java:692
# args: vm.getUuid()
vm[uuid\:%s]\ changed\ state\ to\ Running\ from\ Unknown,\ resume\ all\ its\ scheduler\ job = 

# at: src/main/java/org/zstack/scheduler/SchedulerFacadeImpl.java:685
# args: vm.getUuid()
vm[uuid\:%s]\ changed\ state\ to\ Unknown\ from\ Running,\ pause\ all\ its\ scheduler\ job = 

# at: src/main/java/org/zstack/scheduler/storage/volume/snapshot/CreateVolumeSnapshotJob.java:62
# args: volumeUuid,new Date().toString()
Create\ snap\ shot\ of\ volume[uuid\:%s]\ failed\ [executed\ time\:%s] = 

# at: src/main/java/org/zstack/scheduler/storage/volume/snapshot/CreateVolumeSnapshotJob.java:59
# args: volumeUuid,new Date().toString()
Create\ snap\ shot\ of\ volume[uuid\:%s]\ succeed\ [executed\ time\:%s] = 

# at: src/main/java/org/zstack/scheduler/vm/RebootVmInstanceJob.java:51
# args: vmUuid,new Date().toString()
Reboot\ vm\ instance\ job\ for\ vm[uuid\:%s]\ failed\ [executed\ time\:%s] = 

# at: src/main/java/org/zstack/scheduler/vm/RebootVmInstanceJob.java:48
# args: vmUuid,new Date().toString()
Reboot\ vm\ instance\ job\ for\ vm[uuid\:%s]\ succeed\ [executed\ time\:%s] = 

# at: src/main/java/org/zstack/scheduler/vm/StartVmInstanceJob.java:52
# args: vmUuid,new Date().toString()
Start\ vm\ instance\ job\ for\ vm[uuid\:%s]\ failed\ [executed\ time\:%s] = 

# at: src/main/java/org/zstack/scheduler/vm/StartVmInstanceJob.java:49
# args: vmUuid,new Date().toString()
Start\ vm\ instance\ job\ for\ vm[uuid\:%s]\ succeed\ [executed\ time\:%s] = 

# at: src/main/java/org/zstack/scheduler/vm/StopVmInstanceJob.java:55
# args: vmUuid,new Date().toString()
Stop\ vm\ instance\ job\ for\ vm[uuid\:%s]\ failed\ [executed\ time\:%s] = 

# at: src/main/java/org/zstack/scheduler/vm/StopVmInstanceJob.java:52
# args: vmUuid,new Date().toString()
Stop\ vm\ instance\ job\ for\ vm[uuid\:%s]\ succeed\ [executed\ time\:%s] = 

# at: src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:64
# args: name
%s\ should\ not\ be\ null = {0} \u4E0D\u80FD\u4E3A\u7A7A

# at: src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:87
# args: 
zoneUuids,\ backupStorageUuids\ must\ have\ at\ least\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = zoneUuids, backupStorageUuids \u81F3\u5C11\u6709\u4E00\u4E2A\u4E0D\u4E3A\u7A7A\uFF0C\u6216\u8005all\u88AB\u8BBE\u7F6E\u4E3A\u771F 

# at: src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:117
# args: msg.getBackupStorageUuid(),msg.getZoneUuid()
backup\ storage[uuid\:%s]\ has\ not\ been\ attached\ to\ zone[uuid\:%s] = \u5907\u4EFD\u5B58\u50A8[uuid:{0}]\u6CA1\u6709\u88AB\u52A0\u8F7D\u5230zone[uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:126
# args: msg.getBackupStorageUuid(),msg.getZoneUuid()
backup\ storage[uuid\:%s]\ has\ been\ attached\ to\ zone[uuid\:%s] = \u5907\u4EFD\u5B58\u50A8[uuid:{0}]\u5DF2\u7ECF\u88AB\u52A0\u8F7D\u5230zone[uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:131
# args: url,e.toString()
cannot\ get\ image.\ The\ image\ url\ is\ %s.\ Exception\ is\ %s = \u65E0\u6CD5\u53D6\u5F97\u955C\u50CF\u3002\u955C\u50CF\u7684url\u662F{0}\uFF0C\u629B\u51FA\u7684\u9519\u8BEF\u4E3A{1}

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:139
# args: self.getUuid(),self.getName(),url,size,self.getAvailableCapacity()
the\ backup\ storage[uuid\:%s,\ name\:%s]\ has\ not\ enough\ capacity\ to\ download\ the\ image[%s].Required\ size\:%s,\ available\ size\:%s = \u5907\u4EFD\u5B58\u50A8[uuid:{0}, name:{1}]\u6CA1\u6709\u8DB3\u591F\u7684\u5BB9\u91CF\u53EF\u4F9B\u4E0B\u8F7D\u955C\u50CF[{2}]\u3002\u9700\u8981\u7684\u5927\u5C0F\uFF1A{3}\uFF0C\u53EF\u7528\u7684\u5927\u5C0F\uFF1A{4}

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:154
# args: msg.getClass().getName(),self.getStatus()
backup\ storage\ cannot\ proceed\ message[%s]\ because\ its\ status\ is\ %s = \u5907\u4EFD\u5B58\u50A8\u65E0\u6CD5\u5904\u7406\u6D88\u606F[{0}]\u56E0\u4E3A\u5B83\u7684\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:160
# args: msg.getClass().getName(),self.getState()
backup\ storage\ cannot\ proceed\ message[%s]\ because\ its\ state\ is\ %s = \u5907\u4EFD\u5B58\u50A8\u65E0\u6CD5\u5904\u7406\u6D88\u606F[{0}]\u56E0\u4E3A\u5B83\u7684\u72B6\u6001\u4E3A{1}

# at: src/main/java/org/zstack/storage/backup/BackupStorageCapacityUpdater.java:139
# args: size,backupStorageUuid,capacityVO.getAvailableCapacity()
cannot\ reserve\ %s\ on\ the\ backup\ storage[uuid\:%s],\ it\ only\ has\ %s\ available = \u65E0\u6CD5\u5728\u5907\u4EFD\u5B58\u50A8{1}\u4FDD\u7559{0}\uFF0C\u5B83\u4EC5\u6709{2}\u53EF\u7528\u5BB9\u91CF

# at: src/main/java/org/zstack/storage/backup/BackupStorageManagerImpl.java:302
# args: 
capacity\ reservation\ on\ all\ backup\ storage\ failed = \u5728\u6240\u6709\u5907\u4EFD\u5B58\u50A8\u4E0A\u4FDD\u7559\u5BB9\u91CF\u5931\u8D25

# at: src/main/java/org/zstack/storage/backup/BackupStorageReservedCapacityAllocatorFlow.java:46
# args: BackupStorageGlobalConfig.RESERVED_CAPACITY.value(),spec.getSize()
after\ subtracting\ reserved\ capacity[%s],\ no\ backup\ storage\ has\ required\ capacity[%s\ bytes] = \u5728\u51CF\u53BB\u4FDD\u7559\u5BB9\u91CF[{0}]\uFF0C\u6CA1\u6709\u5907\u4EFD\u5B58\u50A8\u6709\u5BB9\u91CF[{1}] bytes

# at: src/main/java/org/zstack/storage/backup/imagestore/CommitVolumeAsImageFlowChain.java:303
# args: String.join(",", msg.getBackupStorageUuids()),errorCodes.get(0).getCause().getDetails()
unable\ to\ commit\ backup\ storage\ specified\ by\ uuids\:\ %s,\ becasue\:\ %s = \u65E0\u6CD5\u901A\u8FC7uuids\uFF1A{0}\u63D0\u4EA4\u5907\u4EFD\u5B58\u50A8\uFF0C\u56E0\u4E3A\uFF1A{1}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:154
# args: url,rsp.getError()
unable\ to\ connect\ to\ SimpleHttpBackupStorage[url\:%s],\ because\ %s = \u65E0\u6CD5\u8FDE\u63A5\u5230SimpleHttpBackupStorage[url:{0}]\uFF0C\u56E0\u4E3A{1}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:638
# args: self.getUuid(),ret.getUuid()
the\ uuid\ of\ imagestoreBackupStorage\ agent\ changed[expected\:%s,\ actual\:%s],\ it's\ most\ likely\ the\ agent\ was\ manually\ restarted.\ Issue\ a\ reconnect\ to\ sync\ the\ status = \u955C\u50CF\u5907\u4EFD\u5B58\u50A8\u7684\u4EE3\u7406\u7684uuid\u53D1\u751F\u4E86\u6539\u53D8[\u671F\u671B\uFF1A{0}\uFF0C\u5B9E\u9645\uFF1A{1}]\uFF0C\u5F88'\u6709\u53EF\u80FD\u4EE3\u7406\u88AB\u624B\u52A8\u91CD\u542F\u4E86\uFF0C\u9700\u8981\u91CD\u8FDE\u540C\u6B65\u72B6\u6001

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:61
# args: msg.getHostname()
hostname[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = \u4E3B\u673A\u540D[{0}]\u4E0D\u662F\u4E00\u4E2AIPv4\u7684\u5730\u5740\uFF0C\u800C\u662F\u4E00\u4E2A\u975E\u6CD5\u7684\u4E3B\u673A\u540D

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:67
# args: msg.getHostname()
duplicate\ backup\ storage.\ There\ has\ been\ an\ image\ store\ backup\ storage[hostname\:%s] = \u91CD\u590D\u7684\u5907\u4EFD\u5B58\u50A8\u3002\u5DF2\u7ECF\u5B58\u5728\u4E00\u4E2A\u5907\u4EFD\u5B58\u50A8[\u4E3B\u673A\u540D\uFF1A{0}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:72
# args: 
file\ path\ needed = \u9700\u8981\u6587\u4EF6\u8DEF\u5F84

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:76
# args: dir
absolute\ file\ path\ required\:\ %s = \u9700\u8981\u6587\u4EF6\u7684\u7EDD\u5BF9\u8DEF\u5F84\uFF1B{0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:80
# args: 
the\ url\ contains\ an\ invalid\ folder[/dev\ or\ /proc\ or\ /sys] = URL\u5305\u542B\u4E86\u4E00\u4E2A\u65E0\u6548\u7684\u76EE\u5F55[/dev or /proc or /sys]\u3002

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:85
# args: dir
file\ path\ contains\ invalid\ character\:\ %s = \u6587\u4EF6\u8DEF\u5F84\u5305\u542B\u975E\u6CD5\u5B57\u7B26\uFF1A{0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java:78
# args: amsg.getUrl()
invalid\ url[%s],\ the\ url\ must\ be\ an\ absolute\ path\ starting\ with\ '/' = \u65E0\u6548\u7684url[{0}]\uFF0Curl\u5FC5\u987B\u662F\u4EE5'/'\u5F00\u5934\u7684\u7EDD\u5BF9\u8DEF\u5F84

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java:87
# args: hostname
existing\ SimpleHttpBackupStorage\ with\ hostname[%s]\ found = \u5B58\u5728\u4E3B\u673A\u540D\u4E3A[{0}]\u7684\u7B80\u5355http\u5907\u4EFD\u5B58\u50A8

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:498
# args: rsp.getError()
delete\ image\ metadata\ file\ failed\:\ %s = \u5220\u9664\u955C\u50CF\u5143\u6570\u636E\u6587\u4EF6\u5931\u8D25\uFF1A{0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:455
# args: rsp.getBackupStorageMetaFileName()
Check\ image\ metadata\ file\:\ %s\ failed = \u68C0\u67E5\u955C\u50CF\u5143\u6570\u636E\u6587\u4EF6\uFF1A{0}\u5931\u8D25

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:320
# args: rsp.getBackupStorageMetaFileName()
Create\ image\ metadata\ file\ \:\ %s\ failed = \u521B\u5EFA\u955C\u50CF\u5143\u6570\u636E\u6587\u4EF6\uFF1A{0}\u5931\u8D25

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:460
# args: rsp.getBackupStorageMetaFileName()
Image\ metadata\ file\:\ %s\ is\ not\ exist = \u955C\u50CF\u5143\u6570\u636E\u6587\u4EF6\uFF1A{0}\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java:100
# args: scheme,url
SftpBackupStorage\ doesn't\ support\ scheme[%s]\ in\ url[%s] = Sftp\u5907\u4EFD\u5B58\u50A8\u4E0D\u652F\u6301\u5728url[{1}]\u91CC\u5305\u542Bscheme[{0}]

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java:272
# args: self.getUuid(),ret.getUuid()
the\ uuid\ of\ sftpBackupStorage\ agent\ changed[expected\:%s,\ actual\:%s],\ it's\ most\ likely\ the\ agent\ was\ manually\ restarted.\ Issue\ a\ reconnect\ to\ sync\ the\ status = Sftp\u955C\u50CF\u5907\u4EFD\u5B58\u50A8\u7684\u4EE3\u7406\u7684uuid\u53D1\u751F\u4E86\u6539\u53D8[\u671F\u671B\uFF1A{0}\uFF0C\u5B9E\u9645\uFF1A{1}]\uFF0C\u5F88'\u6709\u53EF\u80FD\u4EE3\u7406\u88AB\u624B\u52A8\u91CD\u542F\u4E86\uFF0C\u9700\u8981\u91CD\u8FDE\u540C\u6B65\u72B6\u6001

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageApiInterceptor.java:73
# args: 
\ the\ url\ contains\ an\ invalid\ folder[/dev\ or\ /proc\ or\ /sys] = URL\u5305\u542B\u4E86\u4E00\u4E2A\u65E0\u6548\u7684\u76EE\u5F55[/dev or /proc or /sys]\u3002

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageApiInterceptor.java:69
# args: msg.getHostname()
duplicate\ backup\ storage.\ There\ has\ been\ a\ sftp\ backup\ storage[hostname\:%s]\ existing = \u91CD\u590D\u7684\u5907\u4EFD\u5B58\u50A8\u3002\u5DF2\u7ECF\u5B58\u5728\u4E00\u4E2A\u5907\u4EFD\u5B58\u50A8[\u4E3B\u673A\u540D\uFF1A{0}]

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java:466
# args: rsp.getBackupStorageMetaFileName()
check\ image\ metadata\ file\:\ %s\ failed = \u68C0\u67E5\u955C\u50CF\u5143\u6570\u636E\u6587\u4EF6\uFF1A{0}\u5931\u8D25

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java:327
# args: rsp.getBackupStorageMetaFileName()
create\ image\ metadata\ file\ \:\ %s\ failed = \u521B\u5EFA\u955C\u50CF\u5143\u6570\u636E\u6587\u4EF6\uFF1A{0}\u5931\u8D25

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java:471
# args: rsp.getBackupStorageMetaFileName()
image\ metadata\ file\:\ %s\ is\ not\ exist = \u955C\u50CF\u5143\u6570\u636E\u6587\u4EF6\uFF1A{0}\u4E0D\u5B58\u5728

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:66
# args: msg.getPoolName()
duplicate\ poolName[%s].\ There\ has\ been\ a\ pool\ with\ the\ same\ name\ existing = \u91CD\u590D\u7684Ceph Pool Name[{0}]\u3002\u5DF2\u6709\u4E00\u4E2A\u540C\u540D\u7684pool\u5B58\u5728\u3002

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:81
# args: existing
cannot\ add\ ceph\ primary\ storage,\ there\ has\ been\ some\ ceph\ primary\ storage\ using\ mon[hostnames\:%s] = \u65E0\u6CD5\u6DFB\u52A0ceph\u4E3B\u5B58\u50A8\uFF0C\u4E00\u5B9A\u6709\u67D0\u4E9Bceph\u4E3B\u5B58\u50A8\u4F7F\u7528\u4E86mon[\u4E3B\u673A\u540D\uFF1A{0}]

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:127
# args: monUrl,MON_URL_FORMAT
invalid\ monUrl[%s].\ A\ valid\ url\ is\ in\ format\ of\ %s = \u975E\u6CD5\u7684monUrl[{0}]. \u683C\u5F0F\u4E3A{1}\u7684\u975E\u6CD5url

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:134
# args: 
dataVolumePoolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = \u6570\u636E\u76D8\u6C60\u540D\u53EF\u4EE5\u4E3A\u7A7A\u4F46\u662F\u4E0D\u80FD\u4E3A\u4E00\u4E2A\u7A7A\u5B57\u7B26\u4E32

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:139
# args: 
rootVolumePoolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = \u6839\u6570\u636E\u76D8\u6C60\u540D\u53EF\u4EE5\u4E3A\u7A7A\u4F46\u662F\u4E0D\u80FD\u4E3A\u4E00\u4E2A\u7A7A\u5B57\u7B26\u4E32

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:144
# args: 
imageCachePoolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = \u955C\u50CF\u7F13\u5B58\u6C60\u540D\u53EF\u4EE5\u4E3A\u7A7A\u4F46\u662F\u4E0D\u80FD\u4E3A\u7A7A\u5B57\u7B26\u4E32

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:167
# args: existing
cannot\ add\ ceph\ backup\ storage,\ there\ has\ been\ some\ ceph\ backup\ storage\ using\ mon[hostnames\:%s] = \u65E0\u6CD5\u6DFB\u52A0ceph\u5907\u4EFD\u5B58\u50A8\uFF0C\u5DF2\u7ECF\u6709\u67D0\u4E2Aceph\u5907\u4EFD\u5B58\u50A8\u4F7F\u7528mon[\u4E3B\u673A\u540D\uFF1A{0}]

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:175
# args: 
poolName\ is\ required\ when\ importImages\ is\ true = \u5F53importImages\u4E3A\u771F\u7684\u65F6\u5019\u5FC5\u987B\u586B\u5199\u6C60\u540D

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:173
# args: 
poolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = \u6C60\u540D\u53EF\u4EE5\u4E3A\u7A7A\u4F46\u662F\u4E0D\u80FD\u662F\u7A7A\u7684\u5B57\u7B26\u4E32

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:436
# args: self.getUuid()
all\ ceph\ mons\ are\ Disconnected\ in\ ceph\ backup\ storage[uuid\:%s] = \u6240\u6709\u5728ceph\u5907\u4EFD\u5B58\u50A8[uuid:{0}]\u4E2D\u7684ceph\u7684mons\u90FD\u5904\u4E8E\u5931\u8054\u72B6\u6001

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:839
# args: self.getUuid(),JSONObjectUtil.toJsonString(errorCodes)
unable\ to\ connect\ to\ the\ ceph\ backup\ storage[uuid\:%s].\ Failed\ to\ connect\ all\ ceph\ mons.\ Errors\ are\ %s = \u65E0\u6CD5\u8FDE\u63A5\u5230ceph\u5907\u4EFD\u5B58\u50A8[uuid:{0}]\u3002\u65E0\u6CD5\u4E0E\u6240\u6709\u7684ceph mons\u8FDE\u63A5\u3002\u9519\u8BEF\u662F{1}

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:926
# args: otherCeph.getName(),otherCeph.getUuid(),fsId
there\ is\ another\ CEPH\ backup\ storage[name\:%s,\ uuid\:%s]\ with\ the\ same\ FSID[%s],\ you\ cannot\ add\ the\ same\ CEPH\ setup\ as\ two\ different\ backup\ storage = \u6709\u53E6\u5916\u4E00\u4E2ACEPH\u5907\u4EFD\u5B58\u50A8[name:{0}, uuid:{1}]\u6709\u76F8\u540C\u7684FSIO[{2}]\uFF0C\u4F60\u4E0D\u80FD\u6DFB\u52A0\u540C\u6837\u7684CEPH\u4E3A\u4E24\u4E2A\u4E0D\u540C\u7684\u5907\u4EFD\u5B58\u50A8

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:1330
# args: 
unable\ to\ add\ mon\ to\ ceph\ backup\ storage = \u65E0\u6CD5\u6DFB\u52A0mon\u5230ceph\u5907\u4EFD\u5B58\u50A8

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageMonBase.java:88
# args: uuid
cannot\ update\ status\ of\ the\ ceph\ backup\ storage\ mon[uuid\:%s],\ it\ has\ been\ deleted.This\ error\ can\ be\ ignored = \u65E0\u6CD5\u66F4\u65B0ceph\u5907\u4EFD\u5B58\u50A8mon[uuid:{0}]\uFF0C\u4ED6\u5DF2\u7ECF\u88AB\u5220\u9664\u3002\u8FD9\u4E2A\u9519\u8BEF\u53EF\u4EE5\u88AB\u5FFD\u7565

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:1658
# args: path,JSONObjectUtil.toJsonString(errorCodes)
all\ mons\ failed\ to\ execute\ http\ call[%s],\ errors\ are\ %s = \u6240\u6709\u7684mons\u90FD\u65E0\u6CD5\u6267\u884Chttp call[{0}]\uFF0C\u9519\u8BEF\u662F{1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2262
# args: 
unable\ to\ connect\ mons = \u65E0\u6CD5\u8FDE\u63A5\u5230mons

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2325
# args: base.getSelf().getHostname(),fsid,getSelf().getFsid()
the\ mon[ip\:%s]\ returns\ a\ fsid[%s]\ different\ from\ the\ current\ fsid[%s]\ of\ the\ cep\ cluster,are\ you\ adding\ a\ mon\ not\ belonging\ to\ current\ cluster\ mistakenly? = mon[ip:{0}]\u8FD4\u56DE\u4E86\u4E00\u4E2Afsid[{1}]\u548C\u5F53\u524Dceph\u96C6\u7FA4\u7684fsid[{2}]\u4E0D\u540C\uFF0C\u4F60\u662F\u5426\u9519\u8BEF\u5730\u6DFB\u52A0\u4E86\u4E00\u4E2A\u4E0D\u5C5E\u4E8E\u5F53\u524D\u96C6\u7FA4\u7684mon\uFF1F

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:924
# args: backupStorage.getUuid(),backupStorage.getName(),bsFsid,self.getUuid(),self.getName(),getSelf().getFsid()
the\ backup\ storage[uuid\:%s,\ name\:%s,\ fsid\:%s]\ is\ not\ in\ the\ same\ ceph\ cluster\ with\ the\ primary\ storage[uuid\:%s,\ name\:%s,\ fsid\:%s] = \u5907\u4EFD\u5B58\u50A8[uuid:{0}, name:{1}, fsid:{2}]\u548C\u4E3B\u5B58\u50A8[uuid:{3}, name:{4}, fsid:{5}]\u4E0D\u5728\u540C\u4E00\u4E2Aceph\u96C6\u7FA4\u4E2D

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:1645
# args: self.getUuid()
all\ ceph\ mons\ of\ primary\ storage[uuid\:%s]\ are\ not\ in\ Connected\ state = \u6240\u6709\u7684\u4E3B\u5B58\u50A8\u7684ceph mons\u90FD\u4E0D\u5904\u4E8E\u5DF2\u8FDE\u63A5\u72B6\u6001

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:1794
# args: self.getUuid()
ceph\ primary\ storage[uuid\:%s]\ may\ have\ been\ deleted. = Ceph\u4E3B\u5B58\u50A8[uuid:{0}]\u53EF\u80FD\u5DF2\u7ECF\u88AB\u5220\u9664\u3002

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:1715
# args: self.getUuid(),JSONObjectUtil.toJsonString(errorCodes)
unable\ to\ connect\ to\ the\ ceph\ primary\ storage[uuid\:%s].\ Failed\ to\ connect\ all\ ceph\ mons.\ Errors\ are\ %s = \u65E0\u6CD5\u8FDE\u63A5\u5230ceph\u4E3B\u5B58\u50A8[uuid:{0}]\u3002\u8FDE\u63A5\u6240\u6709ceph mons\u5931\u8D25\u3002\u9519\u8BEF\u662F{1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:1786
# args: 
the\ fsid\ returned\ by\ mons\ are\ mismatching,\ it\ seems\ the\ mons\ belong\ to\ different\ ceph\ clusters\:\n = mons\u8FD4\u56DE\u7684fsid\u4E0D\u5339\u914D\uFF0C\u4F3C\u4E4Emons\u5C5E\u4E8E\u4E0D\u540C\u7684ceph\u96C6\u7FA4

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:1804
# args: otherCeph.getName(),otherCeph.getUuid(),fsId
there\ is\ another\ CEPH\ primary\ storage[name\:%s,\ uuid\:%s]\ with\ the\ same\ FSID[%s],\ you\ cannot\ add\ the\ same\ CEPH\ setup\ as\ two\ different\ primary\ storage = \u6709\u53E6\u5916\u4E00\u4E2ACEPH\u4E3B\u5B58\u50A8[name:{0}, uuid:{1}] \u6709\u76F8\u540C\u7684 FSID[{2}]\uFF0C\u4F60\u4E0D\u80FD\u6DFB\u52A0\u76F8\u540C\u7684CEPH\u8BBE\u7F6E\u5230\u4E24\u4E2A\u4E0D\u540C\u7684\u4E3B\u5B58\u50A8

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2119
# args: mon.getSelf().getUuid(),self.getUuid(),self.getName(),errorCode
failed\ to\ reconnect\ the\ mon[uuid\:%s]\ server\ of\ the\ ceph\ primary\ storage[uuid\:%s,\ name\:%s],\ %s = \u91CD\u8FDEceph\u4E3B\u5B58\u50A8[uuid:{1}, name:{2}]\u7684mon\u670D\u52A1[uuid:{0}]\u5931\u8D25\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{3}\u3002

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2028
# args: self.getUuid(),self.getName(),mon.getSelf().getUuid(),res.error
the\ ceph\ primary\ storage[uuid\:%s,\ name\:%s]\ is\ down,\ as\ one\ mon[uuid\:%s]\ reports\ an\ operation\ failure[%s] = ceph\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}]\u5173\u95ED\uFF0C\u56E0\u4E3A\u4E00\u4E2Amon[uuid:{2}]\u62A5\u544A\u4E86\u4E00\u4E2A\u64CD\u4F5C\u5931\u8D25[{3}]

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2306
# args: 
unable\ to\ add\ mon\ to\ ceph\ primary\ storage = \u65E0\u6CD5\u6DFB\u52A0mon\u5230ceph\u4E3B\u5B58\u50A8

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2498
# args: bsType
unable\ to\ upload\ bits\ to\ the\ backup\ storage[type\:%s],\ we\ only\ support\ CEPH = \u65E0\u6CD5\u4E0A\u4F20bits\u5230\u5907\u4EFD\u5B58\u50A8[type:{0}]\uFF0C\u4EC5\u652F\u6301CEPH

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2541
# args: 
backing\ up\ snapshots\ to\ backup\ storage\ is\ a\ depreciated\ feature,\ which\ will\ be\ removed\ in\ future\ version = \u5907\u4EFD\u5FEB\u7167\u5230\u5907\u4EFD\u5B58\u50A8\u662F\u4E00\u4E2A\u5F03\u7528\u7684\u529F\u80FD\uFF0C\u5C06\u4F1A\u5728\u672A\u6765\u7248\u672C\u4E2D\u88AB\u79FB\u9664

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:256
# args: vol.getPrimaryStorageUuid()
cannot\ find\ any\ Connected\ ceph\ mon\ for\ the\ primary\ storage[uuid\:%s] = \u65E0\u6CD5\u627E\u5230\u4E00\u53F0\u5904\u4E8EConnected\u72B6\u6001\u7684\u7528\u4E8E\u76D1\u63A7Ceph\u4E3B\u5B58\u50A8[uuid:{0}]\u7684\u76D1\u63A7\u8282\u70B9

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageMonBase.java:88
# args: uuid
cannot\ update\ status\ of\ the\ ceph\ primary\ storage\ mon[uuid\:%s],\ it\ has\ been\ deleted.This\ error\ can\ be\ ignored = \u4E0D\u80FD\u66F4\u65B0\u4E00\u53F0\u5DF2\u7ECF\u88AB\u5220\u9664\u7684Ceph\u4E3B\u5B58\u50A8\u76D1\u63A7\u8282\u70B9[uuid:{0}]\uFF0C\u8FD9\u4E2A\u9519\u8BEF\u53EF\u88AB\u5FFD\u7565

# at: src/main/java/org/zstack/storage/fusionstor/primary/FusionstorPrimaryStorageBase.java:1661
# args: self.getUuid()
fusionstor\ primary\ storage[uuid\:%s]\ may\ have\ been\ deleted. = Fusionstor\u4E3B\u5B58\u50A8[uuid:{0}]\u53EF\u80FD\u5DF2\u7ECF\u88AB\u5220\u9664\u3002

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:77
# args: 
zoneUuids,\ clusterUuids,\ primaryStorageUuids\ must\ have\ at\ least\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = \u533A\u57DF\u3001\u96C6\u7FA4\u3001\u4E3B\u5B58\u50A8\u7684Uuids\u4E2D\u5FC5\u987B\u81F3\u5C11\u6709\u4E00\u4E2A\u4E0D\u4E3A\u7A7A\u5217\u8868\uFF0C\u6216\u8005\u5168\u90E8\u7684pass\u90FD\u8BBE\u7F6E\u4E3Atrue

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:99
# args: msg.getPrimaryStorageUuid(),msg.getClusterUuid()
primary\ storage[uuid\:%s]\ has\ not\ been\ attached\ to\ cluster[uuid\:%s]\ yet = \u4E3B\u5B58\u50A8[uuid:{0}]\u8FD8\u672A\u52A0\u8F7D\u5230\u96C6\u7FA4[uuid:{1}]\u4E0A

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:116
# args: msg.getPrimaryStorageUuid(),msg.getClusterUuid()
primary\ storage[uuid\:%s]\ has\ been\ attached\ to\ cluster[uuid\:%s] = \u4E3B\u5B58\u50A8[uuid:{0}]\u5DF2\u88AB\u52A0\u8F7D\u5230\u96C6\u7FA4[uuid:{1}]\u4E0A

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:131
# args: msg.getPrimaryStorageUuid(),msg.getClusterUuid()
primary\ storage[uuid\:%s]\ and\ cluster[uuid\:%s]\ are\ not\ in\ the\ same\ zone = \u4E3B\u5B58\u50A8[uuid:{0}]\u8FD8\u96C6\u7FA4[uuid:{1}]\u4E0D\u5728\u540C\u4E00\u4E2A\u533A\u57DF\u5185

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:155
# args: url
url[%s]\ has\ been\ occupied,\ it\ cannot\ be\ duplicate\ in\ same\ cluster = 

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:151
# args: msg.getPrimaryStorageUuid(),clusterUuidsString
primary\ storage[uuid\:%s]\ cannot\ be\ deleted\ for\ still\ being\ attached\ to\ cluster[uuid\:%s]. = \u4E0D\u80FD\u5220\u9664\u4E3B\u5B58\u50A8[uuid:{0}]\uFF0C\u56E0\u4E3A\u5B83\u8FD8\u88AB\u52A0\u8F7D\u5728\u96C6\u7FA4[uuid:{1}]\u4E0A

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageAvoidAllocatorFlow.java:50
# args: spec.getAvoidPrimaryStorageUuids()
after\ removing\ primary\ storage%s\ to\ avoid,\ there\ is\ no\ candidate\ primary\ storage\ anymore = \u628A\u4E3B\u5B58\u50A8{0}\u79FB\u5230\u6392\u9664\u5217\u8868\u540E\uFF0C\u5C31\u6CA1\u6709\u7533\u8BF7\u7684\u4E3B\u5B58\u50A8\u4E86

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:426
# args: bsUuid,self.getZoneUuid(),self.getUuid()
backup\ storage[uuid\:%s]\ is\ not\ attached\ to\ zone[uuid\:%s]\ the\ primary\ storage[uuid\:%s]\ belongs\ to = \u955C\u50CF\u5B58\u50A8[uuid:{0}]\u6CA1\u6709\u52A0\u8F7D\u5230\u4E3B\u5B58\u50A8[uuid:{2}]\u6240\u5728\u7684\u533A\u57DF[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:533
# args: 
operation\ not\ supported = \u4E0D\u652F\u6301\u7684\u64CD\u4F5C

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:1095
# args: volumeUuid
cannot\ attach\ volume[uuid\:%s]\ whose\ primary\ storage\ is\ Maintenance = \u65E0\u6CD5\u6302\u8F7D\u4E91\u76D8[uuid:{0}]\uFF0C\u5176\u4E3B\u5B58\u50A8\u5904\u4E8E\u7EF4\u62A4\u6A21\u5F0F\u3002

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageCapacityUpdater.java:280
# args: size,capacityVO.getUuid()
cannot\ reserve\ %s\ bytes\ on\ the\ primary\ storage[uuid\:%s],\ it's\ short\ of\ available\ capacity = \u65E0\u6CD5\u5728\u4E3B\u5B58\u50A8[uuid:{1}]\u4E0A\u4FDD\u7559{0}\u5B57\u8282\uFF0C\u53EF\u7528\u5BB9\u91CF\u4E0D\u8DB3

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:88
# args: systemTag,uuid
%s\ is\ invalid.\ %s\ is\ not\ a\ valid\ zstack\ uuid = {0}\u662F\u65E0\u6548\u7684\uFF0C{1}\u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u7684ZStack uuid

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:92
# args: resourceUuid
no\ primary\ storage[uuid\:%s]\ found = \u627E\u4E0D\u5230\u4E3B\u5B58\u50A8[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:571
# args: errs
cannot\ find\ any\ qualified\ primary\ storage,\ errors\ are\ %s = \u627E\u4E0D\u5230\u5408\u683C\u7684\u4E3B\u5B58\u50A8\uFF0C\u9519\u8BEF\u4E3A:{0}

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageReservedCapacityAllocatorFlow.java:48
# args: PrimaryStorageGlobalConfig.RESERVED_CAPACITY.value(),spec.getSize()
after\ subtracting\ reserved\ capacity[%s],\ there\ is\ no\ primary\ storage\ having\ required\ size[%s\ bytes] = \u91CA\u653E\u4FDD\u7559\u5BB9\u91CF[{0}]\u540E\uFF0C\u5C31\u6CA1\u6709\u4E3B\u5B58\u50A8\u62E5\u6709\u8981\u6C42\u7684\u5927\u5C0F\uFF1A{1}\u5B57\u8282\u4E86

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorExtension.java:126
# args: uuid
cannot\ find\ primary\ storage[uuid\:%s],\ the\ uuid\ is\ specified\ in\ instance\ offering\ or\ disk\ offering = \u627E\u4E0D\u5230\u7531\u5B9E\u4F8B\u89C4\u683C\u6216\u4E91\u76D8\u89C4\u683C\u6307\u5B9A\u7684\u4E3B\u5B58\u50A8[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorExtension.java:166
# args: tag
cannot\ find\ primary\ storage\ having\ user\ tag[%s].\ The\ user\ tag\ is\ specified\ in\ instance\ offering\ or\ disk\ offering = \u627E\u4E0D\u5230\u7531\u5B9E\u4F8B\u89C4\u683C\u6216\u4E91\u76D8\u89C4\u683C\u6307\u5B9A\u7684\u62E5\u6709\u6307\u5B9A\u7528\u6237\u6807\u7B7E\u7684\u4E3B\u5B58\u50A8[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorFlow.java:85
# args: extp.getClass().getName()
PrimaryStorageTagAllocatorExtensionPoint[%s]\ returns\ zero\ primary\ storage\ candidate = \u4E3B\u5B58\u50A8\u6807\u7B7E\u5206\u914D\u63D2\u4EF6[{0}]\u8FD4\u56DE\u96F6\u4E2A\u4E3B\u5B58\u50A8\u7533\u8BF7

# at: src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java:198
# args: 
System\ can't\ find\ imagestore\ backup\ Storage.\ Please\ do\ not\ set\ imagestore\ backup\ Storage\ server\ IP\ to\ localhost(127.*.*.*), = \u7CFB\u7EDF\u627E\u4E0D\u5230\u955C\u50CF\u4ED3\u5E93\u955C\u50CF\u5B58\u50A8\u3002\u8BF7\u4E0D\u8981\u8BBE\u7F6E\u955C\u50CF\u5B58\u50A8\u670D\u52A1IP\u4E3Alocalhost(127.*.*.*)

# at: src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java:201
# args: operationSuggestion,greply.getHostname(),backupStorageInstallPath,pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
%s\ failed\ to\ download\ bits\ from\ the\ imagestore\ backup\ storage[hostname\:%s,\ path\:\ %s]\ to\ the\ local\ primary\ storage[uuid\:%s,\ path\:\ %s],\ %s = {0}\u4ECE\u955C\u50CF\u4ED3\u5E93\u955C\u50CF\u5B58\u50A8[hostname:{1}, path: {2}]\u5230\u672C\u5730\u4E3B\u5B58\u50A8[uuid:{3}, path: {4}]\u4E0B\u8F7D\u5931\u8D25\uFF0C{5}

# at: src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java:181
# args: volume.getUuid(),image.getImageUuid(),rsp.getError()
fails\ to\ create\ root\ volume[uuid\:%s]\ from\ cached\ image[path\:%s]\ because\ %s = \u4ECE\u955C\u50CF[path:{1}]\u521B\u5EFA\u6839\u4E91\u76D8\u5931\u8D25\uFF0C\u56E0\u4E3A{2}

# at: src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java:305
# args: pinv.getUuid(),primaryStorageInstallPath,r.getHostname(),rsp.getError()
failed\ to\ upload\ bits\ from\ the\ local\ storage[uuid\:%s,\ path\:%s]\ to\ image\ store\ [hostname\:%s],\ %s = {0}\u4ECE\u672C\u5730\u4E3B\u5B58\u50A8[uuid:{0}, path: {1}]\u5230\u955C\u50CF\u4ED3\u5E93\u955C\u50CF\u5B58\u50A8[hostname:{2}\u4E0A\u4F20\u5931\u8D25\uFF0C{3}

# at: src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java:230
# args: greply.getHostname(),backupStorageInstallPath,pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
failed\ to\ download\ bits\ from\ the\ imagestore\ backup\ storage[hostname\:%s,\ path\:\ %s]\ to\ the\ nfs\ primary\ storage[uuid\:%s,\ path\:\ %s],\ %s = \u65E0\u6CD5\u4ECEImageStore\u955C\u50CF\u5B58\u50A8[hostname:{0}, path: {1}]\u4E0B\u8F7D\u6570\u636E\u5230NFS\u4E3B\u5B58\u50A8[uuid:{2}, path: {3}]\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{4}\u3002

# at: src/main/java/org/zstack/storage/primary/imagestore/smp/KvmAgentCommandDispatcher.java:67
# args: this.primaryStorageUuid
cannot\ find\ any\ connected\ host\ to\ perform\ the\ operation,\ it\ seems\ all\ KVM\ hosts\ in\ the\ clusters\ attached\ with\ the\ shared\ mount\ point\ storage[uuid\:%s]\ are\ disconnected = \u627E\u4E0D\u5230\u4EFB\u4F55Connected\u7684\u7269\u7406\u673A\u53BB\u6267\u884C\u64CD\u4F5C\uFF0C\u770B\u8D77\u6765\u52A0\u8F7D\u5230shared mount point\u5B58\u50A8\u7684\u96C6\u7FA4\u4E0A\u6240\u6709\u7269\u7406\u673A\u90FD\u5904\u4E8EDisconnected\u72B6\u6001

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageAllocateCapacityFlow.java:175
# args: requiredPrimaryStorageUuidForDataVolume.getUuid(),requiredPrimaryStorageUuidForDataVolume.getType(),LocalStorageConstants.LOCAL_STORAGE_TYPE
The\ cluster\ mounts\ multiple\ primary\ storage[%s(%s),\ other\ non-LocalStorage\ primary\ storage],\ primaryStorageUuidForDataVolume\ cannot\ be\ specified\ %s = 

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageAllocateCapacityFlow.java:95
# args: PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,clusterUuid
There\ is\ no\ LocalStorage\ primary\ storage[state\=%s,status\=%s]\ on\ the\ cluster[%s].\ Check\ the\ state/status\ of\ primary\ storage\ and\ make\ sure\ they\ have\ been\ attached\ to\ clusters = 

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageAllocateCapacityFlow.java:98
# args: psUuid
the\ type\ of\ primary\ storage[uuid\:%s]\ chosen\ is\ not\ local\ storage,\ check\ if\ the\ resource\ can\ be\ created\ on\ other\ storage\ when\ cluster\ has\ attached\ local\ primary\ storage = \u88AB\u9009\u62E9\u7684\u4E3B\u5B58\u50A8[uuid:{0}]\u7684\u7C7B\u578B\u4E0D\u662F\u672C\u5730\u5B58\u50A8\uFF0C\u68C0\u67E5\u8BE5\u8D44\u6E90\u80FD\u5426\u5728\u5176\u4ED6\u5B58\u50A8\u4E0A\u88AB\u521B\u5EFA\u5F53\u96C6\u7FA4\u5DF2\u7ECF\u6302\u8F7D\u4E86\u672C\u5730\u5B58\u50A8\u3002

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:73
# args: msg.getVolumeUuid()
the\ volume[uuid\:%s]\ is\ not\ on\ any\ local\ primary\ storage = \u4E91\u76D8[uuid:{0}]\u4E0D\u5728\u4EFB\u4E00\u672C\u5730\u4E3B\u5B58\u50A8\u4E0A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:77
# args: msg.getVolumeUuid(),msg.getDestHostUuid()
the\ volume[uuid\:%s]\ is\ already\ on\ the\ host[uuid\:%s] = \u4E91\u76D8[uuid:{0}]\u5DF2\u7ECF\u5728\u7269\u7406\u673A[uuid:{1}]\u4E0A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:82
# args: msg.getPrimaryStorageUuid()
the\ primary\ storage[uuid\:%s]\ is\ not\ found = \u4E3B\u5B58\u50A8[uuid:{0}]\u672A\u627E\u5230

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:86
# args: ref.getPrimaryStorageUuid()
the\ primary\ storage[uuid\:%s]\ is\ disabled\ or\ maintenance\ cold\ migrate\ is\ not\ allowed = \u4E3B\u5B58\u50A8[uuid:{0}]\u4E3ADisabled\u6216\u7EF4\u62A4\u72B6\u6001\u65F6\u4E0D\u5141\u8BB8\u51B7\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:93
# args: msg.getDestHostUuid(),ref.getPrimaryStorageUuid(),msg.getVolumeUuid()
the\ dest\ host[uuid\:%s]\ doesn't\ belong\ to\ the\ local\ primary\ storage[uuid\:%s]\ where\ the\ volume[uuid\:%s]\ locates = \u76EE\u6807\u7269\u7406\u673A[uuid:{0}]\u4E0D\u5C5E\u4E8E\u4E91\u76D8[uuid:{2}]\u4F4D\u4E8E\u7684\u672C\u5730\u4E3B\u5B58\u50A8[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:99
# args: msg.getVolumeUuid()
the\ volume[uuid\:%s]\ is\ not\ in\ status\ of\ Ready,\ cannot\ migrate\ it = \u4E91\u76D8[uuid:{0}]\u7684\u72B6\u6001\u4E0D\u662FReady\uFF0C\u4E0D\u80FD\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:124
# args: vol.getUuid(),vol.getVmInstanceUuid(),vmstate
the\ volume[uuid\:%s]\ is\ the\ root\ volume\ of\ the\ vm[uuid\:%s].\ Currently\ the\ vm\ is\ in\ state\ of\ %s,\ please\ stop\ it\ before\ migration = \u4E91\u76D8[uuid:{0}]\u4E0D\u662F\u4E91\u4E3B\u673A[uuid:{1}]\u7684\u6839\u4E91\u76D8\u3002\u73B0\u5728\u8FD9\u4E2A\u4E91\u4E3B\u673A\u7684\u72B6\u6001\u4E3A{2}\uFF0C\u8BF7\u5728\u8FC1\u79FB\u524D\u505C\u6B62\u5B83

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:133
# args: vol.getUuid(),vol.getVmInstanceUuid(),count
the\ volume[uuid\:%s]\ is\ the\ root\ volume\ of\ the\ vm[uuid\:%s].\ Currently\ the\ vm\ still\ has\ %s\ data\ volumes\ attached,\ please\ detach\ them\ before\ migration = \u4E91\u76D8[uuid:{0}]\u4E0D\u662F\u4E91\u4E3B\u673A[uuid:{1}]\u7684\u6839\u4E91\u76D8\u3002\u73B0\u5728\u8FD9\u4E2A\u4E91\u4E3B\u673A\u4ECD\u7136\u6709\u6302\u8F7D\u7684\u6570\u636E\u4E91\u76D8\uFF0C\u8BF7\u5728\u8FC1\u79FB\u524D\u5378\u8F7D

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:162
# args: originClusterUuid,clusterUuid,vol.getVmInstanceUuid()
The\ two\ clusters[uuid\:%s,uuid\:%s]\ cannot\ access\ each\ other\ in\ l2\ network\ \ when\ migrate\ the\ vm[uuid\:%s]\ to\ another\ cluster = \u4E24\u4E2A\u96C6\u7FA4[uuid:{0},uuid:{1}]\u65E0\u6CD5\u5728L2\u7F51\u7EDC\u4E2D\u4E92\u76F8\u8BBF\u95EE\u5BF9\u65B9\uFF0C\u5F53\u8FC1\u79FB\u4E91\u4E3B\u673A[uuid:{2}]\u4ECE\u5176\u4E2D\u4E00\u4E2A\u96C6\u7FA4\u5230\u53E6\u4E00\u4E2A\u96C6\u7FA4\u65F6\u3002

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:103
# args: vol.getUuid(),vol.getName(),vol.getVmInstanceUuid()
the\ data\ volume[uuid\:%s,\ name\:\ %s]\ is\ still\ attached\ on\ the\ VM[uuid\:%s].\ Please\ detach\ it\ before\ migration = \u6570\u636E\u4E91\u76D8[uuid:{0}, \u540D\u79F0: {1}]\u4ECD\u7136\u6302\u8F7D\u5728\u4E91\u4E3B\u673A[uuid:{2}]\u4E0A\uFF0C\u8BF7\u5728\u8FC1\u79FB\u524D\u5378\u8F7D

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:130
# args: msg.getUrl()
the\ url[%s]\ is\ not\ an\ absolute\ path\ starting\ with\ '/' = url[{0}]\u4E0D\u662F\u4E00\u4E2A\u4EE5'/'\u5F00\u5934\u7684\u7EDD\u5BF9\u8DEF\u5F84

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:210
# args: msg.getPrimaryStorageUuid()
The\ primary\ storage[uuid\:%s]\ is\ disabled\ cold\ migrate\ is\ not\ allowed = \u4E3B\u5B58\u50A8[uuid:{0}]Disabled\u65F6\u4E0D\u5141\u8BB8\u51B7\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:274
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ not\ on\ the\ local\ storage\ anymore,it\ may\ have\ been\ deleted = \u4E91\u76D8[uuid:{0}]\u5DF2\u7ECF\u4E0D\u5728\u672C\u5730\u5B58\u50A8\u4E0A\uFF0C\u53EF\u80FD\u5DF2\u7ECF\u88AB\u5220\u9664

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:778
# args: msg.getImage().getUuid(),self.getUuid(),JSONObjectUtil.toJsonString(ret.errorCodes)
failed\ to\ download\ image[uuid\:%s]\ to\ all\ hosts\ in\ the\ local\ storage[uuid\:%s].\ %s = \u5728\u672C\u5730\u5B58\u50A8[uuid:{1}]\u4E0A\u5F80\u6240\u6709\u7269\u7406\u673A\u4E0B\u8F7D\u955C\u50CF[uuid:{0}]\u5931\u8D25\u3002{2}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:1106
# args: resUuid,huuid
Resource[uuid\:%s]\ can\ only\ be\ operated\ on\ host[uuid\:%s],\ but\ the\ host\ has\ been\ deleted = \u8D44\u6E90[uuid:{0}]\u53EA\u80FD\u5728\u7269\u7406\u673A[uuid:{0}]\u4E0A\u5BF9\u5176\u64CD\u4F5C\uFF0C\u4F46\u662F\u8BE5\u7269\u7406\u673A\u5DF2\u7ECF\u88AB\u5220\u9664\u4E86

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:1099
# args: 
cannot\ find\ any\ host\ which\ has\ resource[uuid\:%s] = \u627E\u4E0D\u5230\u4EFB\u4F55\u62E5\u6709\u8D44\u6E90[uuid:{0}]\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:1296
# args: hostUuid,self.getUuid(),ref.getAvailableCapacity(),size
host[uuid\:\ %s]\ of\ local\ primary\ storage[uuid\:\ %s]\ doesn't\ have\ enough\ capacity[current\:\ %s\ bytes,\ needed\:\ %s] = \u4E3B\u5B58\u50A8[uuid:{1}]\u4E0A\u7684\u7269\u7406\u673A[uuid:{0}]\u6CA1\u6709\u8DB3\u591F\u7684\u5BB9\u91CF[\u73B0\u5728: {2} bytes, \u9700\u8981: {3}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:1556
# args: msg.getVolumeUuid(),self.getUuid()
unable\ to\ create\ the\ data\ volume[uuid\:\ %s]\ on\ a\ local\ primary\ storage[uuid\:%s],\ because\ the\ hostUuid\ is\ not\ specified. = \u4E0D\u80FD\u5728\u672C\u5730\u4E3B\u5B58\u50A8[uuid:{1}]\u4E0A\u521B\u5EFA\u4E91\u76D8[uuid:{0}]\uFF0C\u56E0\u4E3A\u7269\u7406\u673Auuid\u6CA1\u6709\u6307\u5B9A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:334
# args: spec.getVmInventory().getHypervisorType()
local\ storage\ doesn't\ support\ live\ migration\ for\ hypervisor[%s] = \u672C\u5730\u5B58\u50A8\u4E0D\u652F\u6301\u865A\u62DF\u673A\u76D1\u89C6\u5668[{0}]\u4E0A\u7684\u70ED\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:510
# args: volume.getUuid(),vm.getUuid(),vm.getRootVolumeUuid(),rootHost,volume.getUuid(),dataHost
cannot\ attach\ the\ data\ volume[uuid\:%s]\ to\ the\ vm[uuid\:%s].\ Both\ vm's\ root\ volume\ and\ the\ data\ volume\ are\ on\ local\ primary\ storage,\ but\ they\ are\ on\ different\ hosts.\ The\ root\ volume[uuid\:%s]\ is\ on\ the\ host[uuid\:%s]\ but\ the\ data\ volume[uuid\:\ %s]\ is\ on\ the\ host[uuid\:\ %s] = \u4E0D\u80FD\u52A0\u8F7D\u6570\u636E\u4E91\u76D8[uuid:{0}]\u5230\u4E91\u4E3B\u673A[uuid:{1}]\u3002\u6839\u4E91\u76D8\u548C\u6570\u636E\u4E91\u76D8\u90FD\u5728\u672C\u5730\u4E3B\u5B58\u50A8\u4E0A\uFF0C\u4F46\u4ED6\u4EEC\u5C5E\u4E8E\u4E0D\u540C\u7684\u7269\u7406\u673A\u3002\u6839\u4E91\u76D8[uuid:{2}]\u5728\u7269\u7406\u673A[uuid:{3}]\u4E0A\uFF0C\u4F46\u6570\u636E\u4E91\u76D8[uuid:{4}]\u5728\u7269\u7406\u673A[uuid:{5}]\u4E0A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:716
# args: vol.getName(),vol.getUuid(),vol.getPrimaryStorageUuid()
the\ data\ volume[name\:%s,\ uuid\:%s]\ is\ on\ the\ local\ storage[uuid\:%s];\ however,the\ host\ on\ which\ the\ data\ volume\ is\ has\ been\ deleted.\ Unable\ to\ recover\ this\ volume = \u6570\u636E\u4E91\u76D8[name:{0}, uuid:{1}]\u5728\u672C\u5730\u5B58\u50A8[uuid:{2}]\u4E0A\uFF1B\u7136\u800C\u7269\u7406\u673A\u5185\u7684\u6570\u636E\u4E91\u76D8\u5DF2\u7ECF\u88AB\u5220\u9664\u4E86

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:759
# args: vm.getUuid(),vm.getName(),psuuid
unable\ to\ recover\ the\ vm[uuid\:%s,\ name\:%s].\ The\ vm's\ root\ volume\ is\ on\ the\ local\ storage[uuid\:%s];\ however,\ the\ host\ on\ which\ the\ root\ volume\ is\ has\ been\ deleted = \u4E0D\u80FD\u56DE\u590D\u4E91\u4E3B\u673A[uuid:{0}, name:{1}]\u3002\u4E91\u4E3B\u673A\u7684\u6839\u4E91\u76D8\u5728\u672C\u5730\u5B58\u50A8[uuid:{2}]\u4E0A\uFF1B\u7136\u800C\u7269\u7406\u673A\u5185\u7684\u6839\u4E91\u76D8\u5DF2\u7ECF\u88AB\u5220\u9664\u4E86

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:779
# args: vm.getUuid()
unable\ to\ live\ migrate\ vm[uuid\:%s]\ with\ data\ volumes\ on\ local\ storage.\ Need\ detach\ all\ data\ volumes\ first. = \u65E0\u6CD5\u5728\u672C\u5730\u5B58\u50A8\u4E0A\u8FC1\u79FB\u6302\u8F7D\u4E86\u6570\u636E\u4E91\u76D8\u7684\u4E91\u4E3B\u673A[uuid:{0}]\u3002\u9700\u8981\u5148\u624B\u52A8\u5378\u8F7D\u6240\u6709\u6570\u636E\u4E91\u76D8\u3002

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:784
# args: vm.getUuid(),vm.getPlatform()
unable\ to\ live\ migrate\ vm[uuid\:%s]\ with\ local\ storage.\ Only\ linux\ guest\ is\ supported.\ Current\ platform\ is\ [%s] = \u65E0\u6CD5\u5728\u672C\u5730\u5B58\u50A8\u4E0A\u8FC1\u79FB\u4E91\u4E3B\u673A[uuid:{0}]\u3002\u53EA\u6709Linux\u7C7B\u578B\u7684\u4E91\u4E3B\u673A\u652F\u6301\u8BE5\u64CD\u4F5C\u3002\u5F53\u524D\u7C7B\u578B\u4E3A\uFF1A[{1}]\u3002

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:796
# args: vm.getUuid()
unable\ to\ live\ migrate\ with\ local\ storage.\ The\ vm[uuid\:%s]\ has\ volumes\ on\ local\ storage,to\ protect\ your\ data,\ please\ stop\ the\ vm\ and\ do\ the\ volume\ migration = \u672C\u5730\u5B58\u50A8\u4E0D\u80FD\u70ED\u8FC1\u79FB\u3002\u4E91\u4E3B\u673A[uuid:{0}]\u5728\u672C\u5730\u5B58\u50A8\u4E0A\u6709\u4E91\u76D8\uFF0C\u4E3A\u4E86\u4FDD\u62A4\u4F60\u7684\u6570\u636E\uFF0C\u8BF7\u505C\u6B62\u4E91\u4E3B\u673A\u505A\u4E91\u76D8\u8FC1\u79FB

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:841
# args: LocalStorageSystemTags.DEST_HOST_FOR_CREATING_DATA_VOLUME.getTagFormat()
To\ create\ data\ volume\ on\ the\ local\ primary\ storage,\ you\ must\ specify\ the\ host\ that\ the\ data\ volume\ is\ going\ to\ be\ created\ using\ the\ system\ tag\ [%s] = \u8981\u5728\u672C\u5730\u4E3B\u5B58\u50A8\u4E0A\u521B\u5EFA\u6570\u636E\u4E91\u76D8\uFF0C\u5FC5\u987B\u7528\u7CFB\u7EDF\u6807\u7B7E[0]\u6307\u5B9A\u521B\u5EFA\u6570\u636E\u4E91\u76D8\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:851
# args: hostUuid,msg.getPrimaryStorageUuid()
the\ host[uuid\:%s]\ doesn't\ belong\ to\ the\ local\ primary\ storage[uuid\:%s] = \u7269\u7406\u673A[uuid:{0}] \u4E0D\u5C5E\u4E8E\u672C\u5730\u4E3B\u5B58\u50A8[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmFactory.java:107
# args: context.getInventory().getUuid(),priUuid,reply.getError()
KVM\ host[uuid\:\ %s]\ fails\ to\ be\ added\ into\ local\ primary\ storage[uuid\:\ %s],\ %s = \u7269\u7406\u673A[uuid:{0}]\u6DFB\u52A0\u5230\u4E3B\u5B58\u50A8[uuid:{1}]\u5931\u8D25\uFF0C{2}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmMigrateVmFlow.java:1099
# args: p.volume.getUuid(),p.volume.getName(),dstHostUuid
unable\ to\ create\ an\ empty\ volume[uuid\:%s,\ name\:%s]\ on\ the\ kvm\ host[uuid\:%s] = \u4E0D\u80FD\u521B\u5EFA\u7A7A\u7684\u4E91\u76D8[uuid:{0}, name:{1}]\u5728\u7269\u7406\u673A[uuid:{2}]\u4E0A

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmSftpBackupStorageMediatorImpl.java:202
# args: greply.getHostname(),backupStorageInstallPath,pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
failed\ to\ download\ bits\ from\ the\ SFTP\ backup\ storage[hostname\:%s,\ path\:\ %s]\ to\ the\ local\ primary\ storage[uuid\:%s,\ path\:\ %s],\ %s = \u4ECESFTP\u955C\u50CF\u5B58\u50A8[hostname:{0}, path: {1}] \u4E0B\u8F7D\u5230\u672C\u5730\u5B58\u50A8[uuid:{2}, path: {3}]\u5931\u8D25\uFF0C{4}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmSftpBackupStorageMediatorImpl.java:253
# args: pinv.getUuid(),primaryStorageInstallPath,r.getHostname(),backupStorageInstallPath,rsp.getError()
failed\ to\ upload\ bits\ from\ the\ local\ storage[uuid\:%s,\ path\:%s]\ to\ the\ SFTP\ backup\ storage[hostname\:%s,\ path\:%s],\ %s = \u4ECE\u672C\u5730\u5B58\u50A8[uuid:{0}, path: {1}]\u4E0A\u4F20\u5230SFTP\u955C\u50CF\u5B58\u50A8[hostname:{2}, path:{3}]\u5931\u8D25, {4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:31
# args: url,zoneUuid
there\ has\ been\ a\ nfs\ primary\ storage\ having\ url\ as\ %s\ in\ zone[uuid\:%s] = \u5DF2\u7ECF\u5B58\u5728NFS\u4E3B\u5B58\u50A8\u5728\u533A\u57DF[uuid:{1}]\u5185\u62E5\u6709url{0}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:232
# args: vms.size(),StringUtils.join(vms, "\n")
there\ are\ %s\ running\ VMs\ on\ the\ NFS\ primary\ storage,\ please\ stop\ them\ and\ try\ again\:\
%s\
 = \u5728NFS\u4E3B\u5B58\u50A8\u4E0A\u6709{0}\u4E2A\u8FD0\u884C\u4E2D\u7684VM\uFF0C\u8BF7\u5148\u624B\u52A8\u5173\u95ED\u518D\u5C1D\u8BD5\uFF1A\
{1}\
\u3002

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:247
# args: 
cannot\ find\ usable\ backend = \u65E0\u6CD5\u627E\u5230\u53EF\u7528\u7684NFS\u4E3B\u5B58\u50A8\u540E\u7AEF\u3002

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:272
# args: 
no\ usable\ backend\ found = \u65E0\u6CD5\u627E\u5230\u53EF\u7528\u7684NFS\u4E3B\u5B58\u50A8\u540E\u7AEF\u3002

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:411
# args: self.getUuid(),self.getName(),msg.getVolume().getUuid(),msg.getSnapshot().getUuid(),msg.getSnapshot().getName()
no\ host\ in\ Connected\ status\ to\ which\ nfs\ primary\ storage[uuid\:%s,\ name\:%s]\ attached\ found\ to\ revert\ volume[uuid\:%s]\ to\ snapshot[uuid\:%s,\ name\:%s] = \u6CA1\u6709\u627E\u5230\u6302\u8F7D\u5230NFS\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}]\u4E14\u5904\u4E8EConnected\u72B6\u6001\u7684\u7269\u7406\u673A\uFF0C\u65E0\u6CD5\u56DE\u9000\u4E91\u76D8[uuid:{2}]\u5230\u5FEB\u7167[uuid:{3}, name:{4}]\u3002

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:441
# args: self.getUuid(),self.getName(),msg.getVolume().getUuid(),msg.getVolume().getRootImageUuid()
no\ host\ in\ Connected\ status\ to\ which\ nfs\ primary\ storage[uuid\:%s,\ name\:%s]\ attached\ found\ to\ revert\ volume[uuid\:%s]\ to\ image[uuid\:%s] = \u6CA1\u6709\u627E\u5230\u6302\u8F7D\u5230NFS\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}]\u4E14\u5904\u4E8EConnected\u72B6\u6001\u7684\u7269\u7406\u673A\uFF0C\u65E0\u6CD5\u56DE\u9000\u4E91\u76D8[uuid:{2}]\u5230\u955C\u50CF[uuid:{3}]\u3002

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:456
# args: self.getUuid(),sinv.getUuid(),errorCode,NfsPrimaryStorageGlobalConfig.GC_INTERVAL.value(Long.class)
NFS\ primary\ storage[uuid\:%s]\ failed\ to\ delete\ a\ volume\ snapshot[uuid\:%s],\ %s.\ A\ GC\ job[uuid\:%s]\ is\ scheduled\ to\ cleanup\ it\ in\ the\ interval\ of\ %s\ seconds = NFS\u4E3B\u5B58\u50A8[uuid:{0}]\u5220\u9664\u4E00\u4E2A\u4E91\u76D8\u5FEB\u7167[uuid:{1}]\u5931\u8D25\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{2}\u3002\u4E00\u4E2A\u5B9A\u65F6\u4EFB\u52A1\uFF08GC job\uFF09[uuid:{3}]\u88AB\u521B\u5EFA\uFF0C\u4EE5{4}\u79D2\u7684\u95F4\u9694\u91CD\u8BD5\u6E05\u7406\u3002

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:485
# args: vol.getVmInstanceUuid(),state
vm[uuid\:%s]\ is\ not\ Running,\ Paused\ or\ Stopped,\ current\ state\ is\ %s = \u4E91\u4E3B\u673A[uuid:{0}]\u4E0D\u662F\u8FD0\u884C\u4E2D\u3001\u5DF2\u6682\u505C\u6216\u8005\u5DF2\u505C\u6B62\u72B6\u6001\uFF0C\u73B0\u5728\u7684\u72B6\u6001\u662F{1}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:560
# args: self.getUuid()
primary\ storage[uuid\:%s]\ doesn't\ attach\ to\ any\ cluster = \u4E3B\u5B58\u50A8[uuid:{0}]\u6CA1\u6709\u6302\u8F7D\u5230\u4EFB\u4F55\u96C6\u7FA4\u3002

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:736
# args: self.getUuid(),self.getName(),msg.getVolume().getUuid(),msg.getVolume().getName()
the\ NFS\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ usable\ host\ to\ create\ the\ data\ volume[uuid\:%s,\ name\:%s] = NFS\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}]\u65E0\u6CD5\u627E\u5230\u4EFB\u4F55\u53EF\u7528\u7684\u7269\u7406\u673A\u4EE5\u521B\u5EFA\u6570\u636E\u4E91\u76D8[uuid:{2}, name:{3}]\u3002

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:1016
# args: self.getUuid(),self.getName()
the\ NFS\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ hosts\ in\ attached\ clusters\ to\ perform\ the\ operation = NFS\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}]\u4E0D\u80FD\u627E\u5230\u7269\u7406\u673A\u6302\u8F7D\u5230\u96C6\u7FA4\uFF0C\u6267\u884C\u6B64\u64CD\u4F5C

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:1070
# args: self.getUuid(),self.getName(),future.getErrorCode()
unable\ to\ reconnect\ the\ primary\ storage[uuid\:%s,\ name\:%s],\ %s = \u65E0\u6CD5\u91CD\u8FDE\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}]\uFF0C\u9519\u8BEF\u7EC6\u8282\uFF1A{2}\u3002

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:1209
# args: self.getUuid(),self.getName()
the\ NFS\ primary\ storage[uuid\:%s,\ name\:%s]\ has\ not\ attached\ to\ any\ clusters,\ or\ no\ hosts\ in\ the\ attached\ clusters\ are\ connected = NFS\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}] \u6CA1\u6709\u6302\u8F7D\u5230\u4EFB\u4F55\u4E00\u4E2A\u96C6\u7FA4\uFF0C\u6216\u8005\u6302\u8F7D\u5230\u96C6\u7FA4\u7684\u7269\u7406\u673A\u5747\u65E0\u6CD5\u8FDE\u63A5

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:109
# args: psUuid,vmUuid,volumeUuid
the\ NFS\ primary\ storage[uuid\:%s]\ is\ not\ attached\ to\ any\ clusters,\ and\ cannot\ expunge\ the\ root\ volume[uuid\:%s]\ of\ the\ VM[uuid\:%s] = NFS\u4E3B\u5B58\u50A8[uuid:{0}]\u6CA1\u6709\u6302\u8F7D\u5230\u4EFB\u4F55\u96C6\u7FA4\uFF0C\u65E0\u6CD5\u5F7B\u5E95\u5220\u9664VM[uuid:{2}]\u7684\u6839\u4E91\u76D8[uuid:{1}]\u3002

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:185
# args: pri.getUuid()
cannot\ find\ a\ Connected\ host\ to\ execute\ command\ for\ nfs\ primary\ storage[uuid\:%s] = \u5BF9nfs\u4E3B\u5B58\u50A8[uuid:{0}]\u6765\u8BF4\u4E0D\u80FD\u53D1\u73B0\u4E00\u4E2A\u53EF\u8FDE\u63A5\u7684\u7269\u7406\u673A\u6267\u884C\u547D\u4EE4

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:244
# args: pri.getUuid()
cannot\ find\ a\ host\ which\ has\ Connected\ host-NFS\ connection\ to\ execute\ command\ for\ nfs\ primary\ storage[uuid\:%s] = \u627E\u4E0D\u5230\u4E00\u4E2A\u548CNFS\u4E3B\u5B58\u50A8[uuid:{0}]\u5904\u4E8E\u5DF2\u8FDE\u63A5\u72B6\u6001\u7684\u7269\u7406\u673A\u4E3A\u5176\u6267\u884C\u547D\u4EE4

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:225
# args: psUuid,imageFormat
cannot\ find\ proper\ hypervisorType\ for\ primary\ storage[uuid\:%s]\ to\ handle\ image\ format\ or\ volume\ format[%s] = \u5BF9\u4E3B\u5B58\u50A8[uuid:{0}]\u6765\u8BF4\u4E0D\u80FD\u53D1\u73B0\u5408\u9002\u7684\u7BA1\u7406\u7A0B\u5E8F\u7C7B\u578B\u6765\u5904\u7406\u955C\u50CF\u683C\u5F0F\u6216\u4E91\u76D8\u683C\u5F0F[{1}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:206
# args: inv.getUuid(),inv.getName(),clusterUuid,versionInCluster,otherVersion,QCOW3_QEMU_IMG_VERSION,QCOW3_QEMU_IMG_VERSION
unable\ to\ attach\ a\ primary\ storage[uuid\:%s,\ name\:%s]\ to\ cluster[uuid\:%s].\ Kvm\ host\ in\ the\ cluster\ has\ qemu-img\ with\ version[%s];\ but\ the\ primary\ storage\ has\ attached\ to\ another\ cluster\ that\ has\ kvm\ host\ which\ has\ qemu-img\ with\ version[%s].\ qemu-img\ version\ greater\ than\ %s\ is\ incompatible\ with\ versions\ less\ than\ %s,\ this\ will\ causes\ volume\ snapshot\ operation\ to\ fail.\ Please\ avoid\ attaching\ a\ primary\ storage\ to\ clusters\ that\ have\ different\ Linux\ distributions,\ in\ order\ to\ prevent\ qemu-img\ version\ mismatch = \u4E0D\u80FD\u6302\u8F7D\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}]\u5230\u96C6\u7FA4[uuid:{2}].\u96C6\u7FA4\u4E2D\u7684\u7269\u7406\u673A\u5B58\u5728[{3}]\u7248\u672Cqemu-img\uFF1B\u4F46\u662F\u4E3B\u5B58\u50A8\u5DF2\u7ECF\u6302\u8F7D\u5230\u53E6\u4E00\u4E2A\u7269\u7406\u673A\u62E5\u6709[{4}]\u7248\u672Cqemu-img\u7684\u96C6\u7FA4\u3002\u7248\u672C\u5927\u4E8E{5}\u7684qemu-img\u4E0D\u517C\u5BB9\u7248\u672C\u5C0F\u4E8E{6}\uFF0C\u8FD9\u5C06\u4F1A\u9020\u6210\u4E91\u76D8\u5FEB\u7167\u64CD\u4F5C\u5931\u8D25\u3002\u4E3A\u4E86\u9632\u6B62qemu-img\u7248\u672C\u4E0D\u517C\u5BB9\uFF0C\u8BF7\u907F\u514D\u6302\u8F7D\u4E3B\u5B58\u50A8\u5230\u7269\u7406\u673A\u88C5\u6709\u4E0D\u540Clinux\u7248\u672C\u7684\u96C6\u7FA4

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:376
# args: inv.getUuid()
no\ host\ accessed\ to\ the\ nfs[uuid\:%s] = \u6CA1\u6709\u7269\u7406\u673A\u53EF\u4EE5\u8BBF\u95EENFS[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:400
# args: inv.getUuid()
no\ host\ in\ is\ Connected\ or\ primary\ storage[uuid\:%s]\ attach\ no\ cluster = \u6CA1\u6709\u7269\u7406\u673A\u5904\u4E8EConnected\u72B6\u6001\uFF0C\u6216\u4E3B\u5B58\u50A8[uuid:{0}]\u6CA1\u6709\u6302\u8F7D\u5230\u4EFB\u4F55\u96C6\u7FA4\u3002

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:436
# args: psUuid,huuid,reply.isSuccess() ? rsp.getError() : reply.getError()
failed\ to\ ping\ nfs\ primary\ storage[uuid\:%s]\ from\ host[uuid\:%s],because\ %s.\ disconnect\ this\ host-ps\ connection = \u4ECE\u7269\u7406\u673A[uuid:{1}]Ping NFS\u4E3B\u5B58\u50A8[uuid:{0}]\u5931\u8D25\uFF0C\u539F\u56E0\uFF1A{2}\u3002\u65AD\u5F00\u8BE5 \u7269\u7406\u673A-\u4E3B\u5B58\u50A8 \u8FDE\u63A5\u3002

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:502
# args: installPath,inv.getUuid(),rsp.getError()
failed\ to\ check\ existence\ of\ %s\ on\ nfs\ primary\ storage[uuid\:%s],\ %s = \u68C0\u67E5nfs\u4E3B\u5B58\u50A8\u4E2D\u662F\u5426\u5B58\u5728{0}\u5931\u8D25

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:560
# args: context.getInventory().getUuid(),context.getInventory().getName(),mine,e.getKey(),version,QCOW3_QEMU_IMG_VERSION,QCOW3_QEMU_IMG_VERSION
unable\ to\ attach\ a\ primary\ storage\ to\ cluster.\ Kvm\ host[uuid\:%s,\ name\:%s]\ in\ cluster\ has\ qemu-img\ with\ version[%s];\ but\ the\ primary\ storage\ has\ attached\ to\ a\ cluster\ that\ has\ kvm\ host[uuid\:%s],\ which\ has\ qemu-img\ with\ version[%s].\ qemu-img\ version\ greater\ than\ %s\ is\ incompatible\ with\ versions\ less\ than\ %s,\ this\ will\ causes\ volume\ snapshot\ operation\ to\ fail.\ Please\ avoid\ attaching\ a\ primary\ storage\ to\ clusters\ that\ have\ different\ Linux\ distributions,\ in\ order\ to\ prevent\ qemu-img\ version\ mismatch = \u4E0D\u80FD\u6302\u8F7D\u4E3B\u5B58\u50A8\u5230\u96C6\u7FA4\u3002\u96C6\u7FA4\u4E2D\u7684\u7269\u7406\u673A[uuid:{0}, name:{1}]\u62E5\u6709[{2}]\u7248\u672C\u7684qemu-img\uFF1B\u4F46\u662F\u4E3B\u5B58\u50A8\u5DF2\u7ECF\u6302\u8F7D\u5230\u62E5\u6709[{4}]\u7248\u672Cqemu-img\u7684\u96C6\u7FA4\u4E0A\u3002\u7248\u672C\u5927\u4E8E{5}\u7684qemu-img\u4E0D\u517C\u5BB9\u7248\u672C\u5C0F\u4E8E{6}\uFF0C\u8FD9\u5C06\u4F1A\u9020\u6210\u4E91\u76D8\u5FEB\u7167\u64CD\u4F5C\u5931\u8D25\u3002\u4E3A\u4E86\u9632\u6B62qemu-img\u7248\u672C\u4E0D\u517C\u5BB9\uFF0C\u8BF7\u907F\u514D\u6302\u8F7D\u4E3B\u5B58\u50A8\u5230\u7269\u7406\u673A\u88C5\u6709\u4E0D\u540Clinux\u7248\u672C\u7684\u96C6\u7FA4

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:607
# args: volume.getUuid(),volume.getName(),host.getUuid(),host.getManagementIp(),rsp.getError()
unable\ to\ create\ empty\ volume[uuid\:%s,\ \ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = \u4E0D\u80FD\u5728\u7269\u7406\u673A[uuid:{2}, ip:{3}]\u4E0A\u521B\u5EFA\u7A7A\u4E91\u76D8[uuid:{0},  name:{1}]\uFF0C\u56E0\u4E3A{4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:723
# args: vol.getUuid(),sinv.getUuid(),host.getUuid(),host.getManagementIp(),rsp.getError()
failed\ to\ revert\ volume[uuid\:%s]\ to\ snapshot[uuid\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ %s = \u56DE\u6EDA\u5728\u7269\u7406\u673A[uuid:{2}, ip:{3}]\u4E0A\u7684\u4E91\u76D8[uuid:{0}]\u5230\u5FEB\u7167[uuid:{1}]\u7684\u72B6\u6001\u5931\u8D25\uFF0C{4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:756
# args: vol.getUuid(),vol.getRootImageUuid(),host.getUuid(),host.getManagementIp(),rsp.getError()
failed\ to\ revert\ volume[uuid\:%s]\ to\ image[uuid\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ %s = \u56DE\u6EDA\u5728\u7269\u7406\u673A[uuid:{2}, ip:{3}]\u4E0A\u7684\u4E91\u76D8[uuid:{0}]\u5230\u955C\u50CF[uuid:{1}]\uFF0C{4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1161
# args: pinv.getUuid(),pinv.getName(),oldMountPoint,newMountPoint,hostUuid,errorCode
unable\ to\ update\ the\ nfs[uuid\:%s,\ name\:%s]\ mount\ point\ from\ %s\ to\ %s\ on\ the\ host[uuid\:%s],\ %s.\ Put\ the\ host-nfs\ into\ Disconnected\ status = 

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1239
# args: inv.getUuid(),huuid,errorCode.toString()
fail\ to\ mount\ nfs[uuid\:%s]\ from\ host[uuid\:%s],\ because\:%s = 

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryToSftpBackupKVMBackend.java:159
# args: backupStorageInstallPath,greply.getHostname(),pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
failed\ to\ download[%s]\ from\ SftpBackupStorage[hostname\:%s]\ to\ nfs\ primary\ storage[uuid\:%s,\ path\:%s],\ %s = \u4ECESftp\u955C\u50CF\u5B58\u50A8[hostname:{1}] \u4E0B\u8F7D[{0}]\u5230nfs\u4E3B\u5B58\u50A8[uuid:{2}, path:{3}]\u5931\u8D25\uFF0C{4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryToSftpBackupKVMBackend.java:216
# args: pinv.getUuid(),primaryStorageInstallPath,hostname,backupStorageInstallPath,rsp.getError()
failed\ to\ upload\ bits\ from\ nfs\ primary\ storage[uuid\:%s,\ path\:%s]\ to\ SFTP\ backup\ storage[hostname\:%s,\ path\:\ %s],\ %s = \u4ECEnfs\u4E3B\u5B58\u50A8[uuid:{0}, path:{1}]\u4E0A\u4F20\u6BD4\u7279\u5230STFP\u955C\u50CF\u5B58\u50A8[hostname:{2}, path: {3}]\u5931\u8D25\uFF0C{4}

# at: src/main/java/org/zstack/storage/primary/smp/KvmBackend.java:979
# args: img.getUuid(),img.getName(),self.getZoneUuid()
the\ image[uuid\:%s,\ name\:\ %s]\ is\ not\ available\ to\ download\ on\ any\ backup\ storage\:\
1.\ check\ if\ image\ is\ in\ status\ of\ Deleted\
2.\ check\ if\ the\ backup\ storage\ on\ which\ the\ image\ is\ shown\ as\ Ready\ is\ attached\ to\ the\ zone[uuid\:%s] = \u4E0D\u80FD\u4ECE\u955C\u50CF\u5B58\u50A8\u4E2D\u4E0B\u8F7D\u955C\u50CF[uuid:%s, name: %s]\
1.\u68C0\u67E5\u955C\u50CF\u662F\u5426\u5904\u4E8E\u88AB\u5220\u9664\u72B6\u6001\
2.\u68C0\u67E5\u955C\u50CF\u5904\u4E8E\u5C31\u7EEA\u72B6\u6001\u7684\u955C\u50CF\u5B58\u50A8\u662F\u5426\u6302\u8F7D\u5230\u533A\u57DF[uuid:{2}]

# at: src/main/java/org/zstack/storage/primary/smp/KvmBackend.java:206
# args: clusterUuid
no\ connected\ host\ found\ in\ the\ cluster[uuid\:%s] = cluster[uuid:{0}]\u4E0D\u5B58\u5728\u5DF2\u8FDE\u63A5\u7684\u7269\u7406\u673A

# at: src/main/java/org/zstack/storage/primary/smp/KvmBackend.java:800
# args: vol.getVmInstanceUuid(),state
vm[uuid\:%s]\ is\ not\ Running,\ Paused\ or\ Stopped,\ current\ state[%s] = \u4E91\u4E3B\u673A[uuid:{0}]\u4E0D\u662F\u8FD0\u884C\u4E2D\u3001\u5DF2\u6682\u505C\u6216\u8005\u5DF2\u505C\u6B62\u72B6\u6001\uFF0C\u73B0\u5728\u7684\u72B6\u6001\u662F[{1}]

# at: src/main/java/org/zstack/storage/primary/smp/KvmBackend.java:926
# args: volume.getUuid(),volume.getVmInstanceUuid(),state
the\ volume[uuid;%s]\ is\ attached\ to\ a\ VM[uuid\:%s]\ which\ is\ in\ state\ of\ %s,\ cannot\ do\ the\ snapshot\ merge = \u4E91\u76D8[uuid;{0}] \u6302\u8F7D\u5230\u5904\u4E8E{2}\u72B6\u6001\u7684\u865A\u62DF\u673A\uFF0C\u4E0D\u80FD\u5408\u5E76\u5FEB\u7167

# at: src/main/java/org/zstack/storage/primary/smp/KvmBackend.java:1298
# args: backupStorageUuid
cannot\ find\ backup\ storage[uuid\:%s] = \u627E\u4E0D\u5230\u955C\u50CF\u5B58\u50A8[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/smp/KvmBackend.java:1376
# args: ret.firstAccessHostUuids
hosts[uuid\:%s]\ have\ the\ same\ mount\ path,\ but\ actually\ mount\ different\ storage. = 

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageBase.java:87
# args: self.getUuid(),self.getName()
the\ shared\ mount\ point\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = \u5171\u4EAB\u6302\u8F7D\u70B9\u4E3B\u5B58\u50A8[uuid:{0}, name:{1}]\u5728\u6302\u8F7D\u7684\u96C6\u7FA4\u4E2D\u627E\u4E0D\u5230\u4EFB\u4F55\u53EF\u7528\u7684\u7269\u7406\u673A\u6765\u5B9E\u4F8B\u5316\u4E91\u76D8

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageBase.java:326
# args: 
not\ supported\ operation = \u4E0D\u652F\u6301\u7684\u64CD\u4F5C

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java:101
# args: psUuid,vmUuid,volumeUuid
the\ SMP\ primary\ storage[uuid\:%s]\ is\ not\ attached\ to\ any\ clusters,\ and\ cannot\ expunge\ the\ root\ volume[uuid\:%s]\ of\ the\ VM[uuid\:%s] = SMP\u4E3B\u5B58\u50A8[uuid:{0}]\u6CA1\u6709\u6302\u8F7D\u5230\u4EFB\u4F55\u96C6\u7FA4\uFF0C\u65E0\u6CD5\u5F7B\u5E95\u5220\u9664\u4E91\u4E3B\u673A[uuid:{2}]\u7684\u6839\u4E91\u76D8[uuid:{1}]\u3002

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java:300
# args: pri.getUuid()
cannot\ find\ a\ Connected\ host\ to\ execute\ command\ for\ smp\ primary\ storage[uuid\:%s] = \u627E\u4E0D\u5230\u4E00\u4E2A\u5DF2\u8FDE\u63A5\u72B6\u6001\u7684\u7269\u7406\u673A\u4E3ASMP\u4E3B\u5B58\u50A8[uuid:{0}]\u6267\u884C\u547D\u4EE4

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java:324
# args: pri.getUuid()
cannot\ find\ a\ host\ which\ has\ Connected\ host-SMP\ connection\ to\ execute\ command\ for\ smp\ primary\ storage[uuid\:%s] = \u627E\u4E0D\u5230\u4E00\u4E2A\u548CSMP\u4E3B\u5B58\u50A8[uuid:{0}]\u5904\u4E8E\u5DF2\u8FDE\u63A5\u72B6\u6001\u7684\u7269\u7406\u673A\u4E3A\u5176\u6267\u884C\u547D\u4EE4

# at: src/main/java/org/zstack/storage/primary/zses/ZsesKvmFactory.java:94
# args: context.getInventory().getUuid(),priUuid,reply.getError()
KVM\ host[uuid\:\ %s]\ fails\ to\ be\ added\ to\ zses\ primary\ storage[uuid\:\ %s],\ %s = 

# at: src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageBase.java:87
# args: volumeUuid
cannot\ find\ an\ available\ host\ for\ volume[uuid\:%s] = \u627E\u4E0D\u5230\u4E00\u4E2A\u53EF\u7528\u7684\u7269\u7406\u673A\u64CD\u4F5C\u4E91\u76D8[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageBase.java:499
# args: 
destination\ host\ is\ null = 

# at: src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageBase.java:621
# args: msg.getVolumeUuid(),self.getUuid()
unable\ to\ create\ the\ data\ volume[uuid\:\ %s]\ on\ a\ zses\ primary\ storage[uuid\:%s],\ because\ the\ hostUuid\ is\ not\ specified. = 

# at: src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageFactory.java:158
# args: LocalStorageSystemTags.DEST_HOST_FOR_CREATING_DATA_VOLUME.getTagFormat()
To\ create\ data\ volume\ on\ the\ zses\ primary\ storage,\ you\ must\ specify\ the\ host\ that\ the\ data\ volume\ is\ going\ to\ be\ created\ using\ the\ system\ tag\ [%s] = 

# at: src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageFactory.java:168
# args: hostUuid,msg.getPrimaryStorageUuid()
the\ host[uuid\:%s]\ doesn't\ belong\ to\ the\ zses\ primary\ storage[uuid\:%s] = 

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:82
# args: msg.getUuid()
volume\ snapshot[uuid\:%s]\ is\ not\ on\ primary\ storage,\ cannot\ be\ backed\ up = \u4E91\u76D8\u5FEB\u7167[uuid:{0}]\u4E0D\u5728\u4E3B\u5B58\u50A8\u4E0A\uFF0C\u4E0D\u80FD\u5907\u4EFD

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:90
# args: msg.getUuid(),msg.getBackupStorageUuid()
volume\ snapshot[uuid\:%s]\ is\ already\ on\ backup\ storage[uuid\:\ %s] = \u4E91\u76D8\u5FEB\u7167[uuid:{0}]\u5DF2\u7ECF\u5728\u5907\u4EFD\u5B58\u50A8[uuid: {1}]\u4E0A

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:102
# args: msg.getUuid(),priUuid,zoneUuid,msg.getBackupStorageUuid()
volume\ snapshot[uuid\:%s]\ is\ on\ primary\ storage[uuid\:%s]\ which\ is\ in\ zone[uuid\:%s]\ that\ backup\ storage[uuid\:%s]\ is\ not\ attached\ to = \u4E91\u76D8\u5FEB\u7167\u5B58\u653E\u5728\u4E3B\u5B58\u50A8[uuid:{1}]\uFF0C\u800C\u4E3B\u5B58\u50A8[uuid:{1}]\u6302\u8F7D\u5728\u672A\u6302\u8F7D\u5907\u4EFD\u5B58\u50A8[uuid:{3}]\u7684\u533A\u57DF[uuid:{2}]

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:110
# args: 
either\ volumeUuid\ or\ treeUuid\ must\ be\ set = \u4E91\u76D8Uuid\u6216\u8005\u5FEB\u7167\u6811Uuid\u5FC5\u987B\u8BBE\u7F6E

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:130
# args: msg.getVolumeUuid(),status
volume[uuid\:%s]\ is\ not\ in\ status\ Ready,\ current\ is\ %s,\ can't\ create\ snapshot = \u4E91\u76D8[uuid:{0}]\u672A\u51FA\u4E8E\u5C31\u7EEA\u72B6\u6001\uFF0C\u5F53\u524D\u662F{1}\uFF0C\u4E0D\u80FD\u521B\u5EFA\u5FEB\u7167

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:157
# args: msg.getUuid(),state
volume\ snapshot[uuid\:%s]\ is\ in\ state\ %s,\ cannot\ revert\ volume\ to\ it = \u4E91\u76D8\u5FEB\u7167[uuid:{0}]\u51FA\u4E8E\u72B6\u6001{1}\uFF0C\u4E0D\u80FD\u6062\u590D\u4E91\u76D8\u5230\u8BE5\u5FEB\u7167\u72B6\u6001

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:162
# args: msg.getUuid()
original\ volume\ for\ snapshot[uuid\:%s]\ has\ been\ deleted,\ cannot\ revert\ volume\ to\ it = \u5FEB\u7167[uuid:{0}]\u7684\u539F\u7248\u4E91\u76D8\u5DF2\u7ECF\u88AB\u5220\u9664\uFF0C\u4E0D\u80FD\u6062\u590D\u4E91\u76D8\u5230\u8BE5\u5FEB\u7167

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:312
# args: primaryStorageUuid,vol.getUuid()
primary\ storage[uuid\:%s]\ doesn't\ support\ volume\ snapshot;\ cannot\ create\ snapshot\ for\ volume[uuid\:%s] = \u4E3B\u5B58\u50A8[uuid:{0}]\u4E0D\u80FD\u652F\u6301\u4E91\u76D8\u5FEB\u7167\uFF0C\u4E0D\u80FD\u4E3A\u4E91\u76D8[uuid:{1}]\u521B\u5EFA\u5FEB\u7167

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:132
# args: currentRoot.getUuid(),currentRoot.getName()
cannot\ find\ volume\ snapshot[uuid\:%s,\ name\:%s],\ it\ may\ have\ been\ deleted\ by\ previous\ operation = \u4E0D\u80FD\u521B\u5EFA\u4E91\u76D8\u5FEB\u7167[uuid:{0}, name:{1}]\uFF0C\u8BE5\u5FEB\u7167\u53EF\u80FD\u5DF2\u7ECF\u88AB\u4EE5\u524D\u7684\u64CD\u4F5C\u5220\u9664

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:616
# args: failSnapshot.getUuid(),failSnapshot.getName(),evt
failed\ to\ change\ status\ of\ volume\ snapshot[uuid\:%s,\ name\:%s]\ by\ status\ event[%s] = \u901A\u8FC7\u72B6\u6001\u4E8B\u4EF6[{2}]\u6539\u53D8\u4E91\u76D8\u5FEB\u7167[uuid:{0}, name:{1}]\u5931\u8D25

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:1210
# args: rmsg.getVolume().getUuid(),rmsg.getSnapshot().getUuid(),rmsg.getVolume().getVmInstanceUuid(),state
unable\ to\ reset\ volume[uuid\:%s]\ to\ snapshot[uuid\:%s],\ the\ vm[uuid\:%s]\ volume\ attached\ to\ is\ not\ in\ Stopped\ state,\ current\ state\ is\ %s = \u4E0D\u80FD\u91CD\u7F6E\u4E91\u76D8[uuid:{0}]\u5230\u5FEB\u7167[uuid:{1}]\u72B6\u6001\uFF0C\u4E91\u76D8\u7684\u865A\u62DF\u673A[uuid:{2}]\u672A\u5904\u4E8E\u505C\u6B62\u72B6\u6001\uFF0C\u5F53\u524D\u72B6\u6001\u662F{3}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:87
# args: msg.getVolumeUuid()
the\ volume[uuid\:%s]\ is\ not\ in\ status\ of\ deleted.\ This\ is\ operation\ is\ to\ recover\ a\ deleted\ data\ volume = \u4E91\u76D8[uuid:{0}]\u672A\u5904\u4E8E\u5220\u9664\u72B6\u6001\u3002\u6B64\u64CD\u4F5C\u5C06\u8986\u76D6\u4E00\u4E2A\u88AB\u5220\u9664\u7684\u6570\u636E\u4E91\u76D8

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:183
# args: vol.getUuid()
the\ volume[uuid\:%s]\ is\ in\ status\ of\ deleted,\ cannot\ do\ the\ operation = \u4E91\u76D8[uuid:{0}]\u51FA\u4E8E\u5220\u9664\u64CD\u4F5C\uFF0C\u4E0D\u80FD\u6267\u884C\u6B64\u64CD\u4F5C

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:106
# args: msg.getImageUuid(),ImageMediaType.DataVolumeTemplate,type
image[uuid\:%s]\ is\ not\ %s,\ it's\ %s = \u955C\u50CF[uuid:{0}]\u4E0D\u662F{1}\uFF0C\u800C\u662F{2}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:111
# args: img.getUuid(),img.getState()
image[uuid\:%s]\ is\ not\ Enabled,\ it's\ %s = \u955C\u50CF\u4E0D\u80FD\u542F\u7528\uFF0C\u6B64\u955C\u50CF\u662F{1}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:115
# args: img.getUuid(),img.getStatus()
image[uuid\:%s]\ is\ not\ Ready,\ it's\ %s = \u955C\u50CF\u672A\u51C6\u5907\u5C31\u7EEA\uFF0C\u6B64\u955C\u50CF\u662F{1}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:126
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ Root\ volume,\ can\ not\ be\ attach\ to\ vm = \u4E91\u76D8[uuid:{0}]\u662F\u4E00\u4E2A\u6839\u4E91\u76D8\uFF0C\u4E0D\u80FD\u88AB\u624B\u52A8\u6302\u8F7D\u5230\u5176\u4ED6\u4E91\u4E3B\u673A\u3002

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:133
# args: msg.getVolumeUuid(),state,VolumeState.Enabled
volume[uuid\:%s]\ is\ in\ state[%s],\ data\ volume\ can\ only\ be\ attached\ when\ state\ is\ %s = \u4E91\u76D8[uuid:{0}]\u5904\u4E8E[{1}]\u72B6\u6001\uFF0C\u6570\u636E\u4E91\u76D8\u53EA\u80FD\u5728\u5904\u4E8E{2}\u72B6\u6001\u7684\u65F6\u5019\u6302\u8F7D

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:138
# args: msg.getVolumeUuid(),status,VolumeStatus.Ready,VolumeStatus.NotInstantiated
volume[uuid\:%s]\ is\ in\ status[%s],\ data\ volume\ can\ only\ be\ attached\ when\ status\ is\ %s\ or\ %S = \u4E91\u76D8[uuid:{0}]\u5904\u4E8E[{1}]\uFF0C\u6570\u636E\u4E91\u76D8\u53EA\u80FD\u5728\u5904\u4E8E{2}\u6216%S\u72B6\u6001\u7684\u65F6\u5019\u6302\u8F7D

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:145
# args: msg.getVolumeUuid()
data\ volume[uuid\:%s]\ is\ not\ attached\ to\ any\ vm,\ can't\ detach = \u6570\u636E\u4E91\u76D8\u6CA1\u6709\u88AB\u6302\u8F7D\u5230\u4EFB\u4F55\u4E91\u4E3B\u673A\u4E0A\uFF0C\u4E0D\u80FD\u5378\u8F7D

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:149
# args: msg.getVolumeUuid()
to\ detach\ shareable\ data\ volume[uuid\:%s],\ vm\ uuid\ is\ needed. = \u5378\u8F7D\u5171\u4EAB\u6570\u636E\u4E91\u76D8[uuid:{0}]\u9700\u8981\u865A\u62DF\u673A\u7684uuid

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:165
# args: vol.getUuid(),vol.getName()
the\ volume[uuid\:%s,\ name\:%s]\ is\ Root\ Volume,\ can't\ detach\ it = \u4E0D\u80FD\u5378\u8F7D\u6839\u4E91\u76D8[uuid:{0}, name:{1}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:179
# args: msg.getVmInstanceUuid(),msg.getVolumeUuid()
the\ vm[uuid\:%s]\ doesn't\ support\ to\ online\ attach\ volume[%s]\ on\ the\ basis\ of\ that\ the\ image\ platform\ type\ of\ the\ vm\ is\ other\  = \u4E91\u4E3B\u673A[uuid:{0}]\u4E0D\u652F\u6301\u5728\u7EBF\u6302\u8F7D\u4E91\u76D8[{1}]\u3002\u56E0\u4E3A\u955C\u50CF\u5E73\u53F0\u7C7B\u578B\u548C\u4E91\u4E3B\u673A\u5E73\u53F0\u7C7B\u578B\u4E0D\u4E00\u81F4\u3002

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:174
# args: vol.getUuid(),vol.getName()
the\ volume[uuid\:%s,\ name\:%s]\ is\ Root\ Volume,\ can't\ attach\ it = \u4E0D\u80FD\u6302\u8F7D\u6839\u4E91\u76D8[uuid:{0}, name:{1}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:179
# args: vol.getUuid()
data\ volume[uuid\:%s]\ is\ Disabled,\ can't\ attach = \u6570\u636E\u4E91\u76D8\u5DF2\u88AB\u7981\u7528\uFF0C\u4E0D\u80FD\u6302\u8F7D

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:176
# args: vol.getUuid(),vol.getVmInstanceUuid()
data\ volume[%s]\ has\ been\ attached\ to\ vm[uuid\:%s],\ can't\ attach\ again = \u6570\u636E\u4E91\u76D8\u5DF2\u7ECF\u88AB\u6302\u8F7D\u5230\u865A\u62DF\u673A[uuid:{1}]\uFF0C\u4E0D\u80FD\u518D\u6B21\u6302\u8F7D

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:181
# args: VolumeStatus.Ready,VolumeStatus.NotInstantiated,vol.getStatus()
data\ volume\ can\ only\ be\ attached\ when\ status\ is\ [%s,\ %s],\ current\ is\ %s = \u6570\u636E\u4E91\u76D8\u4EC5\u80FD\u5F53\u5904\u4E8E[{0}, {1}]\u72B6\u6001\u6302\u8F7D\uFF0C\u5F53\u524D\u72B6\u6001\u662F{2}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:192
# args: vol.getUuid(),vol.getFormat(),volHvType,msg.getVmInstanceUuid(),hvType
data\ volume[uuid\:%s]\ has\ format[%s]\ that\ can\ only\ be\ attached\ to\ hypervisor[%s],\ but\ vm[uuid\:%s]\ has\ hypervisor\ type[%s].\ Can't\ attach = \u53EA\u6709[{1}]\u683C\u5F0F\u7684\u6570\u636E\u4E91\u76D8[uuid:{0}]\u624D\u80FD\u88AB\u6302\u8F7D\u5230\u7BA1\u7406\u7A0B\u5E8F[{2}]\uFF0C\u4F46\u662F\u865A\u62DF\u673A\u662F[{4}]\u7C7B\u578B\u7684\u7BA1\u7406\u7A0B\u5E8F\uFF0C\u6570\u636E\u4E91\u76D8\u4E0D\u80FD\u6302\u8F7D\u5230\u8BE5\u865A\u62DF\u673A

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:225
# args: hvType,maxDataVolumeNum,count,msg.getVmInstanceUuid()
hypervisor[%s]\ only\ allows\ max\ %s\ data\ volumes\ to\ be\ attached\ to\ a\ single\ vm;\ there\ have\ been\ %s\ data\ volumes\ attached\ to\ vm[uuid\:%s] = [{0}]\u7BA1\u7406\u7A0B\u5E8F\u4EC5\u5141\u8BB8\u6700\u5927\u4E0D\u8D85\u8FC7{1}\u6570\u636E\u4E91\u76D8\u6302\u8F7D\u5230\u5355\u4E2A\u865A\u62DF\u673A\u3002{2} data volumes\u5DF2\u7ECF\u6302\u8F7D\u5230\u865A\u62DF\u673A[uuid:{3}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:215
# args: msg.getUuid()
it's\ not\ allowed\ to\ backup\ root\ volume,\ uuid\:%s = \u5907\u4EFD\u6839\u4E91\u76D8\u4E0D\u88AB\u5141\u8BB8\uFF0Cuuid:{0}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:234
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ Root\ volume,\ can't\ be\ deleted = \u4E0D\u80FD\u5220\u9664\u6839\u4E91\u76D8[uuid:{0}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:260
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ already\ in\ status\ of\ deleted = \u4E91\u76D8[uuid:{0}]\u65E9\u5DF2\u5904\u4E8E\u88AB\u5220\u9664\u72B6\u6001

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:253
# args: msg.getUuid()
it's\ not\ allowed\ to\ change\ state\ of\ root\ volume,\ uuid\:%s = \u4E0D\u80FD\u6539\u53D8\u6839\u4E91\u76D8\u72B6\u6001\uFF0Cuuid:{0}

# at: src/main/java/org/zstack/storage/volume/VolumeBase.java:450
# args: self.getUuid(),self.getName()
the\ volume[uuid\:%s,\ name\:%s]\ is\ not\ deleted\ yet,\ can't\ expunge\ it = \u4E91\u76D8[uuid:{0}, name:{1}]\u4ECD\u672A\u88AB\u5220\u9664\uFF0C\u4E0D\u80FD\u6E05\u9664\u8BE5\u4E91\u76D8

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:325
# args: template.getUuid(),template.getName()
the\ image[uuid\:%s,\ name\:%s]\ has\ been\ deleted\ on\ all\ backup\ storage = \u955C\u50CF[uuid:{0}, name:{1}]\u5DF2\u7ECF\u4ECE\u6240\u6709\u7684\u955C\u50CF\u5B58\u50A8\u4E2D\u5220\u9664

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:337
# args: template.getUuid(),msg.getPrimaryStorageUuid()
cannot\ find\ a\ backup\ storage\ on\ which\ the\ image[uuid\:%s]\ is\ that\ satisfies\ all\ conditions\ of\:\ 1.\ has\ state\ Enabled\ 2.\ has\ status\ Connected.\ 3\ has\ attached\ to\ zone\ in\ which\ primary\ storage[uuid\:%s]\ is = \u65E0\u6CD5\u627E\u5230\u4E00\u4E2A\u955C\u50CF[uuid:%s]\u6240\u5728\u7684\u955C\u50CF\u5B58\u50A8\u7B26\u5408\u5168\u90E8\u7684\u4E0B\u5217\u6761\u4EF6\uFF1A\u72B6\u6001\u542F\u52A8[state:Enabled]\uFF0C\u5DF2\u8FDE\u63A5[status:Connected]\uFF0C\u88AB\u6302\u8F7D\u5230\u4E3B\u5B58\u50A8[uuid:{1}]\u6240\u5728\u7684\u533A\u57DF\u4E2D\u3002

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:590
# args: VolumeFactory.class.getSimpleName()
there\ should\ not\ be\ more\ than\ one\ %s\ implementation. = \u4E0D\u5141\u8BB8\u8D85\u8FC7\u4E00\u79CD\u5B9E\u73B0

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:34
# args: 
SharedVolume\ cannot\ be\ set\ bandwidth. = \u5171\u4EAB\u4E91\u76D8\u4E0D\u5141\u8BB8\u8BBE\u7F6E\u5E26\u5BBD

# at: src/main/java/org/zstack/tag/TagApiInterceptor.java:58
# args: msg.getResourceType()
no\ resource\ type[%s]\ found\ in\ tag\ system = \u6807\u7B7E\u7CFB\u7EDF\u4E2D\u4E0D\u5B58\u5728[{0}]\u8D44\u6E90\u7C7B\u578B

# at: src/main/java/org/zstack/tag/TagApiInterceptor.java:77
# args: msg.getUuid()
tag[uuid\:%s]\ is\ an\ inherent\ system\ tag,\ can\ not\ be\ removed = \u56FA\u6709\u7CFB\u7EDF\u6807\u7B7E[uuid:{0}]\u7981\u6B62\u79FB\u9664

# at: src/main/java/org/zstack/tag/TagApiInterceptor.java:99
# args: 
The\ argument\ \:'resourceType'\ doesn't\ match\ uuid = \u53C2\u6570\uFF1A\u8D44\u6E90\u7C7B\u578B\uFF08resourceType\uFF09\u4E0EUUID\u4E0D\u5339\u914D\u3002

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:199
# args: tag,type,resourceType,resourceUuid
Duplicated\ Tag[tag\:%s,\ type\:%s,\ resourceType\:%s,\ resourceUuid\:%s] = \u6807\u7B7E[tag:{0}, type:{1}, resourceType:{2}, resourceUuid:{3}]\u91CD\u590D

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:742
# args: tag
no\ system\ tag\ matches\ %s = \u6CA1\u6709\u627E\u5230\u5339\u914D{0}\u7684\u7CFB\u7EDF\u6807\u7B7E

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:35
# args: msg.getUsername()
vCenter\ login\ name\ expected,\ got\:\ %s = vCenter\u9700\u8981\u767B\u5F55\u540D\u5B57\uFF0C\u5F97\u5230\uFF1A{0}

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:39
# args: msg.getDomainName()
domainName[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = \u57DF\u540D[{0}]\u4E0D\u662F\u4E00\u4E2AIPv4\u5730\u5740\u6216\u6709\u6548\u7684\u4E3B\u673A\u540D

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:45
# args: msg.getDomainName()
vCenter\ [domainName\:%s]\ has\ been\ added = vCenter[domainName:{0}]\u5DF2\u7ECF\u88AB\u6DFB\u52A0

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:165
# args: vCenterUrl,vcvo.getUserName(),vcvo.getPassword(),ex.getMessage()
failed\ to\ create\ VCenterServiceInstance[vCenterUrl\:%s,\ userName\:%s,\ password\:%s],\ errorMessage\:\ %s = \u521B\u5EFAVCenterServiceInstance[vCenterUrl:{0}, userName:{1}, password:{2}]\u5931\u8D25\uFF0C\u9519\u8BEF\u6D88\u606F\uFF1A{3}\u3002